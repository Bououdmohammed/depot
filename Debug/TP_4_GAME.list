
TP_4_GAME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004cc4  0800d770  0800d770  0001d770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012434  08012434  000300b0  2**0
                  CONTENTS
  4 .ARM          00000008  08012434  08012434  00022434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801243c  0801243c  000300b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801243c  0801243c  0002243c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012440  08012440  00022440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08012444  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004940  200000b0  080124f4  000300b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049f0  080124f4  000349f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030785  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bd2  00000000  00000000  00060865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002668  00000000  00000000  00066438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002400  00000000  00000000  00068aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eb36  00000000  00000000  0006aea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d672  00000000  00000000  000999d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117c60  00000000  00000000  000c7048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001deca8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a824  00000000  00000000  001decf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d758 	.word	0x0800d758

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	0800d758 	.word	0x0800d758

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200000cc 	.word	0x200000cc
 80005e4:	20000180 	.word	0x20000180

080005e8 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005f2:	20c8      	movs	r0, #200	; 0xc8
 80005f4:	f002 f840 	bl	8002678 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f8:	f000 f9b4 	bl	8000964 <ft5336_I2C_InitializeIfRequired>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b084      	sub	sp, #16
 800061e:	af00      	add	r7, sp, #0
 8000620:	4603      	mov	r3, r0
 8000622:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800062c:	2300      	movs	r3, #0
 800062e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000630:	f000 f998 	bl	8000964 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000634:	2300      	movs	r3, #0
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	e010      	b.n	800065c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	21a8      	movs	r1, #168	; 0xa8
 8000640:	4618      	mov	r0, r3
 8000642:	f001 fffb 	bl	800263c <TS_IO_Read>
 8000646:	4603      	mov	r3, r0
 8000648:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800064a:	7b7b      	ldrb	r3, [r7, #13]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b51      	cmp	r3, #81	; 0x51
 8000650:	d101      	bne.n	8000656 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000652:	2301      	movs	r3, #1
 8000654:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	3301      	adds	r3, #1
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	2b02      	cmp	r3, #2
 8000660:	d802      	bhi.n	8000668 <ft5336_ReadID+0x4e>
 8000662:	7bbb      	ldrb	r3, [r7, #14]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d0e8      	beq.n	800063a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000668:	7b7b      	ldrb	r3, [r7, #13]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	b29b      	uxth	r3, r3
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	4603      	mov	r3, r0
 800067e:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f97e 	bl	8000984 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000688:	88fb      	ldrh	r3, [r7, #6]
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f932 	bl	80008f4 <ft5336_TS_DisableIT>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2102      	movs	r1, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 ffc5 	bl	800263c <TS_IO_Read>
 80006b2:	4603      	mov	r3, r0
 80006b4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b05      	cmp	r3, #5
 80006c8:	d901      	bls.n	80006ce <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <ft5336_TS_DetectTouch+0x50>)
 80006d4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <ft5336_TS_DetectTouch+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	b2db      	uxtb	r3, r3
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000380 	.word	0x20000380

080006ec <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800070e:	4b6d      	ldr	r3, [pc, #436]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 8000710:	789a      	ldrb	r2, [r3, #2]
 8000712:	4b6c      	ldr	r3, [pc, #432]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 8000714:	785b      	ldrb	r3, [r3, #1]
 8000716:	429a      	cmp	r2, r3
 8000718:	f080 80cf 	bcs.w	80008ba <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800071c:	4b69      	ldr	r3, [pc, #420]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 800071e:	789b      	ldrb	r3, [r3, #2]
 8000720:	2b09      	cmp	r3, #9
 8000722:	d871      	bhi.n	8000808 <ft5336_TS_GetXY+0x11c>
 8000724:	a201      	add	r2, pc, #4	; (adr r2, 800072c <ft5336_TS_GetXY+0x40>)
 8000726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072a:	bf00      	nop
 800072c:	08000755 	.word	0x08000755
 8000730:	08000767 	.word	0x08000767
 8000734:	08000779 	.word	0x08000779
 8000738:	0800078b 	.word	0x0800078b
 800073c:	0800079d 	.word	0x0800079d
 8000740:	080007af 	.word	0x080007af
 8000744:	080007c1 	.word	0x080007c1
 8000748:	080007d3 	.word	0x080007d3
 800074c:	080007e5 	.word	0x080007e5
 8000750:	080007f7 	.word	0x080007f7
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000754:	2304      	movs	r3, #4
 8000756:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000758:	2303      	movs	r3, #3
 800075a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800075c:	2306      	movs	r3, #6
 800075e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000760:	2305      	movs	r3, #5
 8000762:	753b      	strb	r3, [r7, #20]
      break;
 8000764:	e051      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000766:	230a      	movs	r3, #10
 8000768:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800076a:	2309      	movs	r3, #9
 800076c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800076e:	230c      	movs	r3, #12
 8000770:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000772:	230b      	movs	r3, #11
 8000774:	753b      	strb	r3, [r7, #20]
      break;
 8000776:	e048      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000778:	2310      	movs	r3, #16
 800077a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800077c:	230f      	movs	r3, #15
 800077e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000780:	2312      	movs	r3, #18
 8000782:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000784:	2311      	movs	r3, #17
 8000786:	753b      	strb	r3, [r7, #20]
      break;
 8000788:	e03f      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800078a:	2316      	movs	r3, #22
 800078c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800078e:	2315      	movs	r3, #21
 8000790:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000792:	2318      	movs	r3, #24
 8000794:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000796:	2317      	movs	r3, #23
 8000798:	753b      	strb	r3, [r7, #20]
      break;
 800079a:	e036      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 800079c:	231c      	movs	r3, #28
 800079e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80007a0:	231b      	movs	r3, #27
 80007a2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007a4:	231e      	movs	r3, #30
 80007a6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007a8:	231d      	movs	r3, #29
 80007aa:	753b      	strb	r3, [r7, #20]
      break;
 80007ac:	e02d      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007ae:	2322      	movs	r3, #34	; 0x22
 80007b0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007b2:	2321      	movs	r3, #33	; 0x21
 80007b4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007b6:	2324      	movs	r3, #36	; 0x24
 80007b8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007ba:	2323      	movs	r3, #35	; 0x23
 80007bc:	753b      	strb	r3, [r7, #20]
      break;
 80007be:	e024      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007c0:	2328      	movs	r3, #40	; 0x28
 80007c2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007c4:	2327      	movs	r3, #39	; 0x27
 80007c6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007c8:	232a      	movs	r3, #42	; 0x2a
 80007ca:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007cc:	2329      	movs	r3, #41	; 0x29
 80007ce:	753b      	strb	r3, [r7, #20]
      break;
 80007d0:	e01b      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80007d2:	232e      	movs	r3, #46	; 0x2e
 80007d4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80007d6:	232d      	movs	r3, #45	; 0x2d
 80007d8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007da:	2330      	movs	r3, #48	; 0x30
 80007dc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007de:	232f      	movs	r3, #47	; 0x2f
 80007e0:	753b      	strb	r3, [r7, #20]
      break;
 80007e2:	e012      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007e4:	2334      	movs	r3, #52	; 0x34
 80007e6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007e8:	2333      	movs	r3, #51	; 0x33
 80007ea:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007ec:	2336      	movs	r3, #54	; 0x36
 80007ee:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007f0:	2335      	movs	r3, #53	; 0x35
 80007f2:	753b      	strb	r3, [r7, #20]
      break;
 80007f4:	e009      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007f6:	233a      	movs	r3, #58	; 0x3a
 80007f8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007fa:	2339      	movs	r3, #57	; 0x39
 80007fc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007fe:	233c      	movs	r3, #60	; 0x3c
 8000800:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000802:	233b      	movs	r3, #59	; 0x3b
 8000804:	753b      	strb	r3, [r7, #20]
      break;
 8000806:	e000      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000808:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	7dfa      	ldrb	r2, [r7, #23]
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f001 ff12 	bl	800263c <TS_IO_Read>
 8000818:	4603      	mov	r3, r0
 800081a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800081c:	7cfb      	ldrb	r3, [r7, #19]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	b29a      	uxth	r2, r3
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000824:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000826:	89fb      	ldrh	r3, [r7, #14]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	7dba      	ldrb	r2, [r7, #22]
 800082c:	4611      	mov	r1, r2
 800082e:	4618      	mov	r0, r3
 8000830:	f001 ff04 	bl	800263c <TS_IO_Read>
 8000834:	4603      	mov	r3, r0
 8000836:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000838:	7cfb      	ldrb	r3, [r7, #19]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	021b      	lsls	r3, r3, #8
 800083e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000842:	b21a      	sxth	r2, r3
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	b21b      	sxth	r3, r3
 800084a:	4313      	orrs	r3, r2
 800084c:	b21b      	sxth	r3, r3
 800084e:	b29a      	uxth	r2, r3
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000852:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000856:	881a      	ldrh	r2, [r3, #0]
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800085c:	89fb      	ldrh	r3, [r7, #14]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	7d7a      	ldrb	r2, [r7, #21]
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fee9 	bl	800263c <TS_IO_Read>
 800086a:	4603      	mov	r3, r0
 800086c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800086e:	7cfb      	ldrb	r3, [r7, #19]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	b29a      	uxth	r2, r3
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000876:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000878:	89fb      	ldrh	r3, [r7, #14]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	7d3a      	ldrb	r2, [r7, #20]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f001 fedb 	bl	800263c <TS_IO_Read>
 8000886:	4603      	mov	r3, r0
 8000888:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800088a:	7cfb      	ldrb	r3, [r7, #19]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	021b      	lsls	r3, r3, #8
 8000890:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000894:	b21a      	sxth	r2, r3
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	b21b      	sxth	r3, r3
 800089c:	4313      	orrs	r3, r2
 800089e:	b21b      	sxth	r3, r3
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 80008a4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 80008a8:	881a      	ldrh	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 80008b0:	789b      	ldrb	r3, [r3, #2]
 80008b2:	3301      	adds	r3, #1
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 80008b8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000380 	.word	0x20000380
 80008c8:	20000384 	.word	0x20000384

080008cc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008da:	2301      	movs	r3, #1
 80008dc:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	7bfa      	ldrb	r2, [r7, #15]
 80008e4:	21a4      	movs	r1, #164	; 0xa4
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 fe8e 	bl	8002608 <TS_IO_Write>
}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000902:	2300      	movs	r3, #0
 8000904:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	7bfa      	ldrb	r2, [r7, #15]
 800090c:	21a4      	movs	r1, #164	; 0xa4
 800090e:	4618      	mov	r0, r3
 8000910:	f001 fe7a 	bl	8002608 <TS_IO_Write>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000952:	781b      	ldrb	r3, [r3, #0]
}
 8000954:	4618      	mov	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000380 	.word	0x20000380

08000964 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000968:	f7ff fff0 	bl	800094c <ft5336_Get_I2C_InitializedStatus>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d104      	bne.n	800097c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000972:	f001 fe3f 	bl	80025f4 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000976:	4b02      	ldr	r3, [pc, #8]	; (8000980 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]
  }
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000380 	.word	0x20000380

08000984 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a0:	b5b0      	push	{r4, r5, r7, lr}
 80009a2:	b0ba      	sub	sp, #232	; 0xe8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a6:	f003 fd0c 	bl	80043c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009aa:	f000 f945 	bl	8000c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ae:	f000 ff0d 	bl	80017cc <MX_GPIO_Init>
  MX_ADC3_Init();
 80009b2:	f000 fa05 	bl	8000dc0 <MX_ADC3_Init>
  MX_DMA2D_Init();
 80009b6:	f000 fa7f 	bl	8000eb8 <MX_DMA2D_Init>
  MX_FMC_Init();
 80009ba:	f000 feb7 	bl	800172c <MX_FMC_Init>
  MX_I2C1_Init();
 80009be:	f000 faad 	bl	8000f1c <MX_I2C1_Init>
  MX_I2C3_Init();
 80009c2:	f000 faeb 	bl	8000f9c <MX_I2C3_Init>
  MX_LTDC_Init();
 80009c6:	f000 fb29 	bl	800101c <MX_LTDC_Init>
  MX_RTC_Init();
 80009ca:	f000 fba9 	bl	8001120 <MX_RTC_Init>
  MX_SPI2_Init();
 80009ce:	f000 fc4d 	bl	800126c <MX_SPI2_Init>
  MX_TIM1_Init();
 80009d2:	f000 fc89 	bl	80012e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009d6:	f000 fcdb 	bl	8001390 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009da:	f000 fd27 	bl	800142c <MX_TIM3_Init>
  MX_TIM5_Init();
 80009de:	f000 fd73 	bl	80014c8 <MX_TIM5_Init>
  MX_TIM8_Init();
 80009e2:	f000 fdbf 	bl	8001564 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80009e6:	f000 fe41 	bl	800166c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80009ea:	f000 fe6f 	bl	80016cc <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80009ee:	f000 f995 	bl	8000d1c <MX_ADC1_Init>
  MX_DAC_Init();
 80009f2:	f000 fa37 	bl	8000e64 <MX_DAC_Init>
  MX_UART7_Init();
 80009f6:	f000 fe09 	bl	800160c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  	BSP_LCD_Init();
 80009fa:	f001 fe49 	bl	8002690 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80009fe:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000a02:	2000      	movs	r0, #0
 8000a04:	f001 fedc 	bl	80027c0 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000a08:	f001 feb2 	bl	8002770 <BSP_LCD_GetXSize>
 8000a0c:	4604      	mov	r4, r0
 8000a0e:	f001 fec3 	bl	8002798 <BSP_LCD_GetYSize>
 8000a12:	4603      	mov	r3, r0
 8000a14:	fb04 f303 	mul.w	r3, r4, r3
 8000a18:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	4619      	mov	r1, r3
 8000a20:	2001      	movs	r0, #1
 8000a22:	f001 fecd 	bl	80027c0 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 8000a26:	f002 f9b5 	bl	8002d94 <BSP_LCD_DisplayOn>
    BSP_LCD_SelectLayer(0);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f001 ff28 	bl	8002880 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f001 ff80 	bl	8002938 <BSP_LCD_Clear>
    BSP_LCD_SelectLayer(1);
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f001 ff21 	bl	8002880 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(00);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f001 ff7a 	bl	8002938 <BSP_LCD_Clear>
    BSP_LCD_DrawBitmap(0,0,(uint8_t*)diableRGB565_bmp);
 8000a44:	4a69      	ldr	r2, [pc, #420]	; (8000bec <main+0x24c>)
 8000a46:	2100      	movs	r1, #0
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f002 f8f1 	bl	8002c30 <BSP_LCD_DrawBitmap>
    BSP_LCD_SetFont(&Font12);
 8000a4e:	4868      	ldr	r0, [pc, #416]	; (8000bf0 <main+0x250>)
 8000a50:	f001 ff58 	bl	8002904 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8000a54:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8000a58:	f001 ff22 	bl	80028a0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(00);
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f001 ff37 	bl	80028d0 <BSP_LCD_SetBackColor>

    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000a62:	f001 fe85 	bl	8002770 <BSP_LCD_GetXSize>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b29c      	uxth	r4, r3
 8000a6a:	f001 fe95 	bl	8002798 <BSP_LCD_GetYSize>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	4619      	mov	r1, r3
 8000a74:	4620      	mov	r0, r4
 8000a76:	f002 fd9f 	bl	80035b8 <BSP_TS_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MUTEX */
  osMutexDef(MUTEX);
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000a80:	2300      	movs	r3, #0
 8000a82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  MUTEXHandle = osMutexCreate(osMutex(MUTEX));
 8000a86:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f009 fd69 	bl	800a562 <osMutexCreate>
 8000a90:	4603      	mov	r3, r0
 8000a92:	4a58      	ldr	r2, [pc, #352]	; (8000bf4 <main+0x254>)
 8000a94:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueP2V */
  osMessageQDef(myQueueP2V, 2, uint16_t);
 8000a96:	4b58      	ldr	r3, [pc, #352]	; (8000bf8 <main+0x258>)
 8000a98:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8000a9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueP2VHandle = osMessageCreate(osMessageQ(myQueueP2V), NULL);
 8000aa2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f009 fd72 	bl	800a592 <osMessageCreate>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4a52      	ldr	r2, [pc, #328]	; (8000bfc <main+0x25c>)
 8000ab2:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueueU2H */
  osMessageQDef(myQueueU2H, 2, uint16_t);
 8000ab4:	4b50      	ldr	r3, [pc, #320]	; (8000bf8 <main+0x258>)
 8000ab6:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8000aba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000abc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueU2HHandle = osMessageCreate(osMessageQ(myQueueU2H), NULL);
 8000ac0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f009 fd63 	bl	800a592 <osMessageCreate>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4a4c      	ldr	r2, [pc, #304]	; (8000c00 <main+0x260>)
 8000ad0:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueueHommePos */
  osMessageQDef(myQueueHommePos, 2, uint16_t);
 8000ad2:	4b49      	ldr	r3, [pc, #292]	; (8000bf8 <main+0x258>)
 8000ad4:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8000ad8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ada:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueHommePosHandle = osMessageCreate(osMessageQ(myQueueHommePos), NULL);
 8000ade:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f009 fd54 	bl	800a592 <osMessageCreate>
 8000aea:	4603      	mov	r3, r0
 8000aec:	4a45      	ldr	r2, [pc, #276]	; (8000c04 <main+0x264>)
 8000aee:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueue_Game_Over */
  osMessageQDef(myQueue_Game_Over, 2, uint16_t);
 8000af0:	4b41      	ldr	r3, [pc, #260]	; (8000bf8 <main+0x258>)
 8000af2:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000af6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000af8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue_Game_OverHandle = osMessageCreate(osMessageQ(myQueue_Game_Over), NULL);
 8000afc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f009 fd45 	bl	800a592 <osMessageCreate>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4a3f      	ldr	r2, [pc, #252]	; (8000c08 <main+0x268>)
 8000b0c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueue_I_WIN */
  osMessageQDef(myQueue_I_WIN, 2, uint16_t);
 8000b0e:	4b3a      	ldr	r3, [pc, #232]	; (8000bf8 <main+0x258>)
 8000b10:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000b14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue_I_WINHandle = osMessageCreate(osMessageQ(myQueue_I_WIN), NULL);
 8000b1a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f009 fd36 	bl	800a592 <osMessageCreate>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4a38      	ldr	r2, [pc, #224]	; (8000c0c <main+0x26c>)
 8000b2a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b2c:	4b38      	ldr	r3, [pc, #224]	; (8000c10 <main+0x270>)
 8000b2e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000b32:	461d      	mov	r5, r3
 8000b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b40:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f009 fcab 	bl	800a4a2 <osThreadCreate>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	4a31      	ldr	r2, [pc, #196]	; (8000c14 <main+0x274>)
 8000b50:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_1 */
  osThreadDef(Task_1, Task_diable, osPriorityNormal, 0, 1024);
 8000b52:	4b31      	ldr	r3, [pc, #196]	; (8000c18 <main+0x278>)
 8000b54:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000b58:	461d      	mov	r5, r3
 8000b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1Handle = osThreadCreate(osThread(Task_1), NULL);
 8000b66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f009 fc98 	bl	800a4a2 <osThreadCreate>
 8000b72:	4603      	mov	r3, r0
 8000b74:	4a29      	ldr	r2, [pc, #164]	; (8000c1c <main+0x27c>)
 8000b76:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, Task_homme, osPriorityNormal, 0, 1024);
 8000b78:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <main+0x280>)
 8000b7a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000b7e:	461d      	mov	r5, r3
 8000b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000b8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f009 fc85 	bl	800a4a2 <osThreadCreate>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	4a22      	ldr	r2, [pc, #136]	; (8000c24 <main+0x284>)
 8000b9c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, Task_virus, osPriorityNormal, 0, 1024);
 8000b9e:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <main+0x288>)
 8000ba0:	f107 0420 	add.w	r4, r7, #32
 8000ba4:	461d      	mov	r5, r3
 8000ba6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000baa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8000bb2:	f107 0320 	add.w	r3, r7, #32
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f009 fc72 	bl	800a4a2 <osThreadCreate>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4a1a      	ldr	r2, [pc, #104]	; (8000c2c <main+0x28c>)
 8000bc2:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, Task_Game_Over, osPriorityIdle, 0, 128);
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <main+0x290>)
 8000bc6:	1d3c      	adds	r4, r7, #4
 8000bc8:	461d      	mov	r5, r3
 8000bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f009 fc61 	bl	800a4a2 <osThreadCreate>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <main+0x294>)
 8000be4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000be6:	f009 fc55 	bl	800a494 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <main+0x24a>
 8000bec:	0800d88c 	.word	0x0800d88c
 8000bf0:	20000030 	.word	0x20000030
 8000bf4:	20000994 	.word	0x20000994
 8000bf8:	0800d7a8 	.word	0x0800d7a8
 8000bfc:	20000980 	.word	0x20000980
 8000c00:	20000984 	.word	0x20000984
 8000c04:	20000988 	.word	0x20000988
 8000c08:	2000098c 	.word	0x2000098c
 8000c0c:	20000990 	.word	0x20000990
 8000c10:	0800d7b8 	.word	0x0800d7b8
 8000c14:	2000096c 	.word	0x2000096c
 8000c18:	0800d7d4 	.word	0x0800d7d4
 8000c1c:	20000970 	.word	0x20000970
 8000c20:	0800d7f0 	.word	0x0800d7f0
 8000c24:	20000974 	.word	0x20000974
 8000c28:	0800d80c 	.word	0x0800d80c
 8000c2c:	20000978 	.word	0x20000978
 8000c30:	0800d828 	.word	0x0800d828
 8000c34:	2000097c 	.word	0x2000097c

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b094      	sub	sp, #80	; 0x50
 8000c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	2230      	movs	r2, #48	; 0x30
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f00c f8b6 	bl	800cdb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c5c:	f006 fbcc 	bl	80073f8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c60:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <SystemClock_Config+0xdc>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	4a2b      	ldr	r2, [pc, #172]	; (8000d14 <SystemClock_Config+0xdc>)
 8000c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6c:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <SystemClock_Config+0xdc>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c78:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <SystemClock_Config+0xe0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a26      	ldr	r2, [pc, #152]	; (8000d18 <SystemClock_Config+0xe0>)
 8000c7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <SystemClock_Config+0xe0>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000c90:	2309      	movs	r3, #9
 8000c92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ca8:	2319      	movs	r3, #25
 8000caa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000cac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000cb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000cb6:	2309      	movs	r3, #9
 8000cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cba:	f107 0320 	add.w	r3, r7, #32
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f006 fbfa 	bl	80074b8 <HAL_RCC_OscConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cca:	f001 fb37 	bl	800233c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cce:	f006 fba3 	bl	8007418 <HAL_PWREx_EnableOverDrive>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000cd8:	f001 fb30 	bl	800233c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cdc:	230f      	movs	r3, #15
 8000cde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ce8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2106      	movs	r1, #6
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f006 fe80 	bl	8007a00 <HAL_RCC_ClockConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d06:	f001 fb19 	bl	800233c <Error_Handler>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	3750      	adds	r7, #80	; 0x50
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40007000 	.word	0x40007000

08000d1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d22:	463b      	mov	r3, r7
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d30:	4a21      	ldr	r2, [pc, #132]	; (8000db8 <MX_ADC1_Init+0x9c>)
 8000d32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <MX_ADC1_Init+0xa0>)
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d7c:	480d      	ldr	r0, [pc, #52]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d7e:	f003 fb71 	bl	8004464 <HAL_ADC_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d88:	f001 fad8 	bl	800233c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d90:	2301      	movs	r3, #1
 8000d92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d98:	463b      	mov	r3, r7
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_ADC1_Init+0x98>)
 8000d9e:	f003 fd0b 	bl	80047b8 <HAL_ADC_ConfigChannel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000da8:	f001 fac8 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000388 	.word	0x20000388
 8000db8:	40012000 	.word	0x40012000
 8000dbc:	0f000001 	.word	0x0f000001

08000dc0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_ADC3_Init+0x98>)
 8000dd4:	4a21      	ldr	r2, [pc, #132]	; (8000e5c <MX_ADC3_Init+0x9c>)
 8000dd6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_ADC3_Init+0x98>)
 8000dda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dde:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <MX_ADC3_Init+0x98>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_ADC3_Init+0x98>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_ADC3_Init+0x98>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <MX_ADC3_Init+0x98>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_ADC3_Init+0x98>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_ADC3_Init+0x98>)
 8000e02:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <MX_ADC3_Init+0xa0>)
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_ADC3_Init+0x98>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_ADC3_Init+0x98>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_ADC3_Init+0x98>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_ADC3_Init+0x98>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <MX_ADC3_Init+0x98>)
 8000e22:	f003 fb1f 	bl	8004464 <HAL_ADC_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000e2c:	f001 fa86 	bl	800233c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e30:	2306      	movs	r3, #6
 8000e32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e34:	2301      	movs	r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e3c:	463b      	mov	r3, r7
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_ADC3_Init+0x98>)
 8000e42:	f003 fcb9 	bl	80047b8 <HAL_ADC_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000e4c:	f001 fa76 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200003d0 	.word	0x200003d0
 8000e5c:	40012200 	.word	0x40012200
 8000e60:	0f000001 	.word	0x0f000001

08000e64 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_DAC_Init+0x4c>)
 8000e74:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <MX_DAC_Init+0x50>)
 8000e76:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <MX_DAC_Init+0x4c>)
 8000e7a:	f003 ffcf 	bl	8004e1c <HAL_DAC_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e84:	f001 fa5a 	bl	800233c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e90:	463b      	mov	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	4619      	mov	r1, r3
 8000e96:	4806      	ldr	r0, [pc, #24]	; (8000eb0 <MX_DAC_Init+0x4c>)
 8000e98:	f004 f846 	bl	8004f28 <HAL_DAC_ConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000ea2:	f001 fa4b 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000418 	.word	0x20000418
 8000eb4:	40007400 	.word	0x40007400

08000eb8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_DMA2D_Init+0x5c>)
 8000ebe:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <MX_DMA2D_Init+0x60>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_DMA2D_Init+0x5c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <MX_DMA2D_Init+0x5c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_DMA2D_Init+0x5c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_DMA2D_Init+0x5c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_DMA2D_Init+0x5c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_DMA2D_Init+0x5c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <MX_DMA2D_Init+0x5c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <MX_DMA2D_Init+0x5c>)
 8000eee:	f004 fa33 	bl	8005358 <HAL_DMA2D_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000ef8:	f001 fa20 	bl	800233c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000efc:	2101      	movs	r1, #1
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_DMA2D_Init+0x5c>)
 8000f00:	f004 fc98 	bl	8005834 <HAL_DMA2D_ConfigLayer>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000f0a:	f001 fa17 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000042c 	.word	0x2000042c
 8000f18:	4002b000 	.word	0x4002b000

08000f1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f20:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f22:	4a1c      	ldr	r2, [pc, #112]	; (8000f94 <MX_I2C1_Init+0x78>)
 8000f24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000f26:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f28:	4a1b      	ldr	r2, [pc, #108]	; (8000f98 <MX_I2C1_Init+0x7c>)
 8000f2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f2c:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f38:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f56:	480e      	ldr	r0, [pc, #56]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f58:	f005 f89c 	bl	8006094 <HAL_I2C_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f62:	f001 f9eb 	bl	800233c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f66:	2100      	movs	r1, #0
 8000f68:	4809      	ldr	r0, [pc, #36]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f6a:	f005 fe35 	bl	8006bd8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f74:	f001 f9e2 	bl	800233c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_I2C1_Init+0x74>)
 8000f7c:	f005 fe77 	bl	8006c6e <HAL_I2CEx_ConfigDigitalFilter>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f86:	f001 f9d9 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000046c 	.word	0x2000046c
 8000f94:	40005400 	.word	0x40005400
 8000f98:	00c0eaff 	.word	0x00c0eaff

08000f9c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <MX_I2C3_Init+0x78>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <MX_I2C3_Init+0x7c>)
 8000faa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000fd6:	480e      	ldr	r0, [pc, #56]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fd8:	f005 f85c 	bl	8006094 <HAL_I2C_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000fe2:	f001 f9ab 	bl	800233c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4809      	ldr	r0, [pc, #36]	; (8001010 <MX_I2C3_Init+0x74>)
 8000fea:	f005 fdf5 	bl	8006bd8 <HAL_I2CEx_ConfigAnalogFilter>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ff4:	f001 f9a2 	bl	800233c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_I2C3_Init+0x74>)
 8000ffc:	f005 fe37 	bl	8006c6e <HAL_I2CEx_ConfigDigitalFilter>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001006:	f001 f999 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200004b8 	.word	0x200004b8
 8001014:	40005c00 	.word	0x40005c00
 8001018:	00c0eaff 	.word	0x00c0eaff

0800101c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08e      	sub	sp, #56	; 0x38
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2234      	movs	r2, #52	; 0x34
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f00b fec5 	bl	800cdb8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800102e:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <MX_LTDC_Init+0xfc>)
 8001030:	4a3a      	ldr	r2, [pc, #232]	; (800111c <MX_LTDC_Init+0x100>)
 8001032:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001034:	4b38      	ldr	r3, [pc, #224]	; (8001118 <MX_LTDC_Init+0xfc>)
 8001036:	2200      	movs	r2, #0
 8001038:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800103a:	4b37      	ldr	r3, [pc, #220]	; (8001118 <MX_LTDC_Init+0xfc>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001040:	4b35      	ldr	r3, [pc, #212]	; (8001118 <MX_LTDC_Init+0xfc>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001046:	4b34      	ldr	r3, [pc, #208]	; (8001118 <MX_LTDC_Init+0xfc>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800104c:	4b32      	ldr	r3, [pc, #200]	; (8001118 <MX_LTDC_Init+0xfc>)
 800104e:	2228      	movs	r2, #40	; 0x28
 8001050:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001052:	4b31      	ldr	r3, [pc, #196]	; (8001118 <MX_LTDC_Init+0xfc>)
 8001054:	2209      	movs	r2, #9
 8001056:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001058:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <MX_LTDC_Init+0xfc>)
 800105a:	2235      	movs	r2, #53	; 0x35
 800105c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800105e:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <MX_LTDC_Init+0xfc>)
 8001060:	220b      	movs	r2, #11
 8001062:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001064:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <MX_LTDC_Init+0xfc>)
 8001066:	f240 2215 	movw	r2, #533	; 0x215
 800106a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800106c:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <MX_LTDC_Init+0xfc>)
 800106e:	f240 121b 	movw	r2, #283	; 0x11b
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001074:	4b28      	ldr	r3, [pc, #160]	; (8001118 <MX_LTDC_Init+0xfc>)
 8001076:	f240 2235 	movw	r2, #565	; 0x235
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <MX_LTDC_Init+0xfc>)
 800107e:	f240 121d 	movw	r2, #285	; 0x11d
 8001082:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <MX_LTDC_Init+0xfc>)
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800108c:	4b22      	ldr	r3, [pc, #136]	; (8001118 <MX_LTDC_Init+0xfc>)
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001094:	4b20      	ldr	r3, [pc, #128]	; (8001118 <MX_LTDC_Init+0xfc>)
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800109c:	481e      	ldr	r0, [pc, #120]	; (8001118 <MX_LTDC_Init+0xfc>)
 800109e:	f005 fe33 	bl	8006d08 <HAL_LTDC_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80010a8:	f001 f948 	bl	800233c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80010b0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80010b4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80010ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 80010be:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80010c0:	2302      	movs	r3, #2
 80010c2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80010c4:	23ff      	movs	r3, #255	; 0xff
 80010c6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80010cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010d0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80010d2:	2307      	movs	r3, #7
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80010d6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80010dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80010e2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80010e6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_LTDC_Init+0xfc>)
 8001102:	f005 ff93 	bl	800702c <HAL_LTDC_ConfigLayer>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800110c:	f001 f916 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3738      	adds	r7, #56	; 0x38
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000504 	.word	0x20000504
 800111c:	40016800 	.word	0x40016800

08001120 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b092      	sub	sp, #72	; 0x48
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001126:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]
 8001136:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800113c:	463b      	mov	r3, r7
 800113e:	222c      	movs	r2, #44	; 0x2c
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f00b fe38 	bl	800cdb8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001148:	4b46      	ldr	r3, [pc, #280]	; (8001264 <MX_RTC_Init+0x144>)
 800114a:	4a47      	ldr	r2, [pc, #284]	; (8001268 <MX_RTC_Init+0x148>)
 800114c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800114e:	4b45      	ldr	r3, [pc, #276]	; (8001264 <MX_RTC_Init+0x144>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001154:	4b43      	ldr	r3, [pc, #268]	; (8001264 <MX_RTC_Init+0x144>)
 8001156:	227f      	movs	r2, #127	; 0x7f
 8001158:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800115a:	4b42      	ldr	r3, [pc, #264]	; (8001264 <MX_RTC_Init+0x144>)
 800115c:	22ff      	movs	r2, #255	; 0xff
 800115e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001160:	4b40      	ldr	r3, [pc, #256]	; (8001264 <MX_RTC_Init+0x144>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001166:	4b3f      	ldr	r3, [pc, #252]	; (8001264 <MX_RTC_Init+0x144>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800116c:	4b3d      	ldr	r3, [pc, #244]	; (8001264 <MX_RTC_Init+0x144>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001172:	483c      	ldr	r0, [pc, #240]	; (8001264 <MX_RTC_Init+0x144>)
 8001174:	f007 fa4c 	bl	8008610 <HAL_RTC_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800117e:	f001 f8dd 	bl	800233c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001182:	2300      	movs	r3, #0
 8001184:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001188:	2300      	movs	r3, #0
 800118a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800118e:	2300      	movs	r3, #0
 8001190:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001194:	2300      	movs	r3, #0
 8001196:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800119c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011a0:	2201      	movs	r2, #1
 80011a2:	4619      	mov	r1, r3
 80011a4:	482f      	ldr	r0, [pc, #188]	; (8001264 <MX_RTC_Init+0x144>)
 80011a6:	f007 fac5 	bl	8008734 <HAL_RTC_SetTime>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80011b0:	f001 f8c4 	bl	800233c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011b4:	2301      	movs	r3, #1
 80011b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80011ba:	2301      	movs	r3, #1
 80011bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x5;
 80011c0:	2305      	movs	r3, #5
 80011c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x22;
 80011c6:	2322      	movs	r3, #34	; 0x22
 80011c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d0:	2201      	movs	r2, #1
 80011d2:	4619      	mov	r1, r3
 80011d4:	4823      	ldr	r0, [pc, #140]	; (8001264 <MX_RTC_Init+0x144>)
 80011d6:	f007 fb6b 	bl	80088b0 <HAL_RTC_SetDate>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80011e0:	f001 f8ac 	bl	800233c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001208:	2301      	movs	r3, #1
 800120a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800120e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	2201      	movs	r2, #1
 8001218:	4619      	mov	r1, r3
 800121a:	4812      	ldr	r0, [pc, #72]	; (8001264 <MX_RTC_Init+0x144>)
 800121c:	f007 fbf0 	bl	8008a00 <HAL_RTC_SetAlarm>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001226:	f001 f889 	bl	800233c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800122a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	2201      	movs	r2, #1
 8001234:	4619      	mov	r1, r3
 8001236:	480b      	ldr	r0, [pc, #44]	; (8001264 <MX_RTC_Init+0x144>)
 8001238:	f007 fbe2 	bl	8008a00 <HAL_RTC_SetAlarm>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001242:	f001 f87b 	bl	800233c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001246:	2202      	movs	r2, #2
 8001248:	2100      	movs	r1, #0
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <MX_RTC_Init+0x144>)
 800124c:	f007 fd62 	bl	8008d14 <HAL_RTCEx_SetTimeStamp>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001256:	f001 f871 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	3748      	adds	r7, #72	; 0x48
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200005ac 	.word	0x200005ac
 8001268:	40002800 	.word	0x40002800

0800126c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001270:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <MX_SPI2_Init+0x74>)
 8001272:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <MX_SPI2_Init+0x78>)
 8001274:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MX_SPI2_Init+0x74>)
 8001278:	f44f 7282 	mov.w	r2, #260	; 0x104
 800127c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <MX_SPI2_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_SPI2_Init+0x74>)
 8001286:	f44f 7240 	mov.w	r2, #768	; 0x300
 800128a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_SPI2_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <MX_SPI2_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_SPI2_Init+0x74>)
 800129a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800129e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_SPI2_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_SPI2_Init+0x74>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_SPI2_Init+0x74>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_SPI2_Init+0x74>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_SPI2_Init+0x74>)
 80012ba:	2207      	movs	r2, #7
 80012bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <MX_SPI2_Init+0x74>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_SPI2_Init+0x74>)
 80012c6:	2208      	movs	r2, #8
 80012c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_SPI2_Init+0x74>)
 80012cc:	f007 fe09 	bl	8008ee2 <HAL_SPI_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80012d6:	f001 f831 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200005cc 	.word	0x200005cc
 80012e4:	40003800 	.word	0x40003800

080012e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <MX_TIM1_Init+0xa0>)
 8001308:	4a20      	ldr	r2, [pc, #128]	; (800138c <MX_TIM1_Init+0xa4>)
 800130a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <MX_TIM1_Init+0xa0>)
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <MX_TIM1_Init+0xa0>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <MX_TIM1_Init+0xa0>)
 800131a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800131e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <MX_TIM1_Init+0xa0>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_TIM1_Init+0xa0>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_TIM1_Init+0xa0>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001332:	4815      	ldr	r0, [pc, #84]	; (8001388 <MX_TIM1_Init+0xa0>)
 8001334:	f007 fe80 	bl	8009038 <HAL_TIM_Base_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800133e:	f000 fffd 	bl	800233c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001346:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4619      	mov	r1, r3
 800134e:	480e      	ldr	r0, [pc, #56]	; (8001388 <MX_TIM1_Init+0xa0>)
 8001350:	f008 f862 	bl	8009418 <HAL_TIM_ConfigClockSource>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800135a:	f000 ffef 	bl	800233c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <MX_TIM1_Init+0xa0>)
 8001370:	f008 fa7e 	bl	8009870 <HAL_TIMEx_MasterConfigSynchronization>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800137a:	f000 ffdf 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3720      	adds	r7, #32
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000630 	.word	0x20000630
 800138c:	40010000 	.word	0x40010000

08001390 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <MX_TIM2_Init+0x98>)
 80013b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <MX_TIM2_Init+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <MX_TIM2_Init+0x98>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <MX_TIM2_Init+0x98>)
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MX_TIM2_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_TIM2_Init+0x98>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d6:	4814      	ldr	r0, [pc, #80]	; (8001428 <MX_TIM2_Init+0x98>)
 80013d8:	f007 fe2e 	bl	8009038 <HAL_TIM_Base_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013e2:	f000 ffab 	bl	800233c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	4619      	mov	r1, r3
 80013f2:	480d      	ldr	r0, [pc, #52]	; (8001428 <MX_TIM2_Init+0x98>)
 80013f4:	f008 f810 	bl	8009418 <HAL_TIM_ConfigClockSource>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013fe:	f000 ff9d 	bl	800233c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <MX_TIM2_Init+0x98>)
 8001410:	f008 fa2e 	bl	8009870 <HAL_TIMEx_MasterConfigSynchronization>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800141a:	f000 ff8f 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	3720      	adds	r7, #32
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	2000067c 	.word	0x2000067c

0800142c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <MX_TIM3_Init+0x94>)
 800144c:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <MX_TIM3_Init+0x98>)
 800144e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <MX_TIM3_Init+0x94>)
 8001452:	2200      	movs	r2, #0
 8001454:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_TIM3_Init+0x94>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <MX_TIM3_Init+0x94>)
 800145e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001462:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <MX_TIM3_Init+0x94>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <MX_TIM3_Init+0x94>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001470:	4813      	ldr	r0, [pc, #76]	; (80014c0 <MX_TIM3_Init+0x94>)
 8001472:	f007 fde1 	bl	8009038 <HAL_TIM_Base_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800147c:	f000 ff5e 	bl	800233c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001484:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	4619      	mov	r1, r3
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <MX_TIM3_Init+0x94>)
 800148e:	f007 ffc3 	bl	8009418 <HAL_TIM_ConfigClockSource>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001498:	f000 ff50 	bl	800233c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_TIM3_Init+0x94>)
 80014aa:	f008 f9e1 	bl	8009870 <HAL_TIMEx_MasterConfigSynchronization>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014b4:	f000 ff42 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200006c8 	.word	0x200006c8
 80014c4:	40000400 	.word	0x40000400

080014c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ce:	f107 0310 	add.w	r3, r7, #16
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014e6:	4b1d      	ldr	r3, [pc, #116]	; (800155c <MX_TIM5_Init+0x94>)
 80014e8:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <MX_TIM5_Init+0x98>)
 80014ea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <MX_TIM5_Init+0x94>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_TIM5_Init+0x94>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_TIM5_Init+0x94>)
 80014fa:	f04f 32ff 	mov.w	r2, #4294967295
 80014fe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <MX_TIM5_Init+0x94>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_TIM5_Init+0x94>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800150c:	4813      	ldr	r0, [pc, #76]	; (800155c <MX_TIM5_Init+0x94>)
 800150e:	f007 fd93 	bl	8009038 <HAL_TIM_Base_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001518:	f000 ff10 	bl	800233c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001520:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001522:	f107 0310 	add.w	r3, r7, #16
 8001526:	4619      	mov	r1, r3
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <MX_TIM5_Init+0x94>)
 800152a:	f007 ff75 	bl	8009418 <HAL_TIM_ConfigClockSource>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001534:	f000 ff02 	bl	800233c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	4619      	mov	r1, r3
 8001544:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_TIM5_Init+0x94>)
 8001546:	f008 f993 	bl	8009870 <HAL_TIMEx_MasterConfigSynchronization>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001550:	f000 fef4 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	3720      	adds	r7, #32
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000714 	.word	0x20000714
 8001560:	40000c00 	.word	0x40000c00

08001564 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156a:	f107 0310 	add.w	r3, r7, #16
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001582:	4b20      	ldr	r3, [pc, #128]	; (8001604 <MX_TIM8_Init+0xa0>)
 8001584:	4a20      	ldr	r2, [pc, #128]	; (8001608 <MX_TIM8_Init+0xa4>)
 8001586:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <MX_TIM8_Init+0xa0>)
 800158a:	2200      	movs	r2, #0
 800158c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <MX_TIM8_Init+0xa0>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_TIM8_Init+0xa0>)
 8001596:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800159a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <MX_TIM8_Init+0xa0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_TIM8_Init+0xa0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_TIM8_Init+0xa0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015ae:	4815      	ldr	r0, [pc, #84]	; (8001604 <MX_TIM8_Init+0xa0>)
 80015b0:	f007 fd42 	bl	8009038 <HAL_TIM_Base_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80015ba:	f000 febf 	bl	800233c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	4619      	mov	r1, r3
 80015ca:	480e      	ldr	r0, [pc, #56]	; (8001604 <MX_TIM8_Init+0xa0>)
 80015cc:	f007 ff24 	bl	8009418 <HAL_TIM_ConfigClockSource>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80015d6:	f000 feb1 	bl	800233c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	4619      	mov	r1, r3
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <MX_TIM8_Init+0xa0>)
 80015ec:	f008 f940 	bl	8009870 <HAL_TIMEx_MasterConfigSynchronization>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80015f6:	f000 fea1 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	3720      	adds	r7, #32
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000760 	.word	0x20000760
 8001608:	40010400 	.word	0x40010400

0800160c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_UART7_Init+0x58>)
 8001612:	4a15      	ldr	r2, [pc, #84]	; (8001668 <MX_UART7_Init+0x5c>)
 8001614:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <MX_UART7_Init+0x58>)
 8001618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800161c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_UART7_Init+0x58>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_UART7_Init+0x58>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_UART7_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_UART7_Init+0x58>)
 8001632:	220c      	movs	r2, #12
 8001634:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <MX_UART7_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_UART7_Init+0x58>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <MX_UART7_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_UART7_Init+0x58>)
 800164a:	2200      	movs	r2, #0
 800164c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_UART7_Init+0x58>)
 8001650:	f008 f9ba 	bl	80099c8 <HAL_UART_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800165a:	f000 fe6f 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200007ac 	.word	0x200007ac
 8001668:	40007800 	.word	0x40007800

0800166c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <MX_USART1_UART_Init+0x58>)
 8001672:	4a15      	ldr	r2, [pc, #84]	; (80016c8 <MX_USART1_UART_Init+0x5c>)
 8001674:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <MX_USART1_UART_Init+0x58>)
 8001678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800167c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_USART1_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <MX_USART1_UART_Init+0x58>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_USART1_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_USART1_UART_Init+0x58>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_USART1_UART_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_USART1_UART_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <MX_USART1_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_USART1_UART_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_USART1_UART_Init+0x58>)
 80016b0:	f008 f98a 	bl	80099c8 <HAL_UART_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016ba:	f000 fe3f 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000830 	.word	0x20000830
 80016c8:	40011000 	.word	0x40011000

080016cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <MX_USART6_UART_Init+0x58>)
 80016d2:	4a15      	ldr	r2, [pc, #84]	; (8001728 <MX_USART6_UART_Init+0x5c>)
 80016d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <MX_USART6_UART_Init+0x58>)
 80016d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_USART6_UART_Init+0x58>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <MX_USART6_UART_Init+0x58>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_USART6_UART_Init+0x58>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_USART6_UART_Init+0x58>)
 80016f2:	220c      	movs	r2, #12
 80016f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <MX_USART6_UART_Init+0x58>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_USART6_UART_Init+0x58>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <MX_USART6_UART_Init+0x58>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_USART6_UART_Init+0x58>)
 800170a:	2200      	movs	r2, #0
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_USART6_UART_Init+0x58>)
 8001710:	f008 f95a 	bl	80099c8 <HAL_UART_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800171a:	f000 fe0f 	bl	800233c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200008b4 	.word	0x200008b4
 8001728:	40011400 	.word	0x40011400

0800172c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
 8001740:	615a      	str	r2, [r3, #20]
 8001742:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <MX_FMC_Init+0x98>)
 8001746:	4a20      	ldr	r2, [pc, #128]	; (80017c8 <MX_FMC_Init+0x9c>)
 8001748:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800174a:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <MX_FMC_Init+0x98>)
 800174c:	2200      	movs	r2, #0
 800174e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <MX_FMC_Init+0x98>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <MX_FMC_Init+0x98>)
 8001758:	2204      	movs	r2, #4
 800175a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <MX_FMC_Init+0x98>)
 800175e:	2210      	movs	r2, #16
 8001760:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <MX_FMC_Init+0x98>)
 8001764:	2240      	movs	r2, #64	; 0x40
 8001766:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001768:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <MX_FMC_Init+0x98>)
 800176a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800176e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <MX_FMC_Init+0x98>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <MX_FMC_Init+0x98>)
 8001778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800177c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_FMC_Init+0x98>)
 8001780:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001784:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <MX_FMC_Init+0x98>)
 8001788:	2200      	movs	r2, #0
 800178a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800178c:	2302      	movs	r3, #2
 800178e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001790:	2307      	movs	r3, #7
 8001792:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001794:	2304      	movs	r3, #4
 8001796:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001798:	2307      	movs	r3, #7
 800179a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800179c:	2303      	movs	r3, #3
 800179e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80017a0:	2302      	movs	r3, #2
 80017a2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80017a4:	2302      	movs	r3, #2
 80017a6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_FMC_Init+0x98>)
 80017ae:	f007 fb07 	bl	8008dc0 <HAL_SDRAM_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80017b8:	f000 fdc0 	bl	800233c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80017bc:	bf00      	nop
 80017be:	3720      	adds	r7, #32
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000938 	.word	0x20000938
 80017c8:	a0000140 	.word	0xa0000140

080017cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b090      	sub	sp, #64	; 0x40
 80017d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017e2:	4bae      	ldr	r3, [pc, #696]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4aad      	ldr	r2, [pc, #692]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 80017e8:	f043 0310 	orr.w	r3, r3, #16
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4bab      	ldr	r3, [pc, #684]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017fa:	4ba8      	ldr	r3, [pc, #672]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4aa7      	ldr	r2, [pc, #668]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 8001800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4ba5      	ldr	r3, [pc, #660]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	4ba2      	ldr	r3, [pc, #648]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4aa1      	ldr	r2, [pc, #644]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b9f      	ldr	r3, [pc, #636]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	623b      	str	r3, [r7, #32]
 8001828:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800182a:	4b9c      	ldr	r3, [pc, #624]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a9b      	ldr	r2, [pc, #620]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 8001830:	f043 0308 	orr.w	r3, r3, #8
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b99      	ldr	r3, [pc, #612]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001842:	4b96      	ldr	r3, [pc, #600]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a95      	ldr	r2, [pc, #596]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b93      	ldr	r3, [pc, #588]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	4b90      	ldr	r3, [pc, #576]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a8f      	ldr	r2, [pc, #572]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b8d      	ldr	r3, [pc, #564]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001872:	4b8a      	ldr	r3, [pc, #552]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a89      	ldr	r2, [pc, #548]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 8001878:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b87      	ldr	r3, [pc, #540]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800188a:	4b84      	ldr	r3, [pc, #528]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a83      	ldr	r2, [pc, #524]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 8001890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b81      	ldr	r3, [pc, #516]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80018a2:	4b7e      	ldr	r3, [pc, #504]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a7d      	ldr	r2, [pc, #500]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 80018a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b7b      	ldr	r3, [pc, #492]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ba:	4b78      	ldr	r3, [pc, #480]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a77      	ldr	r2, [pc, #476]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 80018c0:	f043 0320 	orr.w	r3, r3, #32
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b75      	ldr	r3, [pc, #468]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0320 	and.w	r3, r3, #32
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018d2:	4b72      	ldr	r3, [pc, #456]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a71      	ldr	r2, [pc, #452]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 80018d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <MX_GPIO_Init+0x2d0>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2160      	movs	r1, #96	; 0x60
 80018ee:	486c      	ldr	r0, [pc, #432]	; (8001aa0 <MX_GPIO_Init+0x2d4>)
 80018f0:	f004 fb9e 	bl	8006030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80018f4:	2201      	movs	r2, #1
 80018f6:	2120      	movs	r1, #32
 80018f8:	486a      	ldr	r0, [pc, #424]	; (8001aa4 <MX_GPIO_Init+0x2d8>)
 80018fa:	f004 fb99 	bl	8006030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 80018fe:	2200      	movs	r2, #0
 8001900:	2108      	movs	r1, #8
 8001902:	4868      	ldr	r0, [pc, #416]	; (8001aa4 <MX_GPIO_Init+0x2d8>)
 8001904:	f004 fb94 	bl	8006030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001908:	2201      	movs	r2, #1
 800190a:	2108      	movs	r1, #8
 800190c:	4866      	ldr	r0, [pc, #408]	; (8001aa8 <MX_GPIO_Init+0x2dc>)
 800190e:	f004 fb8f 	bl	8006030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001918:	4864      	ldr	r0, [pc, #400]	; (8001aac <MX_GPIO_Init+0x2e0>)
 800191a:	f004 fb89 	bl	8006030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800191e:	2200      	movs	r2, #0
 8001920:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001924:	4862      	ldr	r0, [pc, #392]	; (8001ab0 <MX_GPIO_Init+0x2e4>)
 8001926:	f004 fb83 	bl	8006030 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	21c8      	movs	r1, #200	; 0xc8
 800192e:	4861      	ldr	r0, [pc, #388]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 8001930:	f004 fb7e 	bl	8006030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001934:	2308      	movs	r3, #8
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001938:	2300      	movs	r3, #0
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001944:	4619      	mov	r1, r3
 8001946:	4856      	ldr	r0, [pc, #344]	; (8001aa0 <MX_GPIO_Init+0x2d4>)
 8001948:	f004 f8a2 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800194c:	2304      	movs	r3, #4
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800195c:	2309      	movs	r3, #9
 800195e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001964:	4619      	mov	r1, r3
 8001966:	484e      	ldr	r0, [pc, #312]	; (8001aa0 <MX_GPIO_Init+0x2d4>)
 8001968:	f004 f892 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800196c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800197e:	230b      	movs	r3, #11
 8001980:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001986:	4619      	mov	r1, r3
 8001988:	484a      	ldr	r0, [pc, #296]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 800198a:	f004 f881 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 800198e:	f643 0323 	movw	r3, #14371	; 0x3823
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019a0:	230a      	movs	r3, #10
 80019a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a8:	4619      	mov	r1, r3
 80019aa:	4843      	ldr	r0, [pc, #268]	; (8001ab8 <MX_GPIO_Init+0x2ec>)
 80019ac:	f004 f870 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80019c0:	2308      	movs	r3, #8
 80019c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80019c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c8:	4619      	mov	r1, r3
 80019ca:	4836      	ldr	r0, [pc, #216]	; (8001aa4 <MX_GPIO_Init+0x2d8>)
 80019cc:	f004 f860 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80019d0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80019e2:	230c      	movs	r3, #12
 80019e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ea:	4619      	mov	r1, r3
 80019ec:	4833      	ldr	r0, [pc, #204]	; (8001abc <MX_GPIO_Init+0x2f0>)
 80019ee:	f004 f84f 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a06:	4619      	mov	r1, r3
 8001a08:	482d      	ldr	r0, [pc, #180]	; (8001ac0 <MX_GPIO_Init+0x2f4>)
 8001a0a:	f004 f841 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001a0e:	2360      	movs	r3, #96	; 0x60
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a22:	4619      	mov	r1, r3
 8001a24:	481e      	ldr	r0, [pc, #120]	; (8001aa0 <MX_GPIO_Init+0x2d4>)
 8001a26:	f004 f833 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001a2a:	2340      	movs	r3, #64	; 0x40
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a36:	2303      	movs	r3, #3
 8001a38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a3a:	230a      	movs	r3, #10
 8001a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a42:	4619      	mov	r1, r3
 8001a44:	481c      	ldr	r0, [pc, #112]	; (8001ab8 <MX_GPIO_Init+0x2ec>)
 8001a46:	f004 f823 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a50:	2300      	movs	r3, #0
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4819      	ldr	r0, [pc, #100]	; (8001ac4 <MX_GPIO_Init+0x2f8>)
 8001a60:	f004 f816 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a64:	2340      	movs	r3, #64	; 0x40
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a68:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a76:	4619      	mov	r1, r3
 8001a78:	480a      	ldr	r0, [pc, #40]	; (8001aa4 <MX_GPIO_Init+0x2d8>)
 8001a7a:	f004 f809 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8001a7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a90:	230a      	movs	r3, #10
 8001a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a98:	4619      	mov	r1, r3
 8001a9a:	e015      	b.n	8001ac8 <MX_GPIO_Init+0x2fc>
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40020c00 	.word	0x40020c00
 8001aa8:	40022800 	.word	0x40022800
 8001aac:	40022000 	.word	0x40022000
 8001ab0:	40021c00 	.word	0x40021c00
 8001ab4:	40021800 	.word	0x40021800
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	40020000 	.word	0x40020000
 8001ac4:	40022400 	.word	0x40022400
 8001ac8:	48a3      	ldr	r0, [pc, #652]	; (8001d58 <MX_GPIO_Init+0x58c>)
 8001aca:	f003 ffe1 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001ace:	23f0      	movs	r3, #240	; 0xf0
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001ade:	230a      	movs	r3, #10
 8001ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001ae2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	489c      	ldr	r0, [pc, #624]	; (8001d5c <MX_GPIO_Init+0x590>)
 8001aea:	f003 ffd1 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001b00:	230a      	movs	r3, #10
 8001b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4895      	ldr	r0, [pc, #596]	; (8001d60 <MX_GPIO_Init+0x594>)
 8001b0c:	f003 ffc0 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001b10:	2328      	movs	r3, #40	; 0x28
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b14:	2301      	movs	r3, #1
 8001b16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b24:	4619      	mov	r1, r3
 8001b26:	488f      	ldr	r0, [pc, #572]	; (8001d64 <MX_GPIO_Init+0x598>)
 8001b28:	f003 ffb2 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001b2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b32:	2300      	movs	r3, #0
 8001b34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001b3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4889      	ldr	r0, [pc, #548]	; (8001d68 <MX_GPIO_Init+0x59c>)
 8001b42:	f003 ffa5 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001b46:	2308      	movs	r3, #8
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4883      	ldr	r0, [pc, #524]	; (8001d6c <MX_GPIO_Init+0x5a0>)
 8001b5e:	f003 ff97 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8001b62:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b74:	4619      	mov	r1, r3
 8001b76:	487a      	ldr	r0, [pc, #488]	; (8001d60 <MX_GPIO_Init+0x594>)
 8001b78:	f003 ff8a 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b7c:	2310      	movs	r3, #16
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b80:	2300      	movs	r3, #0
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4875      	ldr	r0, [pc, #468]	; (8001d64 <MX_GPIO_Init+0x598>)
 8001b90:	f003 ff7e 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001b94:	2304      	movs	r3, #4
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ba4:	230c      	movs	r3, #12
 8001ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001ba8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bac:	4619      	mov	r1, r3
 8001bae:	486d      	ldr	r0, [pc, #436]	; (8001d64 <MX_GPIO_Init+0x598>)
 8001bb0:	f003 ff6e 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8001bb4:	f24a 0304 	movw	r3, #40964	; 0xa004
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4869      	ldr	r0, [pc, #420]	; (8001d70 <MX_GPIO_Init+0x5a4>)
 8001bca:	f003 ff61 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001be0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be4:	4619      	mov	r1, r3
 8001be6:	485d      	ldr	r0, [pc, #372]	; (8001d5c <MX_GPIO_Init+0x590>)
 8001be8:	f003 ff52 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001bec:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c02:	4619      	mov	r1, r3
 8001c04:	485a      	ldr	r0, [pc, #360]	; (8001d70 <MX_GPIO_Init+0x5a4>)
 8001c06:	f003 ff43 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP1_Pin PA6 */
  GPIO_InitStruct.Pin = BP1_Pin|GPIO_PIN_6;
 8001c0a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c10:	2300      	movs	r3, #0
 8001c12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	484e      	ldr	r0, [pc, #312]	; (8001d58 <MX_GPIO_Init+0x58c>)
 8001c20:	f003 ff36 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001c24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c2a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001c2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4848      	ldr	r0, [pc, #288]	; (8001d5c <MX_GPIO_Init+0x590>)
 8001c3c:	f003 ff28 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001c40:	2310      	movs	r3, #16
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c50:	230a      	movs	r3, #10
 8001c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4845      	ldr	r0, [pc, #276]	; (8001d70 <MX_GPIO_Init+0x5a4>)
 8001c5c:	f003 ff18 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001c60:	23c8      	movs	r3, #200	; 0xc8
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c64:	2301      	movs	r3, #1
 8001c66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c74:	4619      	mov	r1, r3
 8001c76:	483a      	ldr	r0, [pc, #232]	; (8001d60 <MX_GPIO_Init+0x594>)
 8001c78:	f003 ff0a 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001c7c:	2305      	movs	r3, #5
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c8c:	230a      	movs	r3, #10
 8001c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c94:	4619      	mov	r1, r3
 8001c96:	4834      	ldr	r0, [pc, #208]	; (8001d68 <MX_GPIO_Init+0x59c>)
 8001c98:	f003 fefa 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c9c:	2332      	movs	r3, #50	; 0x32
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cac:	230b      	movs	r3, #11
 8001cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	482c      	ldr	r0, [pc, #176]	; (8001d68 <MX_GPIO_Init+0x59c>)
 8001cb8:	f003 feea 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ccc:	2309      	movs	r3, #9
 8001cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4827      	ldr	r0, [pc, #156]	; (8001d74 <MX_GPIO_Init+0x5a8>)
 8001cd8:	f003 feda 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001cdc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cea:	2303      	movs	r3, #3
 8001cec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001cee:	2309      	movs	r3, #9
 8001cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	481a      	ldr	r0, [pc, #104]	; (8001d64 <MX_GPIO_Init+0x598>)
 8001cfa:	f003 fec9 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001cfe:	2386      	movs	r3, #134	; 0x86
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d0e:	230b      	movs	r3, #11
 8001d10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d16:	4619      	mov	r1, r3
 8001d18:	480f      	ldr	r0, [pc, #60]	; (8001d58 <MX_GPIO_Init+0x58c>)
 8001d1a:	f003 feb9 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001d1e:	2328      	movs	r3, #40	; 0x28
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d2e:	230a      	movs	r3, #10
 8001d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d36:	4619      	mov	r1, r3
 8001d38:	4807      	ldr	r0, [pc, #28]	; (8001d58 <MX_GPIO_Init+0x58c>)
 8001d3a:	f003 fea9 	bl	8005a90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2105      	movs	r1, #5
 8001d42:	2028      	movs	r0, #40	; 0x28
 8001d44:	f003 f840 	bl	8004dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d48:	2028      	movs	r0, #40	; 0x28
 8001d4a:	f003 f859 	bl	8004e00 <HAL_NVIC_EnableIRQ>

}
 8001d4e:	bf00      	nop
 8001d50:	3740      	adds	r7, #64	; 0x40
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	40022000 	.word	0x40022000
 8001d60:	40021800 	.word	0x40021800
 8001d64:	40020c00 	.word	0x40020c00
 8001d68:	40020800 	.word	0x40020800
 8001d6c:	40022800 	.word	0x40022800
 8001d70:	40021c00 	.word	0x40021c00
 8001d74:	40020400 	.word	0x40020400

08001d78 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// EXTI Line4 External Interrupt ISR Handler CallBackFun : accélérer vitesse diable
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_15) // If The INT Source Is EXTI Line4 (A15 Pin) BP2
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d88:	d102      	bne.n	8001d90 <HAL_GPIO_EXTI_Callback+0x18>
    {
    vitesse_diable=1;//flag
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <HAL_GPIO_EXTI_Callback+0x24>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]
    }
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	20000998 	.word	0x20000998

08001da0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001da8:	2001      	movs	r0, #1
 8001daa:	f008 fbc6 	bl	800a53a <osDelay>
 8001dae:	e7fb      	b.n	8001da8 <StartDefaultTask+0x8>

08001db0 <Task_diable>:
* @retval None
* Un diable se déplace sur l'écran et jet des missile périodiquement
*/
/* USER CODE END Header_Task_diable */
void Task_diable(void const * argument)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b094      	sub	sp, #80	; 0x50
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_diable */
	uint16_t x_diable = 5;
 8001db8:	2305      	movs	r3, #5
 8001dba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t y_diable = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t size_x_diable = 50;
 8001dc4:	2332      	movs	r3, #50	; 0x32
 8001dc6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	uint16_t dir = 1;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	TickType_t pxPreviousWakeTime;
	TickType_t xTimeIncrement=6;
 8001dd0:	2306      	movs	r3, #6
 8001dd2:	64bb      	str	r3, [r7, #72]	; 0x48
	// y_diable est fixe à 0
	uint16_t Message;
	char text[50]={};
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	f107 0310 	add.w	r3, r7, #16
 8001ddc:	222e      	movs	r2, #46	; 0x2e
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f00a ffe9 	bl	800cdb8 <memset>
	HAL_GPIO_WritePin(LED13_GPIO_Port, LED11_Pin,1);
 8001de6:	2201      	movs	r2, #1
 8001de8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dec:	4846      	ldr	r0, [pc, #280]	; (8001f08 <Task_diable+0x158>)
 8001dee:	f004 f91f 	bl	8006030 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	xSemaphoreTake(MUTEXHandle, portMAX_DELAY);// task take mutex
 8001df2:	4b46      	ldr	r3, [pc, #280]	; (8001f0c <Task_diable+0x15c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f009 f82c 	bl	800ae58 <xQueueSemaphoreTake>

	if((x_diable+size_x_diable==460)){
 8001e00:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001e04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001e08:	4413      	add	r3, r2
 8001e0a:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8001e0e:	d103      	bne.n	8001e18 <Task_diable+0x68>
		dir=0; // go to the left
 8001e10:	2300      	movs	r3, #0
 8001e12:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001e16:	e006      	b.n	8001e26 <Task_diable+0x76>
	}
	else if(x_diable==5){
 8001e18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e1c:	2b05      	cmp	r3, #5
 8001e1e:	d102      	bne.n	8001e26 <Task_diable+0x76>
		dir=1; // go to the right
 8001e20:	2301      	movs	r3, #1
 8001e22:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	}// end else if
	if(dir==0){
 8001e26:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d105      	bne.n	8001e3a <Task_diable+0x8a>
		x_diable--;
 8001e2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e32:	3b01      	subs	r3, #1
 8001e34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001e38:	e004      	b.n	8001e44 <Task_diable+0x94>
	}
	else{
		x_diable++;
 8001e3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e3e:	3301      	adds	r3, #1
 8001e40:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	}//end else
	 BSP_LCD_SelectLayer(1);
 8001e44:	2001      	movs	r0, #1
 8001e46:	f000 fd1b 	bl	8002880 <BSP_LCD_SelectLayer>
	 BSP_LCD_DrawBitmap(x_diable,y_diable,(uint8_t*)diableRGB565_bmp);
 8001e4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e4e:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8001e52:	4a2f      	ldr	r2, [pc, #188]	; (8001f10 <Task_diable+0x160>)
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 feeb 	bl	8002c30 <BSP_LCD_DrawBitmap>
	 // Envoie de position
	 Message = x_diable;
 8001e5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
	 xQueueSend(myQueueP2VHandle, &Message, 0);
 8001e60:	4b2c      	ldr	r3, [pc, #176]	; (8001f14 <Task_diable+0x164>)
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	f107 013e 	add.w	r1, r7, #62	; 0x3e
 8001e68:	2300      	movs	r3, #0
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f008 fe08 	bl	800aa80 <xQueueGenericSend>
	 xSemaphoreGive(MUTEXHandle);//task give mutex
 8001e70:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <Task_diable+0x15c>)
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	2300      	movs	r3, #0
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	f008 fe01 	bl	800aa80 <xQueueGenericSend>
	 if((vitesse_diable)&&(xTimeIncrement>4)){
 8001e7e:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <Task_diable+0x168>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d01a      	beq.n	8001ebc <Task_diable+0x10c>
 8001e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d917      	bls.n	8001ebc <Task_diable+0x10c>
		 xTimeIncrement=4;
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	64bb      	str	r3, [r7, #72]	; 0x48
		 vitesse_diable=0;
 8001e90:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <Task_diable+0x168>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
		 HAL_GPIO_WritePin(LED13_GPIO_Port, LED12_Pin,1);
 8001e96:	2201      	movs	r2, #1
 8001e98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e9c:	481a      	ldr	r0, [pc, #104]	; (8001f08 <Task_diable+0x158>)
 8001e9e:	f004 f8c7 	bl	8006030 <HAL_GPIO_WritePin>
		 sprintf(text,"DIFF");
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	491d      	ldr	r1, [pc, #116]	; (8001f1c <Task_diable+0x16c>)
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f00b f89b 	bl	800cfe4 <siprintf>
		 BSP_LCD_DisplayStringAt(0, 150,(uint8_t*) text, LEFT_MODE);
 8001eae:	f107 020c 	add.w	r2, r7, #12
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	2196      	movs	r1, #150	; 0x96
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f000 fdaa 	bl	8002a10 <BSP_LCD_DisplayStringAt>
	 }
	 if((vitesse_diable)&&(xTimeIncrement>2)){
 8001ebc:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <Task_diable+0x168>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01a      	beq.n	8001efa <Task_diable+0x14a>
 8001ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d917      	bls.n	8001efa <Task_diable+0x14a>
	 		 xTimeIncrement=2;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	64bb      	str	r3, [r7, #72]	; 0x48
	 		vitesse_diable=0;
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <Task_diable+0x168>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
	 		HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin,1);
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eda:	480b      	ldr	r0, [pc, #44]	; (8001f08 <Task_diable+0x158>)
 8001edc:	f004 f8a8 	bl	8006030 <HAL_GPIO_WritePin>
	 		 sprintf(text,"DIFF++");
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	490e      	ldr	r1, [pc, #56]	; (8001f20 <Task_diable+0x170>)
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f00b f87c 	bl	800cfe4 <siprintf>
	 		 BSP_LCD_DisplayStringAt(0, 150,(uint8_t*) text, LEFT_MODE);
 8001eec:	f107 020c 	add.w	r2, r7, #12
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	2196      	movs	r1, #150	; 0x96
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f000 fd8b 	bl	8002a10 <BSP_LCD_DisplayStringAt>
	 	 }
	 vTaskDelayUntil(&pxPreviousWakeTime,xTimeIncrement);
 8001efa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001efe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001f00:	4618      	mov	r0, r3
 8001f02:	f009 fc29 	bl	800b758 <vTaskDelayUntil>
	xSemaphoreTake(MUTEXHandle, portMAX_DELAY);// task take mutex
 8001f06:	e774      	b.n	8001df2 <Task_diable+0x42>
 8001f08:	40021c00 	.word	0x40021c00
 8001f0c:	20000994 	.word	0x20000994
 8001f10:	0800d88c 	.word	0x0800d88c
 8001f14:	20000980 	.word	0x20000980
 8001f18:	20000998 	.word	0x20000998
 8001f1c:	0800d844 	.word	0x0800d844
 8001f20:	0800d84c 	.word	0x0800d84c

08001f24 <Task_homme>:
* @retval None
* Le joueur peu se déplacer en bas de l'écran et jet des missile pour attaquer le diable
*/
/* USER CODE END Header_Task_homme */
void Task_homme(void const * argument)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	; 0x30
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_homme */
	uint16_t x_homme = 5;
 8001f2c:	2305      	movs	r3, #5
 8001f2e:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t y_homme = 220; // fixe en bas
 8001f30:	23dc      	movs	r3, #220	; 0xdc
 8001f32:	85fb      	strh	r3, [r7, #46]	; 0x2e
	TickType_t pxPreviousWakeTime;
	TickType_t xTimeIncrement=3;
 8001f34:	2303      	movs	r3, #3
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t joystick_h;//, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f46:	2301      	movs	r3, #1
 8001f48:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
	sConfig.Channel = ADC_CHANNEL_8;
 8001f4e:	2308      	movs	r3, #8
 8001f50:	60fb      	str	r3, [r7, #12]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001f52:	f107 030c 	add.w	r3, r7, #12
 8001f56:	4619      	mov	r1, r3
 8001f58:	483e      	ldr	r0, [pc, #248]	; (8002054 <Task_homme+0x130>)
 8001f5a:	f002 fc2d 	bl	80047b8 <HAL_ADC_ConfigChannel>

	uint16_t missile = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	817b      	strh	r3, [r7, #10]
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(MUTEXHandle, portMAX_DELAY);// Task homme prend mutex
 8001f62:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <Task_homme+0x134>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f008 ff74 	bl	800ae58 <xQueueSemaphoreTake>
  	  HAL_ADC_Start(&hadc1);
 8001f70:	483a      	ldr	r0, [pc, #232]	; (800205c <Task_homme+0x138>)
 8001f72:	f002 fabb 	bl	80044ec <HAL_ADC_Start>
  	  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8001f76:	bf00      	nop
 8001f78:	2164      	movs	r1, #100	; 0x64
 8001f7a:	4838      	ldr	r0, [pc, #224]	; (800205c <Task_homme+0x138>)
 8001f7c:	f002 fb84 	bl	8004688 <HAL_ADC_PollForConversion>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f8      	bne.n	8001f78 <Task_homme+0x54>
  	  joystick_h = HAL_ADC_GetValue(&hadc1);
 8001f86:	4835      	ldr	r0, [pc, #212]	; (800205c <Task_homme+0x138>)
 8001f88:	f002 fc09 	bl	800479e <HAL_ADC_GetValue>
 8001f8c:	6278      	str	r0, [r7, #36]	; 0x24

	  if((joystick_h>3000)&(x_homme>5)){
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f94:	4293      	cmp	r3, r2
 8001f96:	bf8c      	ite	hi
 8001f98:	2301      	movhi	r3, #1
 8001f9a:	2300      	movls	r3, #0
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	bf8c      	ite	hi
 8001fa4:	2301      	movhi	r3, #1
 8001fa6:	2300      	movls	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	4013      	ands	r3, r2
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d004      	beq.n	8001fbc <Task_homme+0x98>
		  x_homme--;
 8001fb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	847b      	strh	r3, [r7, #34]	; 0x22
 8001fba:	e016      	b.n	8001fea <Task_homme+0xc6>
	  }
	  else if((joystick_h<1000)&(x_homme<445)){
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	bf94      	ite	ls
 8001fc6:	2301      	movls	r3, #1
 8001fc8:	2300      	movhi	r3, #0
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001fce:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 8001fd2:	bf94      	ite	ls
 8001fd4:	2301      	movls	r3, #1
 8001fd6:	2300      	movhi	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	4013      	ands	r3, r2
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <Task_homme+0xc6>
		  x_homme++;
 8001fe2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	847b      	strh	r3, [r7, #34]	; 0x22
	  }// end else if
	  BSP_LCD_SelectLayer(1);
 8001fea:	2001      	movs	r0, #1
 8001fec:	f000 fc48 	bl	8002880 <BSP_LCD_SelectLayer>
	  BSP_LCD_DrawBitmap(x_homme,y_homme,(uint8_t*)batmanRGB565_bmp);
 8001ff0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ff6:	4a1a      	ldr	r2, [pc, #104]	; (8002060 <Task_homme+0x13c>)
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f000 fe19 	bl	8002c30 <BSP_LCD_DrawBitmap>
	  xQueueSend(myQueueHommePosHandle, &x_homme, 0);
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <Task_homme+0x140>)
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	f107 0122 	add.w	r1, r7, #34	; 0x22
 8002006:	2300      	movs	r3, #0
 8002008:	2200      	movs	r2, #0
 800200a:	f008 fd39 	bl	800aa80 <xQueueGenericSend>
	  if(HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin)==0){//tir
 800200e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002012:	4815      	ldr	r0, [pc, #84]	; (8002068 <Task_homme+0x144>)
 8002014:	f003 fff4 	bl	8006000 <HAL_GPIO_ReadPin>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <Task_homme+0xfe>
		  missile =1;
 800201e:	2301      	movs	r3, #1
 8002020:	817b      	strh	r3, [r7, #10]
	  }
	  xQueueSend(myQueueU2HHandle, &missile, 0);
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <Task_homme+0x148>)
 8002024:	6818      	ldr	r0, [r3, #0]
 8002026:	f107 010a 	add.w	r1, r7, #10
 800202a:	2300      	movs	r3, #0
 800202c:	2200      	movs	r2, #0
 800202e:	f008 fd27 	bl	800aa80 <xQueueGenericSend>
	  missile = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	817b      	strh	r3, [r7, #10]
	  xSemaphoreGive(MUTEXHandle); /* La tache homme rend le mutex */
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <Task_homme+0x134>)
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	2300      	movs	r3, #0
 800203c:	2200      	movs	r2, #0
 800203e:	2100      	movs	r1, #0
 8002040:	f008 fd1e 	bl	800aa80 <xQueueGenericSend>
	  vTaskDelayUntil(&pxPreviousWakeTime,xTimeIncrement);
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800204a:	4618      	mov	r0, r3
 800204c:	f009 fb84 	bl	800b758 <vTaskDelayUntil>
	  xSemaphoreTake(MUTEXHandle, portMAX_DELAY);// Task homme prend mutex
 8002050:	e787      	b.n	8001f62 <Task_homme+0x3e>
 8002052:	bf00      	nop
 8002054:	200003d0 	.word	0x200003d0
 8002058:	20000994 	.word	0x20000994
 800205c:	20000388 	.word	0x20000388
 8002060:	0800f0bc 	.word	0x0800f0bc
 8002064:	20000988 	.word	0x20000988
 8002068:	40020000 	.word	0x40020000
 800206c:	20000984 	.word	0x20000984

08002070 <Task_virus>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_virus */
void Task_virus(void const * argument)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b096      	sub	sp, #88	; 0x58
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_virus */
	uint16_t x_bompe = 5;
 8002078:	2305      	movs	r3, #5
 800207a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t y_bompe = 50;
 800207e:	2332      	movs	r3, #50	; 0x32
 8002080:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint16_t x_missile = 5;
 8002084:	2305      	movs	r3, #5
 8002086:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	uint16_t y_missile = 250;
 800208a:	23fa      	movs	r3, #250	; 0xfa
 800208c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	TickType_t pxPreviousWakeTime;
	TickType_t xTimeIncrement=2;
 8002090:	2302      	movs	r3, #2
 8002092:	653b      	str	r3, [r7, #80]	; 0x50
	uint16_t missile;
	uint16_t x_homme;
	uint16_t y_homme=220;
 8002094:	23dc      	movs	r3, #220	; 0xdc
 8002096:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	char text[50]={};
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	f107 0310 	add.w	r3, r7, #16
 80020a2:	222e      	movs	r2, #46	; 0x2e
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f00a fe86 	bl	800cdb8 <memset>
	uint16_t Game_Over =0;// si je perd c'est 1
 80020ac:	2300      	movs	r3, #0
 80020ae:	817b      	strh	r3, [r7, #10]
	uint16_t I_WIN =0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	813b      	strh	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {

	    xQueueReceive(myQueueP2VHandle, &x_bompe, 10);
 80020b4:	4b6f      	ldr	r3, [pc, #444]	; (8002274 <Task_virus+0x204>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80020bc:	220a      	movs	r2, #10
 80020be:	4618      	mov	r0, r3
 80020c0:	f008 fde4 	bl	800ac8c <xQueueReceive>
	    xQueueReceive(myQueueU2HHandle, &missile, 10);
 80020c4:	4b6c      	ldr	r3, [pc, #432]	; (8002278 <Task_virus+0x208>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f107 0142 	add.w	r1, r7, #66	; 0x42
 80020cc:	220a      	movs	r2, #10
 80020ce:	4618      	mov	r0, r3
 80020d0:	f008 fddc 	bl	800ac8c <xQueueReceive>
	    xQueueReceive(myQueueHommePosHandle, &x_homme, 10);
 80020d4:	4b69      	ldr	r3, [pc, #420]	; (800227c <Task_virus+0x20c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80020dc:	220a      	movs	r2, #10
 80020de:	4618      	mov	r0, r3
 80020e0:	f008 fdd4 	bl	800ac8c <xQueueReceive>
	    if(((x_homme<=x_bompe)&&(x_bompe<=x_homme+30))&&(y_homme<=y_bompe-20)){// si je perd
 80020e4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80020e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d838      	bhi.n	8002162 <Task_virus+0xf2>
 80020f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80020f4:	461a      	mov	r2, r3
 80020f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020fa:	331e      	adds	r3, #30
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dc30      	bgt.n	8002162 <Task_virus+0xf2>
 8002100:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002104:	f1a3 0213 	sub.w	r2, r3, #19
 8002108:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800210c:	429a      	cmp	r2, r3
 800210e:	dd28      	ble.n	8002162 <Task_virus+0xf2>
	    	Game_Over = 1;
 8002110:	2301      	movs	r3, #1
 8002112:	817b      	strh	r3, [r7, #10]
	    	xQueueSend(myQueue_Game_OverHandle, &Game_Over, 0);
 8002114:	4b5a      	ldr	r3, [pc, #360]	; (8002280 <Task_virus+0x210>)
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	f107 010a 	add.w	r1, r7, #10
 800211c:	2300      	movs	r3, #0
 800211e:	2200      	movs	r2, #0
 8002120:	f008 fcae 	bl	800aa80 <xQueueGenericSend>
	    	Game_Over =0;
 8002124:	2300      	movs	r3, #0
 8002126:	817b      	strh	r3, [r7, #10]
	    	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002128:	4856      	ldr	r0, [pc, #344]	; (8002284 <Task_virus+0x214>)
 800212a:	f000 fbb9 	bl	80028a0 <BSP_LCD_SetTextColor>
	    	sprintf(text,"YOU LOSS ):");
 800212e:	f107 030c 	add.w	r3, r7, #12
 8002132:	4955      	ldr	r1, [pc, #340]	; (8002288 <Task_virus+0x218>)
 8002134:	4618      	mov	r0, r3
 8002136:	f00a ff55 	bl	800cfe4 <siprintf>
	    	BSP_LCD_DisplayStringAt(0, 136,(uint8_t*) text, CENTER_MODE);
 800213a:	f107 020c 	add.w	r2, r7, #12
 800213e:	2301      	movs	r3, #1
 8002140:	2188      	movs	r1, #136	; 0x88
 8002142:	2000      	movs	r0, #0
 8002144:	f000 fc64 	bl	8002a10 <BSP_LCD_DisplayStringAt>
	    	sprintf(text,"Press RESET to restart");
 8002148:	f107 030c 	add.w	r3, r7, #12
 800214c:	494f      	ldr	r1, [pc, #316]	; (800228c <Task_virus+0x21c>)
 800214e:	4618      	mov	r0, r3
 8002150:	f00a ff48 	bl	800cfe4 <siprintf>
	    	BSP_LCD_DisplayStringAt(0, 150,(uint8_t*) text, CENTER_MODE);
 8002154:	f107 020c 	add.w	r2, r7, #12
 8002158:	2301      	movs	r3, #1
 800215a:	2196      	movs	r1, #150	; 0x96
 800215c:	2000      	movs	r0, #0
 800215e:	f000 fc57 	bl	8002a10 <BSP_LCD_DisplayStringAt>
	    }
	    if(((x_bompe<=x_missile)&&(x_missile<=x_bompe+20))&&(y_missile<=15)){// si je gagne
 8002162:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002166:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800216a:	429a      	cmp	r2, r3
 800216c:	d835      	bhi.n	80021da <Task_virus+0x16a>
 800216e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002172:	461a      	mov	r2, r3
 8002174:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002178:	3314      	adds	r3, #20
 800217a:	429a      	cmp	r2, r3
 800217c:	dc2d      	bgt.n	80021da <Task_virus+0x16a>
 800217e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002182:	2b0f      	cmp	r3, #15
 8002184:	d829      	bhi.n	80021da <Task_virus+0x16a>
	    	I_WIN=1;
 8002186:	2301      	movs	r3, #1
 8002188:	813b      	strh	r3, [r7, #8]
	    	xQueueSend(myQueue_I_WINHandle, &I_WIN, 0);
 800218a:	4b41      	ldr	r3, [pc, #260]	; (8002290 <Task_virus+0x220>)
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	f107 0108 	add.w	r1, r7, #8
 8002192:	2300      	movs	r3, #0
 8002194:	2200      	movs	r2, #0
 8002196:	f008 fc73 	bl	800aa80 <xQueueGenericSend>
	    	if(I_WIN){
 800219a:	893b      	ldrh	r3, [r7, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01c      	beq.n	80021da <Task_virus+0x16a>
	    		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80021a0:	483c      	ldr	r0, [pc, #240]	; (8002294 <Task_virus+0x224>)
 80021a2:	f000 fb7d 	bl	80028a0 <BSP_LCD_SetTextColor>
	    		sprintf(text,"YOU WIN :)");
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	493b      	ldr	r1, [pc, #236]	; (8002298 <Task_virus+0x228>)
 80021ac:	4618      	mov	r0, r3
 80021ae:	f00a ff19 	bl	800cfe4 <siprintf>
	    		BSP_LCD_DisplayStringAt(0, 136,(uint8_t*) text, CENTER_MODE);
 80021b2:	f107 020c 	add.w	r2, r7, #12
 80021b6:	2301      	movs	r3, #1
 80021b8:	2188      	movs	r1, #136	; 0x88
 80021ba:	2000      	movs	r0, #0
 80021bc:	f000 fc28 	bl	8002a10 <BSP_LCD_DisplayStringAt>
	    		sprintf(text,"Press RESET to restart");
 80021c0:	f107 030c 	add.w	r3, r7, #12
 80021c4:	4931      	ldr	r1, [pc, #196]	; (800228c <Task_virus+0x21c>)
 80021c6:	4618      	mov	r0, r3
 80021c8:	f00a ff0c 	bl	800cfe4 <siprintf>
	    		BSP_LCD_DisplayStringAt(0, 150,(uint8_t*) text, CENTER_MODE);
 80021cc:	f107 020c 	add.w	r2, r7, #12
 80021d0:	2301      	movs	r3, #1
 80021d2:	2196      	movs	r1, #150	; 0x96
 80021d4:	2000      	movs	r0, #0
 80021d6:	f000 fc1b 	bl	8002a10 <BSP_LCD_DisplayStringAt>
	    	}
	    }

	  	if(y_bompe<255){
 80021da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80021de:	2bfe      	cmp	r3, #254	; 0xfe
 80021e0:	d805      	bhi.n	80021ee <Task_virus+0x17e>
	  		y_bompe++;
 80021e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80021e6:	3301      	adds	r3, #1
 80021e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80021ec:	e006      	b.n	80021fc <Task_virus+0x18c>
	  	}
	  	else if(y_bompe==255){
 80021ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80021f2:	2bff      	cmp	r3, #255	; 0xff
 80021f4:	d102      	bne.n	80021fc <Task_virus+0x18c>
	  		y_bompe=50;
 80021f6:	2332      	movs	r3, #50	; 0x32
 80021f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	  	}
	  	 // defance
	  	xQueueReceive(myQueueU2HHandle, &missile, 10);
 80021fc:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <Task_virus+0x208>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f107 0142 	add.w	r1, r7, #66	; 0x42
 8002204:	220a      	movs	r2, #10
 8002206:	4618      	mov	r0, r3
 8002208:	f008 fd40 	bl	800ac8c <xQueueReceive>
	  	 if(missile){
 800220c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00c      	beq.n	800222e <Task_virus+0x1be>
	  		y_missile--;
 8002214:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002218:	3b01      	subs	r3, #1
 800221a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	  		xQueueReceive(myQueueHommePosHandle, &x_missile, 10);
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <Task_virus+0x20c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f107 014a 	add.w	r1, r7, #74	; 0x4a
 8002226:	220a      	movs	r2, #10
 8002228:	4618      	mov	r0, r3
 800222a:	f008 fd2f 	bl	800ac8c <xQueueReceive>
	  	 }// end if
	  	 if(y_missile<10){
 800222e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002232:	2b09      	cmp	r3, #9
 8002234:	d802      	bhi.n	800223c <Task_virus+0x1cc>
	  		y_missile=250;
 8002236:	23fa      	movs	r3, #250	; 0xfa
 8002238:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	  	 }
	  	 BSP_LCD_SelectLayer(1);
 800223c:	2001      	movs	r0, #1
 800223e:	f000 fb1f 	bl	8002880 <BSP_LCD_SelectLayer>
	  	 BSP_LCD_DrawBitmap(x_bompe,y_bompe,(uint8_t*)missile_diableRGB565_bmp);
 8002242:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002246:	4618      	mov	r0, r3
 8002248:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800224c:	4a13      	ldr	r2, [pc, #76]	; (800229c <Task_virus+0x22c>)
 800224e:	4619      	mov	r1, r3
 8002250:	f000 fcee 	bl	8002c30 <BSP_LCD_DrawBitmap>
	  	 BSP_LCD_DrawBitmap(x_missile,y_missile,(uint8_t*)missileRGB565_bmp);
 8002254:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002258:	4618      	mov	r0, r3
 800225a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800225e:	4a10      	ldr	r2, [pc, #64]	; (80022a0 <Task_virus+0x230>)
 8002260:	4619      	mov	r1, r3
 8002262:	f000 fce5 	bl	8002c30 <BSP_LCD_DrawBitmap>
	  	 vTaskDelayUntil(&pxPreviousWakeTime,xTimeIncrement);
 8002266:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800226a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800226c:	4618      	mov	r0, r3
 800226e:	f009 fa73 	bl	800b758 <vTaskDelayUntil>
	    xQueueReceive(myQueueP2VHandle, &x_bompe, 10);
 8002272:	e71f      	b.n	80020b4 <Task_virus+0x44>
 8002274:	20000980 	.word	0x20000980
 8002278:	20000984 	.word	0x20000984
 800227c:	20000988 	.word	0x20000988
 8002280:	2000098c 	.word	0x2000098c
 8002284:	ffff0000 	.word	0xffff0000
 8002288:	0800d854 	.word	0x0800d854
 800228c:	0800d860 	.word	0x0800d860
 8002290:	20000990 	.word	0x20000990
 8002294:	ff0000ff 	.word	0xff0000ff
 8002298:	0800d878 	.word	0x0800d878
 800229c:	0800ffdc 	.word	0x0800ffdc
 80022a0:	0801027c 	.word	0x0801027c

080022a4 <Task_Game_Over>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Game_Over */
void Task_Game_Over(void const * argument)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Game_Over */
	TickType_t pxPreviousWakeTime;
	TickType_t xTimeIncrement=2;
 80022ac:	2302      	movs	r3, #2
 80022ae:	617b      	str	r3, [r7, #20]
	uint16_t Game_Over=0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	81fb      	strh	r3, [r7, #14]
	uint16_t YOU_WIN = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	81bb      	strh	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(myQueue_Game_OverHandle, &Game_Over, 10);
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <Task_Game_Over+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f107 010e 	add.w	r1, r7, #14
 80022c0:	220a      	movs	r2, #10
 80022c2:	4618      	mov	r0, r3
 80022c4:	f008 fce2 	bl	800ac8c <xQueueReceive>
	  xQueueReceive(myQueue_I_WINHandle, &YOU_WIN, 10);
 80022c8:	4b10      	ldr	r3, [pc, #64]	; (800230c <Task_Game_Over+0x68>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f107 010c 	add.w	r1, r7, #12
 80022d0:	220a      	movs	r2, #10
 80022d2:	4618      	mov	r0, r3
 80022d4:	f008 fcda 	bl	800ac8c <xQueueReceive>
	  if(Game_Over){
 80022d8:	89fb      	ldrh	r3, [r7, #14]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d004      	beq.n	80022e8 <Task_Game_Over+0x44>
		  vTaskDelete(myTask03Handle);// delete Task homme
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <Task_Game_Over+0x6c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f009 f9a6 	bl	800b634 <vTaskDelete>
	  }
	  if(YOU_WIN){
 80022e8:	89bb      	ldrh	r3, [r7, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d004      	beq.n	80022f8 <Task_Game_Over+0x54>
		  vTaskDelete(Task_1Handle);// delete Task Diable
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <Task_Game_Over+0x70>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f009 f99e 	bl	800b634 <vTaskDelete>
	  }
	  vTaskDelayUntil(&pxPreviousWakeTime,xTimeIncrement);
 80022f8:	f107 0310 	add.w	r3, r7, #16
 80022fc:	6979      	ldr	r1, [r7, #20]
 80022fe:	4618      	mov	r0, r3
 8002300:	f009 fa2a 	bl	800b758 <vTaskDelayUntil>
	  xQueueReceive(myQueue_Game_OverHandle, &Game_Over, 10);
 8002304:	e7d8      	b.n	80022b8 <Task_Game_Over+0x14>
 8002306:	bf00      	nop
 8002308:	2000098c 	.word	0x2000098c
 800230c:	20000990 	.word	0x20000990
 8002310:	20000974 	.word	0x20000974
 8002314:	20000970 	.word	0x20000970

08002318 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a04      	ldr	r2, [pc, #16]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d101      	bne.n	800232e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800232a:	f002 f857 	bl	80043dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40001000 	.word	0x40001000

0800233c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002340:	b672      	cpsid	i
}
 8002342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002344:	e7fe      	b.n	8002344 <Error_Handler+0x8>
	...

08002348 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08c      	sub	sp, #48	; 0x30
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a51      	ldr	r2, [pc, #324]	; (8002498 <I2Cx_MspInit+0x150>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d14d      	bne.n	80023f4 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002358:	4b50      	ldr	r3, [pc, #320]	; (800249c <I2Cx_MspInit+0x154>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	4a4f      	ldr	r2, [pc, #316]	; (800249c <I2Cx_MspInit+0x154>)
 800235e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002362:	6313      	str	r3, [r2, #48]	; 0x30
 8002364:	4b4d      	ldr	r3, [pc, #308]	; (800249c <I2Cx_MspInit+0x154>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236c:	61bb      	str	r3, [r7, #24]
 800236e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002374:	2312      	movs	r3, #18
 8002376:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800237c:	2302      	movs	r3, #2
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002380:	2304      	movs	r3, #4
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002384:	f107 031c 	add.w	r3, r7, #28
 8002388:	4619      	mov	r1, r3
 800238a:	4845      	ldr	r0, [pc, #276]	; (80024a0 <I2Cx_MspInit+0x158>)
 800238c:	f003 fb80 	bl	8005a90 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002394:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	4619      	mov	r1, r3
 800239c:	4840      	ldr	r0, [pc, #256]	; (80024a0 <I2Cx_MspInit+0x158>)
 800239e:	f003 fb77 	bl	8005a90 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80023a2:	4b3e      	ldr	r3, [pc, #248]	; (800249c <I2Cx_MspInit+0x154>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	4a3d      	ldr	r2, [pc, #244]	; (800249c <I2Cx_MspInit+0x154>)
 80023a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023ac:	6413      	str	r3, [r2, #64]	; 0x40
 80023ae:	4b3b      	ldr	r3, [pc, #236]	; (800249c <I2Cx_MspInit+0x154>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80023ba:	4b38      	ldr	r3, [pc, #224]	; (800249c <I2Cx_MspInit+0x154>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a37      	ldr	r2, [pc, #220]	; (800249c <I2Cx_MspInit+0x154>)
 80023c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023c4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80023c6:	4b35      	ldr	r3, [pc, #212]	; (800249c <I2Cx_MspInit+0x154>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a34      	ldr	r2, [pc, #208]	; (800249c <I2Cx_MspInit+0x154>)
 80023cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023d0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	210f      	movs	r1, #15
 80023d6:	2048      	movs	r0, #72	; 0x48
 80023d8:	f002 fcf6 	bl	8004dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80023dc:	2048      	movs	r0, #72	; 0x48
 80023de:	f002 fd0f 	bl	8004e00 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	210f      	movs	r1, #15
 80023e6:	2049      	movs	r0, #73	; 0x49
 80023e8:	f002 fcee 	bl	8004dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80023ec:	2049      	movs	r0, #73	; 0x49
 80023ee:	f002 fd07 	bl	8004e00 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80023f2:	e04d      	b.n	8002490 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80023f4:	4b29      	ldr	r3, [pc, #164]	; (800249c <I2Cx_MspInit+0x154>)
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	4a28      	ldr	r2, [pc, #160]	; (800249c <I2Cx_MspInit+0x154>)
 80023fa:	f043 0302 	orr.w	r3, r3, #2
 80023fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002400:	4b26      	ldr	r3, [pc, #152]	; (800249c <I2Cx_MspInit+0x154>)
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800240c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002410:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002412:	2312      	movs	r3, #18
 8002414:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800241a:	2302      	movs	r3, #2
 800241c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800241e:	2304      	movs	r3, #4
 8002420:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002422:	f107 031c 	add.w	r3, r7, #28
 8002426:	4619      	mov	r1, r3
 8002428:	481e      	ldr	r0, [pc, #120]	; (80024a4 <I2Cx_MspInit+0x15c>)
 800242a:	f003 fb31 	bl	8005a90 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800242e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002432:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	4619      	mov	r1, r3
 800243a:	481a      	ldr	r0, [pc, #104]	; (80024a4 <I2Cx_MspInit+0x15c>)
 800243c:	f003 fb28 	bl	8005a90 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002440:	4b16      	ldr	r3, [pc, #88]	; (800249c <I2Cx_MspInit+0x154>)
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	4a15      	ldr	r2, [pc, #84]	; (800249c <I2Cx_MspInit+0x154>)
 8002446:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800244a:	6413      	str	r3, [r2, #64]	; 0x40
 800244c:	4b13      	ldr	r3, [pc, #76]	; (800249c <I2Cx_MspInit+0x154>)
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <I2Cx_MspInit+0x154>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4a0f      	ldr	r2, [pc, #60]	; (800249c <I2Cx_MspInit+0x154>)
 800245e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002462:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002464:	4b0d      	ldr	r3, [pc, #52]	; (800249c <I2Cx_MspInit+0x154>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4a0c      	ldr	r2, [pc, #48]	; (800249c <I2Cx_MspInit+0x154>)
 800246a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800246e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002470:	2200      	movs	r2, #0
 8002472:	210f      	movs	r1, #15
 8002474:	201f      	movs	r0, #31
 8002476:	f002 fca7 	bl	8004dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800247a:	201f      	movs	r0, #31
 800247c:	f002 fcc0 	bl	8004e00 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002480:	2200      	movs	r2, #0
 8002482:	210f      	movs	r1, #15
 8002484:	2020      	movs	r0, #32
 8002486:	f002 fc9f 	bl	8004dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800248a:	2020      	movs	r0, #32
 800248c:	f002 fcb8 	bl	8004e00 <HAL_NVIC_EnableIRQ>
}
 8002490:	bf00      	nop
 8002492:	3730      	adds	r7, #48	; 0x30
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	2000099c 	.word	0x2000099c
 800249c:	40023800 	.word	0x40023800
 80024a0:	40021c00 	.word	0x40021c00
 80024a4:	40020400 	.word	0x40020400

080024a8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f004 f8dd 	bl	8006670 <HAL_I2C_GetState>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d125      	bne.n	8002508 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a14      	ldr	r2, [pc, #80]	; (8002510 <I2Cx_Init+0x68>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d103      	bne.n	80024cc <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a13      	ldr	r2, [pc, #76]	; (8002514 <I2Cx_Init+0x6c>)
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	e002      	b.n	80024d2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a12      	ldr	r2, [pc, #72]	; (8002518 <I2Cx_Init+0x70>)
 80024d0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a11      	ldr	r2, [pc, #68]	; (800251c <I2Cx_Init+0x74>)
 80024d6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ff23 	bl	8002348 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f003 fdc6 	bl	8006094 <HAL_I2C_Init>
  }
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	2000099c 	.word	0x2000099c
 8002514:	40005c00 	.word	0x40005c00
 8002518:	40005400 	.word	0x40005400
 800251c:	40912732 	.word	0x40912732

08002520 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af04      	add	r7, sp, #16
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	4608      	mov	r0, r1
 800252a:	4611      	mov	r1, r2
 800252c:	461a      	mov	r2, r3
 800252e:	4603      	mov	r3, r0
 8002530:	72fb      	strb	r3, [r7, #11]
 8002532:	460b      	mov	r3, r1
 8002534:	813b      	strh	r3, [r7, #8]
 8002536:	4613      	mov	r3, r2
 8002538:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800253e:	7afb      	ldrb	r3, [r7, #11]
 8002540:	b299      	uxth	r1, r3
 8002542:	88f8      	ldrh	r0, [r7, #6]
 8002544:	893a      	ldrh	r2, [r7, #8]
 8002546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254a:	9302      	str	r3, [sp, #8]
 800254c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800254e:	9301      	str	r3, [sp, #4]
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	4603      	mov	r3, r0
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f003 ff70 	bl	800643c <HAL_I2C_Mem_Read>
 800255c:	4603      	mov	r3, r0
 800255e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002560:	7dfb      	ldrb	r3, [r7, #23]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002566:	7afb      	ldrb	r3, [r7, #11]
 8002568:	4619      	mov	r1, r3
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 f832 	bl	80025d4 <I2Cx_Error>
  }
  return status;    
 8002570:	7dfb      	ldrb	r3, [r7, #23]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b08a      	sub	sp, #40	; 0x28
 800257e:	af04      	add	r7, sp, #16
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	4608      	mov	r0, r1
 8002584:	4611      	mov	r1, r2
 8002586:	461a      	mov	r2, r3
 8002588:	4603      	mov	r3, r0
 800258a:	72fb      	strb	r3, [r7, #11]
 800258c:	460b      	mov	r3, r1
 800258e:	813b      	strh	r3, [r7, #8]
 8002590:	4613      	mov	r3, r2
 8002592:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002598:	7afb      	ldrb	r3, [r7, #11]
 800259a:	b299      	uxth	r1, r3
 800259c:	88f8      	ldrh	r0, [r7, #6]
 800259e:	893a      	ldrh	r2, [r7, #8]
 80025a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a4:	9302      	str	r3, [sp, #8]
 80025a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	4603      	mov	r3, r0
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f003 fe2f 	bl	8006214 <HAL_I2C_Mem_Write>
 80025b6:	4603      	mov	r3, r0
 80025b8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d004      	beq.n	80025ca <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80025c0:	7afb      	ldrb	r3, [r7, #11]
 80025c2:	4619      	mov	r1, r3
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f805 	bl	80025d4 <I2Cx_Error>
  }
  return status;
 80025ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f003 fde7 	bl	80061b4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ff5e 	bl	80024a8 <I2Cx_Init>
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <TS_IO_Init+0x10>)
 80025fa:	f7ff ff55 	bl	80024a8 <I2Cx_Init>
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2000099c 	.word	0x2000099c

08002608 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af02      	add	r7, sp, #8
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
 8002612:	460b      	mov	r3, r1
 8002614:	71bb      	strb	r3, [r7, #6]
 8002616:	4613      	mov	r3, r2
 8002618:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800261a:	79bb      	ldrb	r3, [r7, #6]
 800261c:	b29a      	uxth	r2, r3
 800261e:	79f9      	ldrb	r1, [r7, #7]
 8002620:	2301      	movs	r3, #1
 8002622:	9301      	str	r3, [sp, #4]
 8002624:	1d7b      	adds	r3, r7, #5
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2301      	movs	r3, #1
 800262a:	4803      	ldr	r0, [pc, #12]	; (8002638 <TS_IO_Write+0x30>)
 800262c:	f7ff ffa5 	bl	800257a <I2Cx_WriteMultiple>
}
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	2000099c 	.word	0x2000099c

0800263c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af02      	add	r7, sp, #8
 8002642:	4603      	mov	r3, r0
 8002644:	460a      	mov	r2, r1
 8002646:	71fb      	strb	r3, [r7, #7]
 8002648:	4613      	mov	r3, r2
 800264a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002650:	79bb      	ldrb	r3, [r7, #6]
 8002652:	b29a      	uxth	r2, r3
 8002654:	79f9      	ldrb	r1, [r7, #7]
 8002656:	2301      	movs	r3, #1
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	f107 030f 	add.w	r3, r7, #15
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	2301      	movs	r3, #1
 8002662:	4804      	ldr	r0, [pc, #16]	; (8002674 <TS_IO_Read+0x38>)
 8002664:	f7ff ff5c 	bl	8002520 <I2Cx_ReadMultiple>

  return read_value;
 8002668:	7bfb      	ldrb	r3, [r7, #15]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2000099c 	.word	0x2000099c

08002678 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f001 fecb 	bl	800441c <HAL_Delay>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002694:	4b31      	ldr	r3, [pc, #196]	; (800275c <BSP_LCD_Init+0xcc>)
 8002696:	2228      	movs	r2, #40	; 0x28
 8002698:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800269a:	4b30      	ldr	r3, [pc, #192]	; (800275c <BSP_LCD_Init+0xcc>)
 800269c:	2209      	movs	r2, #9
 800269e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80026a0:	4b2e      	ldr	r3, [pc, #184]	; (800275c <BSP_LCD_Init+0xcc>)
 80026a2:	2235      	movs	r2, #53	; 0x35
 80026a4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80026a6:	4b2d      	ldr	r3, [pc, #180]	; (800275c <BSP_LCD_Init+0xcc>)
 80026a8:	220b      	movs	r2, #11
 80026aa:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80026ac:	4b2b      	ldr	r3, [pc, #172]	; (800275c <BSP_LCD_Init+0xcc>)
 80026ae:	f240 121b 	movw	r2, #283	; 0x11b
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80026b4:	4b29      	ldr	r3, [pc, #164]	; (800275c <BSP_LCD_Init+0xcc>)
 80026b6:	f240 2215 	movw	r2, #533	; 0x215
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80026bc:	4b27      	ldr	r3, [pc, #156]	; (800275c <BSP_LCD_Init+0xcc>)
 80026be:	f240 121d 	movw	r2, #285	; 0x11d
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80026c4:	4b25      	ldr	r3, [pc, #148]	; (800275c <BSP_LCD_Init+0xcc>)
 80026c6:	f240 2235 	movw	r2, #565	; 0x235
 80026ca:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80026cc:	2100      	movs	r1, #0
 80026ce:	4823      	ldr	r0, [pc, #140]	; (800275c <BSP_LCD_Init+0xcc>)
 80026d0:	f000 fc58 	bl	8002f84 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80026d4:	4b21      	ldr	r3, [pc, #132]	; (800275c <BSP_LCD_Init+0xcc>)
 80026d6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80026da:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80026dc:	4b1f      	ldr	r3, [pc, #124]	; (800275c <BSP_LCD_Init+0xcc>)
 80026de:	f44f 7288 	mov.w	r2, #272	; 0x110
 80026e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80026e4:	4b1d      	ldr	r3, [pc, #116]	; (800275c <BSP_LCD_Init+0xcc>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <BSP_LCD_Init+0xcc>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <BSP_LCD_Init+0xcc>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80026fc:	4b17      	ldr	r3, [pc, #92]	; (800275c <BSP_LCD_Init+0xcc>)
 80026fe:	2200      	movs	r2, #0
 8002700:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002702:	4b16      	ldr	r3, [pc, #88]	; (800275c <BSP_LCD_Init+0xcc>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <BSP_LCD_Init+0xcc>)
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800270e:	4b13      	ldr	r3, [pc, #76]	; (800275c <BSP_LCD_Init+0xcc>)
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <BSP_LCD_Init+0xcc>)
 8002716:	4a12      	ldr	r2, [pc, #72]	; (8002760 <BSP_LCD_Init+0xd0>)
 8002718:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800271a:	4810      	ldr	r0, [pc, #64]	; (800275c <BSP_LCD_Init+0xcc>)
 800271c:	f004 fcc4 	bl	80070a8 <HAL_LTDC_GetState>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d103      	bne.n	800272e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002726:	2100      	movs	r1, #0
 8002728:	480c      	ldr	r0, [pc, #48]	; (800275c <BSP_LCD_Init+0xcc>)
 800272a:	f000 fb51 	bl	8002dd0 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800272e:	480b      	ldr	r0, [pc, #44]	; (800275c <BSP_LCD_Init+0xcc>)
 8002730:	f004 faea 	bl	8006d08 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002734:	2201      	movs	r2, #1
 8002736:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800273a:	480a      	ldr	r0, [pc, #40]	; (8002764 <BSP_LCD_Init+0xd4>)
 800273c:	f003 fc78 	bl	8006030 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002740:	2201      	movs	r2, #1
 8002742:	2108      	movs	r1, #8
 8002744:	4808      	ldr	r0, [pc, #32]	; (8002768 <BSP_LCD_Init+0xd8>)
 8002746:	f003 fc73 	bl	8006030 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800274a:	f000 fd7f 	bl	800324c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800274e:	4807      	ldr	r0, [pc, #28]	; (800276c <BSP_LCD_Init+0xdc>)
 8002750:	f000 f8d8 	bl	8002904 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	200009e8 	.word	0x200009e8
 8002760:	40016800 	.word	0x40016800
 8002764:	40022000 	.word	0x40022000
 8002768:	40022800 	.word	0x40022800
 800276c:	20000028 	.word	0x20000028

08002770 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <BSP_LCD_GetXSize+0x20>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a06      	ldr	r2, [pc, #24]	; (8002794 <BSP_LCD_GetXSize+0x24>)
 800277a:	2134      	movs	r1, #52	; 0x34
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	3360      	adds	r3, #96	; 0x60
 8002784:	681b      	ldr	r3, [r3, #0]
}
 8002786:	4618      	mov	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	20000ad0 	.word	0x20000ad0
 8002794:	200009e8 	.word	0x200009e8

08002798 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <BSP_LCD_GetYSize+0x20>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a06      	ldr	r2, [pc, #24]	; (80027bc <BSP_LCD_GetYSize+0x24>)
 80027a2:	2134      	movs	r1, #52	; 0x34
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	3364      	adds	r3, #100	; 0x64
 80027ac:	681b      	ldr	r3, [r3, #0]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	20000ad0 	.word	0x20000ad0
 80027bc:	200009e8 	.word	0x200009e8

080027c0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b090      	sub	sp, #64	; 0x40
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	6039      	str	r1, [r7, #0]
 80027ca:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80027d0:	f7ff ffce 	bl	8002770 <BSP_LCD_GetXSize>
 80027d4:	4603      	mov	r3, r0
 80027d6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80027dc:	f7ff ffdc 	bl	8002798 <BSP_LCD_GetYSize>
 80027e0:	4603      	mov	r3, r0
 80027e2:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80027ec:	23ff      	movs	r3, #255	; 0xff
 80027ee:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002806:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800280a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800280c:	2307      	movs	r3, #7
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002810:	f7ff ffae 	bl	8002770 <BSP_LCD_GetXSize>
 8002814:	4603      	mov	r3, r0
 8002816:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002818:	f7ff ffbe 	bl	8002798 <BSP_LCD_GetYSize>
 800281c:	4603      	mov	r3, r0
 800281e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002820:	88fa      	ldrh	r2, [r7, #6]
 8002822:	f107 030c 	add.w	r3, r7, #12
 8002826:	4619      	mov	r1, r3
 8002828:	4812      	ldr	r0, [pc, #72]	; (8002874 <BSP_LCD_LayerDefaultInit+0xb4>)
 800282a:	f004 fbff 	bl	800702c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800282e:	88fa      	ldrh	r2, [r7, #6]
 8002830:	4911      	ldr	r1, [pc, #68]	; (8002878 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002832:	4613      	mov	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	3304      	adds	r3, #4
 800283e:	f04f 32ff 	mov.w	r2, #4294967295
 8002842:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002844:	88fa      	ldrh	r2, [r7, #6]
 8002846:	490c      	ldr	r1, [pc, #48]	; (8002878 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	3308      	adds	r3, #8
 8002854:	4a09      	ldr	r2, [pc, #36]	; (800287c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002856:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002858:	88fa      	ldrh	r2, [r7, #6]
 800285a:	4907      	ldr	r1, [pc, #28]	; (8002878 <BSP_LCD_LayerDefaultInit+0xb8>)
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800286a:	601a      	str	r2, [r3, #0]
}
 800286c:	bf00      	nop
 800286e:	3740      	adds	r7, #64	; 0x40
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	200009e8 	.word	0x200009e8
 8002878:	20000ad4 	.word	0x20000ad4
 800287c:	20000028 	.word	0x20000028

08002880 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002888:	4a04      	ldr	r2, [pc, #16]	; (800289c <BSP_LCD_SelectLayer+0x1c>)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6013      	str	r3, [r2, #0]
} 
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000ad0 	.word	0x20000ad0

080028a0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80028a8:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <BSP_LCD_SetTextColor+0x28>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4907      	ldr	r1, [pc, #28]	; (80028cc <BSP_LCD_SetTextColor+0x2c>)
 80028ae:	4613      	mov	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	601a      	str	r2, [r3, #0]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	20000ad0 	.word	0x20000ad0
 80028cc:	20000ad4 	.word	0x20000ad4

080028d0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <BSP_LCD_SetBackColor+0x2c>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4908      	ldr	r1, [pc, #32]	; (8002900 <BSP_LCD_SetBackColor+0x30>)
 80028de:	4613      	mov	r3, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	3304      	adds	r3, #4
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	601a      	str	r2, [r3, #0]
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000ad0 	.word	0x20000ad0
 8002900:	20000ad4 	.word	0x20000ad4

08002904 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <BSP_LCD_SetFont+0x2c>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4908      	ldr	r1, [pc, #32]	; (8002934 <BSP_LCD_SetFont+0x30>)
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	3308      	adds	r3, #8
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	601a      	str	r2, [r3, #0]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	20000ad0 	.word	0x20000ad0
 8002934:	20000ad4 	.word	0x20000ad4

08002938 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800293a:	b085      	sub	sp, #20
 800293c:	af02      	add	r7, sp, #8
 800293e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <BSP_LCD_Clear+0x48>)
 8002942:	681c      	ldr	r4, [r3, #0]
 8002944:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <BSP_LCD_Clear+0x48>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <BSP_LCD_Clear+0x4c>)
 800294a:	2134      	movs	r1, #52	; 0x34
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	4413      	add	r3, r2
 8002952:	335c      	adds	r3, #92	; 0x5c
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	461e      	mov	r6, r3
 8002958:	f7ff ff0a 	bl	8002770 <BSP_LCD_GetXSize>
 800295c:	4605      	mov	r5, r0
 800295e:	f7ff ff1b 	bl	8002798 <BSP_LCD_GetYSize>
 8002962:	4602      	mov	r2, r0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	9301      	str	r3, [sp, #4]
 8002968:	2300      	movs	r3, #0
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	462a      	mov	r2, r5
 8002970:	4631      	mov	r1, r6
 8002972:	4620      	mov	r0, r4
 8002974:	f000 fbda 	bl	800312c <LL_FillBuffer>
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002980:	20000ad0 	.word	0x20000ad0
 8002984:	200009e8 	.word	0x200009e8

08002988 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	80fb      	strh	r3, [r7, #6]
 8002992:	460b      	mov	r3, r1
 8002994:	80bb      	strh	r3, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800299a:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <BSP_LCD_DisplayChar+0x80>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	491b      	ldr	r1, [pc, #108]	; (8002a0c <BSP_LCD_DisplayChar+0x84>)
 80029a0:	4613      	mov	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4413      	add	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	3308      	adds	r3, #8
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6819      	ldr	r1, [r3, #0]
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80029b6:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <BSP_LCD_DisplayChar+0x80>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4c14      	ldr	r4, [pc, #80]	; (8002a0c <BSP_LCD_DisplayChar+0x84>)
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4423      	add	r3, r4
 80029c6:	3308      	adds	r3, #8
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80029cc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80029d0:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <BSP_LCD_DisplayChar+0x80>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4c0d      	ldr	r4, [pc, #52]	; (8002a0c <BSP_LCD_DisplayChar+0x84>)
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4423      	add	r3, r4
 80029e0:	3308      	adds	r3, #8
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	889b      	ldrh	r3, [r3, #4]
 80029e6:	3307      	adds	r3, #7
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	da00      	bge.n	80029ee <BSP_LCD_DisplayChar+0x66>
 80029ec:	3307      	adds	r3, #7
 80029ee:	10db      	asrs	r3, r3, #3
 80029f0:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80029f4:	18ca      	adds	r2, r1, r3
 80029f6:	88b9      	ldrh	r1, [r7, #4]
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fade 	bl	8002fbc <DrawChar>
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd90      	pop	{r4, r7, pc}
 8002a08:	20000ad0 	.word	0x20000ad0
 8002a0c:	20000ad4 	.word	0x20000ad4

08002a10 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002a10:	b5b0      	push	{r4, r5, r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60ba      	str	r2, [r7, #8]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	81fb      	strh	r3, [r7, #14]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	81bb      	strh	r3, [r7, #12]
 8002a22:	4613      	mov	r3, r2
 8002a24:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002a26:	2301      	movs	r3, #1
 8002a28:	83fb      	strh	r3, [r7, #30]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002a3a:	e002      	b.n	8002a42 <BSP_LCD_DisplayStringAt+0x32>
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	617a      	str	r2, [r7, #20]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f6      	bne.n	8002a3c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002a4e:	f7ff fe8f 	bl	8002770 <BSP_LCD_GetXSize>
 8002a52:	4601      	mov	r1, r0
 8002a54:	4b50      	ldr	r3, [pc, #320]	; (8002b98 <BSP_LCD_DisplayStringAt+0x188>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4850      	ldr	r0, [pc, #320]	; (8002b9c <BSP_LCD_DisplayStringAt+0x18c>)
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4403      	add	r3, r0
 8002a64:	3308      	adds	r3, #8
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	889b      	ldrh	r3, [r3, #4]
 8002a6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a6e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d01c      	beq.n	8002ab0 <BSP_LCD_DisplayStringAt+0xa0>
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	dc33      	bgt.n	8002ae2 <BSP_LCD_DisplayStringAt+0xd2>
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d002      	beq.n	8002a84 <BSP_LCD_DisplayStringAt+0x74>
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d019      	beq.n	8002ab6 <BSP_LCD_DisplayStringAt+0xa6>
 8002a82:	e02e      	b.n	8002ae2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	1ad1      	subs	r1, r2, r3
 8002a8a:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <BSP_LCD_DisplayStringAt+0x188>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	4843      	ldr	r0, [pc, #268]	; (8002b9c <BSP_LCD_DisplayStringAt+0x18c>)
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4403      	add	r3, r0
 8002a9a:	3308      	adds	r3, #8
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	889b      	ldrh	r3, [r3, #4]
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	89fb      	ldrh	r3, [r7, #14]
 8002aaa:	4413      	add	r3, r2
 8002aac:	83fb      	strh	r3, [r7, #30]
      break;
 8002aae:	e01b      	b.n	8002ae8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002ab0:	89fb      	ldrh	r3, [r7, #14]
 8002ab2:	83fb      	strh	r3, [r7, #30]
      break;
 8002ab4:	e018      	b.n	8002ae8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	b299      	uxth	r1, r3
 8002abe:	4b36      	ldr	r3, [pc, #216]	; (8002b98 <BSP_LCD_DisplayStringAt+0x188>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4836      	ldr	r0, [pc, #216]	; (8002b9c <BSP_LCD_DisplayStringAt+0x18c>)
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4403      	add	r3, r0
 8002ace:	3308      	adds	r3, #8
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	889b      	ldrh	r3, [r3, #4]
 8002ad4:	fb11 f303 	smulbb	r3, r1, r3
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	89fb      	ldrh	r3, [r7, #14]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	83fb      	strh	r3, [r7, #30]
      break;
 8002ae0:	e002      	b.n	8002ae8 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8002ae2:	89fb      	ldrh	r3, [r7, #14]
 8002ae4:	83fb      	strh	r3, [r7, #30]
      break;
 8002ae6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002ae8:	8bfb      	ldrh	r3, [r7, #30]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <BSP_LCD_DisplayStringAt+0xe6>
 8002aee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	da1d      	bge.n	8002b32 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002af6:	2301      	movs	r3, #1
 8002af8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002afa:	e01a      	b.n	8002b32 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	781a      	ldrb	r2, [r3, #0]
 8002b00:	89b9      	ldrh	r1, [r7, #12]
 8002b02:	8bfb      	ldrh	r3, [r7, #30]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ff3f 	bl	8002988 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002b0a:	4b23      	ldr	r3, [pc, #140]	; (8002b98 <BSP_LCD_DisplayStringAt+0x188>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4923      	ldr	r1, [pc, #140]	; (8002b9c <BSP_LCD_DisplayStringAt+0x18c>)
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	3308      	adds	r3, #8
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	889a      	ldrh	r2, [r3, #4]
 8002b20:	8bfb      	ldrh	r3, [r7, #30]
 8002b22:	4413      	add	r3, r2
 8002b24:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	60bb      	str	r3, [r7, #8]
    i++;
 8002b2c:	8bbb      	ldrh	r3, [r7, #28]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bf14      	ite	ne
 8002b3a:	2301      	movne	r3, #1
 8002b3c:	2300      	moveq	r3, #0
 8002b3e:	b2dc      	uxtb	r4, r3
 8002b40:	f7ff fe16 	bl	8002770 <BSP_LCD_GetXSize>
 8002b44:	8bb9      	ldrh	r1, [r7, #28]
 8002b46:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <BSP_LCD_DisplayStringAt+0x188>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	4d14      	ldr	r5, [pc, #80]	; (8002b9c <BSP_LCD_DisplayStringAt+0x18c>)
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	442b      	add	r3, r5
 8002b56:	3308      	adds	r3, #8
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	889b      	ldrh	r3, [r3, #4]
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	1ac3      	subs	r3, r0, r3
 8002b62:	b299      	uxth	r1, r3
 8002b64:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <BSP_LCD_DisplayStringAt+0x188>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	480c      	ldr	r0, [pc, #48]	; (8002b9c <BSP_LCD_DisplayStringAt+0x18c>)
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4403      	add	r3, r0
 8002b74:	3308      	adds	r3, #8
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	889b      	ldrh	r3, [r3, #4]
 8002b7a:	4299      	cmp	r1, r3
 8002b7c:	bf2c      	ite	cs
 8002b7e:	2301      	movcs	r3, #1
 8002b80:	2300      	movcc	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	4023      	ands	r3, r4
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1b7      	bne.n	8002afc <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	3720      	adds	r7, #32
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bdb0      	pop	{r4, r5, r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000ad0 	.word	0x20000ad0
 8002b9c:	20000ad4 	.word	0x20000ad4

08002ba0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002ba0:	b5b0      	push	{r4, r5, r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	603a      	str	r2, [r7, #0]
 8002baa:	80fb      	strh	r3, [r7, #6]
 8002bac:	460b      	mov	r3, r1
 8002bae:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <BSP_LCD_DrawPixel+0x88>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1d      	ldr	r2, [pc, #116]	; (8002c2c <BSP_LCD_DrawPixel+0x8c>)
 8002bb6:	2134      	movs	r1, #52	; 0x34
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3348      	adds	r3, #72	; 0x48
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d116      	bne.n	8002bf4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002bc6:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <BSP_LCD_DrawPixel+0x88>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a18      	ldr	r2, [pc, #96]	; (8002c2c <BSP_LCD_DrawPixel+0x8c>)
 8002bcc:	2134      	movs	r1, #52	; 0x34
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	335c      	adds	r3, #92	; 0x5c
 8002bd6:	681c      	ldr	r4, [r3, #0]
 8002bd8:	88bd      	ldrh	r5, [r7, #4]
 8002bda:	f7ff fdc9 	bl	8002770 <BSP_LCD_GetXSize>
 8002bde:	4603      	mov	r3, r0
 8002be0:	fb03 f205 	mul.w	r2, r3, r5
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	4413      	add	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	4423      	add	r3, r4
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	b292      	uxth	r2, r2
 8002bf0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002bf2:	e015      	b.n	8002c20 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <BSP_LCD_DrawPixel+0x88>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a0c      	ldr	r2, [pc, #48]	; (8002c2c <BSP_LCD_DrawPixel+0x8c>)
 8002bfa:	2134      	movs	r1, #52	; 0x34
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	335c      	adds	r3, #92	; 0x5c
 8002c04:	681c      	ldr	r4, [r3, #0]
 8002c06:	88bd      	ldrh	r5, [r7, #4]
 8002c08:	f7ff fdb2 	bl	8002770 <BSP_LCD_GetXSize>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	fb03 f205 	mul.w	r2, r3, r5
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4423      	add	r3, r4
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6013      	str	r3, [r2, #0]
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bdb0      	pop	{r4, r5, r7, pc}
 8002c28:	20000ad0 	.word	0x20000ad0
 8002c2c:	200009e8 	.word	0x200009e8

08002c30 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8002c30:	b590      	push	{r4, r7, lr}
 8002c32:	b08b      	sub	sp, #44	; 0x2c
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c40:	2300      	movs	r3, #0
 8002c42:	61bb      	str	r3, [r7, #24]
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	330a      	adds	r3, #10
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	330b      	adds	r3, #11
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	441a      	add	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	330c      	adds	r3, #12
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	041b      	lsls	r3, r3, #16
 8002c6a:	441a      	add	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	330d      	adds	r3, #13
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	061b      	lsls	r3, r3, #24
 8002c74:	4413      	add	r3, r2
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3312      	adds	r3, #18
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3313      	adds	r3, #19
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	441a      	add	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3314      	adds	r3, #20
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	441a      	add	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3315      	adds	r3, #21
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	061b      	lsls	r3, r3, #24
 8002c9c:	4413      	add	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3316      	adds	r3, #22
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3317      	adds	r3, #23
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	021b      	lsls	r3, r3, #8
 8002cb0:	441a      	add	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3318      	adds	r3, #24
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	041b      	lsls	r3, r3, #16
 8002cba:	441a      	add	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3319      	adds	r3, #25
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	061b      	lsls	r3, r3, #24
 8002cc4:	4413      	add	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	331c      	adds	r3, #28
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	331d      	adds	r3, #29
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	4413      	add	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <BSP_LCD_DrawBitmap+0x15c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a2b      	ldr	r2, [pc, #172]	; (8002d90 <BSP_LCD_DrawBitmap+0x160>)
 8002ce2:	2134      	movs	r1, #52	; 0x34
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	335c      	adds	r3, #92	; 0x5c
 8002cec:	681c      	ldr	r4, [r3, #0]
 8002cee:	f7ff fd3f 	bl	8002770 <BSP_LCD_GetXSize>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	fb03 f202 	mul.w	r2, r3, r2
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4423      	add	r3, r4
 8002d02:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	3b20      	subs	r3, #32
 8002d08:	2b07      	cmp	r3, #7
 8002d0a:	d802      	bhi.n	8002d12 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61fb      	str	r3, [r7, #28]
 8002d10:	e008      	b.n	8002d24 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	3b10      	subs	r3, #16
 8002d16:	2b07      	cmp	r3, #7
 8002d18:	d802      	bhi.n	8002d20 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	e001      	b.n	8002d24 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8002d20:	2301      	movs	r3, #1
 8002d22:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	08d2      	lsrs	r2, r2, #3
 8002d32:	fb03 f202 	mul.w	r2, r3, r2
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	4413      	add	r3, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002d40:	2300      	movs	r3, #0
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
 8002d44:	e018      	b.n	8002d78 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8002d46:	6a39      	ldr	r1, [r7, #32]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fa39 	bl	80031c4 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8002d52:	f7ff fd0d 	bl	8002770 <BSP_LCD_GetXSize>
 8002d56:	4603      	mov	r3, r0
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	6a3a      	ldr	r2, [r7, #32]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	08db      	lsrs	r3, r3, #3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	fb02 f303 	mul.w	r3, r2, r3
 8002d6a:	425b      	negs	r3, r3
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	4413      	add	r3, r2
 8002d70:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	3301      	adds	r3, #1
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
 8002d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d3e2      	bcc.n	8002d46 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
 8002d84:	372c      	adds	r7, #44	; 0x2c
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd90      	pop	{r4, r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000ad0 	.word	0x20000ad0
 8002d90:	200009e8 	.word	0x200009e8

08002d94 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <BSP_LCD_DisplayOn+0x30>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <BSP_LCD_DisplayOn+0x30>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002da8:	2201      	movs	r2, #1
 8002daa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dae:	4806      	ldr	r0, [pc, #24]	; (8002dc8 <BSP_LCD_DisplayOn+0x34>)
 8002db0:	f003 f93e 	bl	8006030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002db4:	2201      	movs	r2, #1
 8002db6:	2108      	movs	r1, #8
 8002db8:	4804      	ldr	r0, [pc, #16]	; (8002dcc <BSP_LCD_DisplayOn+0x38>)
 8002dba:	f003 f939 	bl	8006030 <HAL_GPIO_WritePin>
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200009e8 	.word	0x200009e8
 8002dc8:	40022000 	.word	0x40022000
 8002dcc:	40022800 	.word	0x40022800

08002dd0 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b090      	sub	sp, #64	; 0x40
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002dda:	4b64      	ldr	r3, [pc, #400]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	4a63      	ldr	r2, [pc, #396]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002de0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002de4:	6453      	str	r3, [r2, #68]	; 0x44
 8002de6:	4b61      	ldr	r3, [pc, #388]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002df2:	4b5e      	ldr	r3, [pc, #376]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a5d      	ldr	r2, [pc, #372]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002df8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b5b      	ldr	r3, [pc, #364]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e0a:	4b58      	ldr	r3, [pc, #352]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	4a57      	ldr	r2, [pc, #348]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e10:	f043 0310 	orr.w	r3, r3, #16
 8002e14:	6313      	str	r3, [r2, #48]	; 0x30
 8002e16:	4b55      	ldr	r3, [pc, #340]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f003 0310 	and.w	r3, r3, #16
 8002e1e:	623b      	str	r3, [r7, #32]
 8002e20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e22:	4b52      	ldr	r3, [pc, #328]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	4a51      	ldr	r2, [pc, #324]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2e:	4b4f      	ldr	r3, [pc, #316]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e36:	61fb      	str	r3, [r7, #28]
 8002e38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e3a:	4b4c      	ldr	r3, [pc, #304]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a4b      	ldr	r2, [pc, #300]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b49      	ldr	r3, [pc, #292]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4e:	61bb      	str	r3, [r7, #24]
 8002e50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002e52:	4b46      	ldr	r3, [pc, #280]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4a45      	ldr	r2, [pc, #276]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5e:	4b43      	ldr	r3, [pc, #268]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002e6a:	4b40      	ldr	r3, [pc, #256]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	4a3f      	ldr	r2, [pc, #252]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e74:	6313      	str	r3, [r2, #48]	; 0x30
 8002e76:	4b3d      	ldr	r3, [pc, #244]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002e82:	4b3a      	ldr	r3, [pc, #232]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a39      	ldr	r2, [pc, #228]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b37      	ldr	r3, [pc, #220]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002e9a:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	4a33      	ldr	r2, [pc, #204]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002ea0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea6:	4b31      	ldr	r3, [pc, #196]	; (8002f6c <BSP_LCD_MspInit+0x19c>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002eb2:	2310      	movs	r3, #16
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002ec2:	230e      	movs	r3, #14
 8002ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002ec6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4828      	ldr	r0, [pc, #160]	; (8002f70 <BSP_LCD_MspInit+0x1a0>)
 8002ece:	f002 fddf 	bl	8005a90 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002edc:	2309      	movs	r3, #9
 8002ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4823      	ldr	r0, [pc, #140]	; (8002f74 <BSP_LCD_MspInit+0x1a4>)
 8002ee8:	f002 fdd2 	bl	8005a90 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002eec:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8002ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002ef6:	230e      	movs	r3, #14
 8002ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002efa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002efe:	4619      	mov	r1, r3
 8002f00:	481d      	ldr	r0, [pc, #116]	; (8002f78 <BSP_LCD_MspInit+0x1a8>)
 8002f02:	f002 fdc5 	bl	8005a90 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002f06:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002f10:	230e      	movs	r3, #14
 8002f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002f14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4818      	ldr	r0, [pc, #96]	; (8002f7c <BSP_LCD_MspInit+0x1ac>)
 8002f1c:	f002 fdb8 	bl	8005a90 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002f20:	23f7      	movs	r3, #247	; 0xf7
 8002f22:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f24:	2302      	movs	r3, #2
 8002f26:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002f28:	230e      	movs	r3, #14
 8002f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002f2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f30:	4619      	mov	r1, r3
 8002f32:	4813      	ldr	r0, [pc, #76]	; (8002f80 <BSP_LCD_MspInit+0x1b0>)
 8002f34:	f002 fdac 	bl	8005a90 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002f42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f46:	4619      	mov	r1, r3
 8002f48:	480b      	ldr	r0, [pc, #44]	; (8002f78 <BSP_LCD_MspInit+0x1a8>)
 8002f4a:	f002 fda1 	bl	8005a90 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002f4e:	2308      	movs	r3, #8
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002f52:	2301      	movs	r3, #1
 8002f54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002f56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4808      	ldr	r0, [pc, #32]	; (8002f80 <BSP_LCD_MspInit+0x1b0>)
 8002f5e:	f002 fd97 	bl	8005a90 <HAL_GPIO_Init>
}
 8002f62:	bf00      	nop
 8002f64:	3740      	adds	r7, #64	; 0x40
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40021800 	.word	0x40021800
 8002f78:	40022000 	.word	0x40022000
 8002f7c:	40022400 	.word	0x40022400
 8002f80:	40022800 	.word	0x40022800

08002f84 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <BSP_LCD_ClockConfig+0x34>)
 8002f90:	2208      	movs	r2, #8
 8002f92:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <BSP_LCD_ClockConfig+0x34>)
 8002f96:	22c0      	movs	r2, #192	; 0xc0
 8002f98:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002f9a:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <BSP_LCD_ClockConfig+0x34>)
 8002f9c:	2205      	movs	r2, #5
 8002f9e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002fa0:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <BSP_LCD_ClockConfig+0x34>)
 8002fa2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002fa8:	4803      	ldr	r0, [pc, #12]	; (8002fb8 <BSP_LCD_ClockConfig+0x34>)
 8002faa:	f004 ff41 	bl	8007e30 <HAL_RCCEx_PeriphCLKConfig>
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000aec 	.word	0x20000aec

08002fbc <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	603a      	str	r2, [r7, #0]
 8002fc6:	80fb      	strh	r3, [r7, #6]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8002fd4:	4b53      	ldr	r3, [pc, #332]	; (8003124 <DrawChar+0x168>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	4953      	ldr	r1, [pc, #332]	; (8003128 <DrawChar+0x16c>)
 8002fda:	4613      	mov	r3, r2
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	3308      	adds	r3, #8
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	88db      	ldrh	r3, [r3, #6]
 8002fea:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002fec:	4b4d      	ldr	r3, [pc, #308]	; (8003124 <DrawChar+0x168>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	494d      	ldr	r1, [pc, #308]	; (8003128 <DrawChar+0x16c>)
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	889b      	ldrh	r3, [r3, #4]
 8003002:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003004:	8a3b      	ldrh	r3, [r7, #16]
 8003006:	3307      	adds	r3, #7
 8003008:	2b00      	cmp	r3, #0
 800300a:	da00      	bge.n	800300e <DrawChar+0x52>
 800300c:	3307      	adds	r3, #7
 800300e:	10db      	asrs	r3, r3, #3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	b2da      	uxtb	r2, r3
 8003016:	8a3b      	ldrh	r3, [r7, #16]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	e076      	b.n	8003112 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003024:	8a3b      	ldrh	r3, [r7, #16]
 8003026:	3307      	adds	r3, #7
 8003028:	2b00      	cmp	r3, #0
 800302a:	da00      	bge.n	800302e <DrawChar+0x72>
 800302c:	3307      	adds	r3, #7
 800302e:	10db      	asrs	r3, r3, #3
 8003030:	461a      	mov	r2, r3
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fb02 f303 	mul.w	r3, r2, r3
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	4413      	add	r3, r2
 800303c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800303e:	8a3b      	ldrh	r3, [r7, #16]
 8003040:	3307      	adds	r3, #7
 8003042:	2b00      	cmp	r3, #0
 8003044:	da00      	bge.n	8003048 <DrawChar+0x8c>
 8003046:	3307      	adds	r3, #7
 8003048:	10db      	asrs	r3, r3, #3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d002      	beq.n	8003054 <DrawChar+0x98>
 800304e:	2b02      	cmp	r3, #2
 8003050:	d004      	beq.n	800305c <DrawChar+0xa0>
 8003052:	e00c      	b.n	800306e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	617b      	str	r3, [r7, #20]
      break;
 800305a:	e016      	b.n	800308a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	021b      	lsls	r3, r3, #8
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	3201      	adds	r2, #1
 8003066:	7812      	ldrb	r2, [r2, #0]
 8003068:	4313      	orrs	r3, r2
 800306a:	617b      	str	r3, [r7, #20]
      break;
 800306c:	e00d      	b.n	800308a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	041a      	lsls	r2, r3, #16
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	3301      	adds	r3, #1
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	4313      	orrs	r3, r2
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	3202      	adds	r2, #2
 8003082:	7812      	ldrb	r2, [r2, #0]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
      break;
 8003088:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800308a:	2300      	movs	r3, #0
 800308c:	61bb      	str	r3, [r7, #24]
 800308e:	e036      	b.n	80030fe <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003090:	8a3a      	ldrh	r2, [r7, #16]
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	1ad2      	subs	r2, r2, r3
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	4413      	add	r3, r2
 800309a:	3b01      	subs	r3, #1
 800309c:	2201      	movs	r2, #1
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d012      	beq.n	80030d2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	88fb      	ldrh	r3, [r7, #6]
 80030b2:	4413      	add	r3, r2
 80030b4:	b298      	uxth	r0, r3
 80030b6:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <DrawChar+0x168>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	491b      	ldr	r1, [pc, #108]	; (8003128 <DrawChar+0x16c>)
 80030bc:	4613      	mov	r3, r2
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	88bb      	ldrh	r3, [r7, #4]
 80030ca:	4619      	mov	r1, r3
 80030cc:	f7ff fd68 	bl	8002ba0 <BSP_LCD_DrawPixel>
 80030d0:	e012      	b.n	80030f8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	4413      	add	r3, r2
 80030da:	b298      	uxth	r0, r3
 80030dc:	4b11      	ldr	r3, [pc, #68]	; (8003124 <DrawChar+0x168>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4911      	ldr	r1, [pc, #68]	; (8003128 <DrawChar+0x16c>)
 80030e2:	4613      	mov	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	3304      	adds	r3, #4
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	88bb      	ldrh	r3, [r7, #4]
 80030f2:	4619      	mov	r1, r3
 80030f4:	f7ff fd54 	bl	8002ba0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	3301      	adds	r3, #1
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	8a3b      	ldrh	r3, [r7, #16]
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	429a      	cmp	r2, r3
 8003104:	d3c4      	bcc.n	8003090 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003106:	88bb      	ldrh	r3, [r7, #4]
 8003108:	3301      	adds	r3, #1
 800310a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	3301      	adds	r3, #1
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	8a7b      	ldrh	r3, [r7, #18]
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	429a      	cmp	r2, r3
 8003118:	d384      	bcc.n	8003024 <DrawChar+0x68>
  }
}
 800311a:	bf00      	nop
 800311c:	bf00      	nop
 800311e:	3720      	adds	r7, #32
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20000ad0 	.word	0x20000ad0
 8003128:	20000ad4 	.word	0x20000ad4

0800312c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800313a:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <LL_FillBuffer+0x88>)
 800313c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003140:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003142:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <LL_FillBuffer+0x8c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <LL_FillBuffer+0x90>)
 8003148:	2134      	movs	r1, #52	; 0x34
 800314a:	fb01 f303 	mul.w	r3, r1, r3
 800314e:	4413      	add	r3, r2
 8003150:	3348      	adds	r3, #72	; 0x48
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d103      	bne.n	8003160 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003158:	4b16      	ldr	r3, [pc, #88]	; (80031b4 <LL_FillBuffer+0x88>)
 800315a:	2202      	movs	r2, #2
 800315c:	609a      	str	r2, [r3, #8]
 800315e:	e002      	b.n	8003166 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003160:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <LL_FillBuffer+0x88>)
 8003162:	2200      	movs	r2, #0
 8003164:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003166:	4a13      	ldr	r2, [pc, #76]	; (80031b4 <LL_FillBuffer+0x88>)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <LL_FillBuffer+0x88>)
 800316e:	4a14      	ldr	r2, [pc, #80]	; (80031c0 <LL_FillBuffer+0x94>)
 8003170:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003172:	4810      	ldr	r0, [pc, #64]	; (80031b4 <LL_FillBuffer+0x88>)
 8003174:	f002 f8f0 	bl	8005358 <HAL_DMA2D_Init>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d115      	bne.n	80031aa <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800317e:	68f9      	ldr	r1, [r7, #12]
 8003180:	480c      	ldr	r0, [pc, #48]	; (80031b4 <LL_FillBuffer+0x88>)
 8003182:	f002 fb57 	bl	8005834 <HAL_DMA2D_ConfigLayer>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10e      	bne.n	80031aa <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69f9      	ldr	r1, [r7, #28]
 8003196:	4807      	ldr	r0, [pc, #28]	; (80031b4 <LL_FillBuffer+0x88>)
 8003198:	f002 f928 	bl	80053ec <HAL_DMA2D_Start>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d103      	bne.n	80031aa <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80031a2:	210a      	movs	r1, #10
 80031a4:	4803      	ldr	r0, [pc, #12]	; (80031b4 <LL_FillBuffer+0x88>)
 80031a6:	f002 f94c 	bl	8005442 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80031aa:	bf00      	nop
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000a90 	.word	0x20000a90
 80031b8:	20000ad0 	.word	0x20000ad0
 80031bc:	200009e8 	.word	0x200009e8
 80031c0:	4002b000 	.word	0x4002b000

080031c4 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80031d2:	4b1c      	ldr	r3, [pc, #112]	; (8003244 <LL_ConvertLineToARGB8888+0x80>)
 80031d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80031d8:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80031da:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <LL_ConvertLineToARGB8888+0x80>)
 80031dc:	2200      	movs	r2, #0
 80031de:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 80031e0:	4b18      	ldr	r3, [pc, #96]	; (8003244 <LL_ConvertLineToARGB8888+0x80>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80031e6:	4b17      	ldr	r3, [pc, #92]	; (8003244 <LL_ConvertLineToARGB8888+0x80>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80031ec:	4b15      	ldr	r3, [pc, #84]	; (8003244 <LL_ConvertLineToARGB8888+0x80>)
 80031ee:	22ff      	movs	r2, #255	; 0xff
 80031f0:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80031f2:	4a14      	ldr	r2, [pc, #80]	; (8003244 <LL_ConvertLineToARGB8888+0x80>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80031f8:	4b12      	ldr	r3, [pc, #72]	; (8003244 <LL_ConvertLineToARGB8888+0x80>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 80031fe:	4b11      	ldr	r3, [pc, #68]	; (8003244 <LL_ConvertLineToARGB8888+0x80>)
 8003200:	4a11      	ldr	r2, [pc, #68]	; (8003248 <LL_ConvertLineToARGB8888+0x84>)
 8003202:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003204:	480f      	ldr	r0, [pc, #60]	; (8003244 <LL_ConvertLineToARGB8888+0x80>)
 8003206:	f002 f8a7 	bl	8005358 <HAL_DMA2D_Init>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d115      	bne.n	800323c <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8003210:	2101      	movs	r1, #1
 8003212:	480c      	ldr	r0, [pc, #48]	; (8003244 <LL_ConvertLineToARGB8888+0x80>)
 8003214:	f002 fb0e 	bl	8005834 <HAL_DMA2D_ConfigLayer>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10e      	bne.n	800323c <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	2301      	movs	r3, #1
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4806      	ldr	r0, [pc, #24]	; (8003244 <LL_ConvertLineToARGB8888+0x80>)
 800322a:	f002 f8df 	bl	80053ec <HAL_DMA2D_Start>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d103      	bne.n	800323c <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003234:	210a      	movs	r1, #10
 8003236:	4803      	ldr	r0, [pc, #12]	; (8003244 <LL_ConvertLineToARGB8888+0x80>)
 8003238:	f002 f903 	bl	8005442 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800323c:	bf00      	nop
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20000a90 	.word	0x20000a90
 8003248:	4002b000 	.word	0x4002b000

0800324c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003250:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <BSP_SDRAM_Init+0xac>)
 8003252:	4a2a      	ldr	r2, [pc, #168]	; (80032fc <BSP_SDRAM_Init+0xb0>)
 8003254:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003256:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <BSP_SDRAM_Init+0xb4>)
 8003258:	2202      	movs	r2, #2
 800325a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800325c:	4b28      	ldr	r3, [pc, #160]	; (8003300 <BSP_SDRAM_Init+0xb4>)
 800325e:	2207      	movs	r2, #7
 8003260:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003262:	4b27      	ldr	r3, [pc, #156]	; (8003300 <BSP_SDRAM_Init+0xb4>)
 8003264:	2204      	movs	r2, #4
 8003266:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003268:	4b25      	ldr	r3, [pc, #148]	; (8003300 <BSP_SDRAM_Init+0xb4>)
 800326a:	2207      	movs	r2, #7
 800326c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800326e:	4b24      	ldr	r3, [pc, #144]	; (8003300 <BSP_SDRAM_Init+0xb4>)
 8003270:	2202      	movs	r2, #2
 8003272:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003274:	4b22      	ldr	r3, [pc, #136]	; (8003300 <BSP_SDRAM_Init+0xb4>)
 8003276:	2202      	movs	r2, #2
 8003278:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800327a:	4b21      	ldr	r3, [pc, #132]	; (8003300 <BSP_SDRAM_Init+0xb4>)
 800327c:	2202      	movs	r2, #2
 800327e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003280:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <BSP_SDRAM_Init+0xac>)
 8003282:	2200      	movs	r2, #0
 8003284:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003286:	4b1c      	ldr	r3, [pc, #112]	; (80032f8 <BSP_SDRAM_Init+0xac>)
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800328c:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <BSP_SDRAM_Init+0xac>)
 800328e:	2204      	movs	r2, #4
 8003290:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003292:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <BSP_SDRAM_Init+0xac>)
 8003294:	2210      	movs	r2, #16
 8003296:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003298:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <BSP_SDRAM_Init+0xac>)
 800329a:	2240      	movs	r2, #64	; 0x40
 800329c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800329e:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <BSP_SDRAM_Init+0xac>)
 80032a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032a4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80032a6:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <BSP_SDRAM_Init+0xac>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <BSP_SDRAM_Init+0xac>)
 80032ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032b2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80032b4:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <BSP_SDRAM_Init+0xac>)
 80032b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80032bc:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <BSP_SDRAM_Init+0xac>)
 80032be:	2200      	movs	r2, #0
 80032c0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80032c2:	2100      	movs	r1, #0
 80032c4:	480c      	ldr	r0, [pc, #48]	; (80032f8 <BSP_SDRAM_Init+0xac>)
 80032c6:	f000 f87f 	bl	80033c8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80032ca:	490d      	ldr	r1, [pc, #52]	; (8003300 <BSP_SDRAM_Init+0xb4>)
 80032cc:	480a      	ldr	r0, [pc, #40]	; (80032f8 <BSP_SDRAM_Init+0xac>)
 80032ce:	f005 fd77 	bl	8008dc0 <HAL_SDRAM_Init>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80032d8:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <BSP_SDRAM_Init+0xb8>)
 80032da:	2201      	movs	r2, #1
 80032dc:	701a      	strb	r2, [r3, #0]
 80032de:	e002      	b.n	80032e6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80032e0:	4b08      	ldr	r3, [pc, #32]	; (8003304 <BSP_SDRAM_Init+0xb8>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80032e6:	f240 6003 	movw	r0, #1539	; 0x603
 80032ea:	f000 f80d 	bl	8003308 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <BSP_SDRAM_Init+0xb8>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000b70 	.word	0x20000b70
 80032fc:	a0000140 	.word	0xa0000140
 8003300:	20000ba4 	.word	0x20000ba4
 8003304:	20000038 	.word	0x20000038

08003308 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003314:	4b2a      	ldr	r3, [pc, #168]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003316:	2201      	movs	r2, #1
 8003318:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800331a:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800331c:	2210      	movs	r2, #16
 800331e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003320:	4b27      	ldr	r3, [pc, #156]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003322:	2201      	movs	r2, #1
 8003324:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003326:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003328:	2200      	movs	r2, #0
 800332a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800332c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003330:	4923      	ldr	r1, [pc, #140]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003332:	4824      	ldr	r0, [pc, #144]	; (80033c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003334:	f005 fd78 	bl	8008e28 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003338:	2001      	movs	r0, #1
 800333a:	f001 f86f 	bl	800441c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800333e:	4b20      	ldr	r3, [pc, #128]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003340:	2202      	movs	r2, #2
 8003342:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003344:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003346:	2210      	movs	r2, #16
 8003348:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800334a:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800334c:	2201      	movs	r2, #1
 800334e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003350:	4b1b      	ldr	r3, [pc, #108]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003352:	2200      	movs	r2, #0
 8003354:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800335a:	4919      	ldr	r1, [pc, #100]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800335c:	4819      	ldr	r0, [pc, #100]	; (80033c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800335e:	f005 fd63 	bl	8008e28 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003362:	4b17      	ldr	r3, [pc, #92]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003364:	2203      	movs	r2, #3
 8003366:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003368:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800336a:	2210      	movs	r2, #16
 800336c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800336e:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003370:	2208      	movs	r2, #8
 8003372:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003374:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003376:	2200      	movs	r2, #0
 8003378:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800337a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800337e:	4910      	ldr	r1, [pc, #64]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003380:	4810      	ldr	r0, [pc, #64]	; (80033c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003382:	f005 fd51 	bl	8008e28 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003386:	f44f 7308 	mov.w	r3, #544	; 0x220
 800338a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800338e:	2204      	movs	r2, #4
 8003390:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003392:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003394:	2210      	movs	r2, #16
 8003396:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003398:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800339a:	2201      	movs	r2, #1
 800339c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033a2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80033a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033a8:	4905      	ldr	r1, [pc, #20]	; (80033c0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033aa:	4806      	ldr	r0, [pc, #24]	; (80033c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033ac:	f005 fd3c 	bl	8008e28 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4804      	ldr	r0, [pc, #16]	; (80033c4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033b4:	f005 fd6d 	bl	8008e92 <HAL_SDRAM_ProgramRefreshRate>
}
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000bc0 	.word	0x20000bc0
 80033c4:	20000b70 	.word	0x20000b70

080033c8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b090      	sub	sp, #64	; 0x40
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80033d2:	4b70      	ldr	r3, [pc, #448]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	4a6f      	ldr	r2, [pc, #444]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	6393      	str	r3, [r2, #56]	; 0x38
 80033de:	4b6d      	ldr	r3, [pc, #436]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80033ea:	4b6a      	ldr	r3, [pc, #424]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	4a69      	ldr	r2, [pc, #420]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 80033f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033f4:	6313      	str	r3, [r2, #48]	; 0x30
 80033f6:	4b67      	ldr	r3, [pc, #412]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003402:	4b64      	ldr	r3, [pc, #400]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	4a63      	ldr	r2, [pc, #396]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 8003408:	f043 0304 	orr.w	r3, r3, #4
 800340c:	6313      	str	r3, [r2, #48]	; 0x30
 800340e:	4b61      	ldr	r3, [pc, #388]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	623b      	str	r3, [r7, #32]
 8003418:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800341a:	4b5e      	ldr	r3, [pc, #376]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	4a5d      	ldr	r2, [pc, #372]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 8003420:	f043 0308 	orr.w	r3, r3, #8
 8003424:	6313      	str	r3, [r2, #48]	; 0x30
 8003426:	4b5b      	ldr	r3, [pc, #364]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	61fb      	str	r3, [r7, #28]
 8003430:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003432:	4b58      	ldr	r3, [pc, #352]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a57      	ldr	r2, [pc, #348]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 8003438:	f043 0310 	orr.w	r3, r3, #16
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b55      	ldr	r3, [pc, #340]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800344a:	4b52      	ldr	r3, [pc, #328]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a51      	ldr	r2, [pc, #324]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 8003450:	f043 0320 	orr.w	r3, r3, #32
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b4f      	ldr	r3, [pc, #316]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003462:	4b4c      	ldr	r3, [pc, #304]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	4a4b      	ldr	r2, [pc, #300]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 8003468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800346c:	6313      	str	r3, [r2, #48]	; 0x30
 800346e:	4b49      	ldr	r3, [pc, #292]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800347a:	4b46      	ldr	r3, [pc, #280]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	4a45      	ldr	r2, [pc, #276]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 8003480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003484:	6313      	str	r3, [r2, #48]	; 0x30
 8003486:	4b43      	ldr	r3, [pc, #268]	; (8003594 <BSP_SDRAM_MspInit+0x1cc>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003492:	2302      	movs	r3, #2
 8003494:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003496:	2301      	movs	r3, #1
 8003498:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800349a:	2302      	movs	r3, #2
 800349c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800349e:	230c      	movs	r3, #12
 80034a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80034a2:	2308      	movs	r3, #8
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80034a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034aa:	4619      	mov	r1, r3
 80034ac:	483a      	ldr	r0, [pc, #232]	; (8003598 <BSP_SDRAM_MspInit+0x1d0>)
 80034ae:	f002 faef 	bl	8005a90 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80034b2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80034b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034bc:	4619      	mov	r1, r3
 80034be:	4837      	ldr	r0, [pc, #220]	; (800359c <BSP_SDRAM_MspInit+0x1d4>)
 80034c0:	f002 fae6 	bl	8005a90 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80034c4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80034ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ce:	4619      	mov	r1, r3
 80034d0:	4833      	ldr	r0, [pc, #204]	; (80035a0 <BSP_SDRAM_MspInit+0x1d8>)
 80034d2:	f002 fadd 	bl	8005a90 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80034d6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80034dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034e0:	4619      	mov	r1, r3
 80034e2:	4830      	ldr	r0, [pc, #192]	; (80035a4 <BSP_SDRAM_MspInit+0x1dc>)
 80034e4:	f002 fad4 	bl	8005a90 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80034e8:	f248 1333 	movw	r3, #33075	; 0x8133
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80034ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034f2:	4619      	mov	r1, r3
 80034f4:	482c      	ldr	r0, [pc, #176]	; (80035a8 <BSP_SDRAM_MspInit+0x1e0>)
 80034f6:	f002 facb 	bl	8005a90 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80034fa:	2328      	movs	r3, #40	; 0x28
 80034fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80034fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003502:	4619      	mov	r1, r3
 8003504:	4829      	ldr	r0, [pc, #164]	; (80035ac <BSP_SDRAM_MspInit+0x1e4>)
 8003506:	f002 fac3 	bl	8005a90 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800350a:	4b29      	ldr	r3, [pc, #164]	; (80035b0 <BSP_SDRAM_MspInit+0x1e8>)
 800350c:	2200      	movs	r2, #0
 800350e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003510:	4b27      	ldr	r3, [pc, #156]	; (80035b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003512:	2280      	movs	r2, #128	; 0x80
 8003514:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003516:	4b26      	ldr	r3, [pc, #152]	; (80035b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800351c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800351e:	4b24      	ldr	r3, [pc, #144]	; (80035b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003520:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003524:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003526:	4b22      	ldr	r3, [pc, #136]	; (80035b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003528:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800352c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800352e:	4b20      	ldr	r3, [pc, #128]	; (80035b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003530:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003534:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003536:	4b1e      	ldr	r3, [pc, #120]	; (80035b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003538:	2200      	movs	r2, #0
 800353a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800353c:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <BSP_SDRAM_MspInit+0x1e8>)
 800353e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003542:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003544:	4b1a      	ldr	r3, [pc, #104]	; (80035b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003546:	2200      	movs	r2, #0
 8003548:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800354a:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <BSP_SDRAM_MspInit+0x1e8>)
 800354c:	2203      	movs	r2, #3
 800354e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003550:	4b17      	ldr	r3, [pc, #92]	; (80035b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003552:	2200      	movs	r2, #0
 8003554:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003556:	4b16      	ldr	r3, [pc, #88]	; (80035b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800355c:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <BSP_SDRAM_MspInit+0x1e8>)
 800355e:	4a15      	ldr	r2, [pc, #84]	; (80035b4 <BSP_SDRAM_MspInit+0x1ec>)
 8003560:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a12      	ldr	r2, [pc, #72]	; (80035b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
 8003568:	4a11      	ldr	r2, [pc, #68]	; (80035b0 <BSP_SDRAM_MspInit+0x1e8>)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800356e:	4810      	ldr	r0, [pc, #64]	; (80035b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003570:	f001 fde2 	bl	8005138 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003574:	480e      	ldr	r0, [pc, #56]	; (80035b0 <BSP_SDRAM_MspInit+0x1e8>)
 8003576:	f001 fd31 	bl	8004fdc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800357a:	2200      	movs	r2, #0
 800357c:	210f      	movs	r1, #15
 800357e:	2038      	movs	r0, #56	; 0x38
 8003580:	f001 fc22 	bl	8004dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003584:	2038      	movs	r0, #56	; 0x38
 8003586:	f001 fc3b 	bl	8004e00 <HAL_NVIC_EnableIRQ>
}
 800358a:	bf00      	nop
 800358c:	3740      	adds	r7, #64	; 0x40
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40023800 	.word	0x40023800
 8003598:	40020800 	.word	0x40020800
 800359c:	40020c00 	.word	0x40020c00
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40021400 	.word	0x40021400
 80035a8:	40021800 	.word	0x40021800
 80035ac:	40021c00 	.word	0x40021c00
 80035b0:	20000bd0 	.word	0x20000bd0
 80035b4:	40026410 	.word	0x40026410

080035b8 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	460a      	mov	r2, r1
 80035c2:	80fb      	strh	r3, [r7, #6]
 80035c4:	4613      	mov	r3, r2
 80035c6:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80035cc:	4a14      	ldr	r2, [pc, #80]	; (8003620 <BSP_TS_Init+0x68>)
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80035d2:	4a14      	ldr	r2, [pc, #80]	; (8003624 <BSP_TS_Init+0x6c>)
 80035d4:	88bb      	ldrh	r3, [r7, #4]
 80035d6:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80035d8:	4b13      	ldr	r3, [pc, #76]	; (8003628 <BSP_TS_Init+0x70>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2070      	movs	r0, #112	; 0x70
 80035de:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80035e0:	4b11      	ldr	r3, [pc, #68]	; (8003628 <BSP_TS_Init+0x70>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2070      	movs	r0, #112	; 0x70
 80035e6:	4798      	blx	r3
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b51      	cmp	r3, #81	; 0x51
 80035ec:	d111      	bne.n	8003612 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80035ee:	4b0f      	ldr	r3, [pc, #60]	; (800362c <BSP_TS_Init+0x74>)
 80035f0:	4a0d      	ldr	r2, [pc, #52]	; (8003628 <BSP_TS_Init+0x70>)
 80035f2:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80035f4:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <BSP_TS_Init+0x78>)
 80035f6:	2270      	movs	r2, #112	; 0x70
 80035f8:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80035fa:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <BSP_TS_Init+0x7c>)
 80035fc:	2208      	movs	r2, #8
 80035fe:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003600:	4b0a      	ldr	r3, [pc, #40]	; (800362c <BSP_TS_Init+0x74>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <BSP_TS_Init+0x78>)
 8003608:	7812      	ldrb	r2, [r2, #0]
 800360a:	b292      	uxth	r2, r2
 800360c:	4610      	mov	r0, r2
 800360e:	4798      	blx	r3
 8003610:	e001      	b.n	8003616 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003612:	2303      	movs	r3, #3
 8003614:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003616:	7bfb      	ldrb	r3, [r7, #15]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20000c34 	.word	0x20000c34
 8003624:	20000c36 	.word	0x20000c36
 8003628:	20000000 	.word	0x20000000
 800362c:	20000c30 	.word	0x20000c30
 8003630:	20000c39 	.word	0x20000c39
 8003634:	20000c38 	.word	0x20000c38

08003638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800363e:	4b11      	ldr	r3, [pc, #68]	; (8003684 <HAL_MspInit+0x4c>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	4a10      	ldr	r2, [pc, #64]	; (8003684 <HAL_MspInit+0x4c>)
 8003644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003648:	6413      	str	r3, [r2, #64]	; 0x40
 800364a:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <HAL_MspInit+0x4c>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_MspInit+0x4c>)
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <HAL_MspInit+0x4c>)
 800365c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003660:	6453      	str	r3, [r2, #68]	; 0x44
 8003662:	4b08      	ldr	r3, [pc, #32]	; (8003684 <HAL_MspInit+0x4c>)
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800366e:	2200      	movs	r2, #0
 8003670:	210f      	movs	r1, #15
 8003672:	f06f 0001 	mvn.w	r0, #1
 8003676:	f001 fba7 	bl	8004dc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800

08003688 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08c      	sub	sp, #48	; 0x30
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003690:	f107 031c 	add.w	r3, r7, #28
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2a      	ldr	r2, [pc, #168]	; (8003750 <HAL_ADC_MspInit+0xc8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d124      	bne.n	80036f4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036aa:	4b2a      	ldr	r3, [pc, #168]	; (8003754 <HAL_ADC_MspInit+0xcc>)
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	4a29      	ldr	r2, [pc, #164]	; (8003754 <HAL_ADC_MspInit+0xcc>)
 80036b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b4:	6453      	str	r3, [r2, #68]	; 0x44
 80036b6:	4b27      	ldr	r3, [pc, #156]	; (8003754 <HAL_ADC_MspInit+0xcc>)
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c2:	4b24      	ldr	r3, [pc, #144]	; (8003754 <HAL_ADC_MspInit+0xcc>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	4a23      	ldr	r2, [pc, #140]	; (8003754 <HAL_ADC_MspInit+0xcc>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6313      	str	r3, [r2, #48]	; 0x30
 80036ce:	4b21      	ldr	r3, [pc, #132]	; (8003754 <HAL_ADC_MspInit+0xcc>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036da:	2301      	movs	r3, #1
 80036dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036de:	2303      	movs	r3, #3
 80036e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e6:	f107 031c 	add.w	r3, r7, #28
 80036ea:	4619      	mov	r1, r3
 80036ec:	481a      	ldr	r0, [pc, #104]	; (8003758 <HAL_ADC_MspInit+0xd0>)
 80036ee:	f002 f9cf 	bl	8005a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80036f2:	e029      	b.n	8003748 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a18      	ldr	r2, [pc, #96]	; (800375c <HAL_ADC_MspInit+0xd4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d124      	bne.n	8003748 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <HAL_ADC_MspInit+0xcc>)
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	4a14      	ldr	r2, [pc, #80]	; (8003754 <HAL_ADC_MspInit+0xcc>)
 8003704:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003708:	6453      	str	r3, [r2, #68]	; 0x44
 800370a:	4b12      	ldr	r3, [pc, #72]	; (8003754 <HAL_ADC_MspInit+0xcc>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003716:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <HAL_ADC_MspInit+0xcc>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	4a0e      	ldr	r2, [pc, #56]	; (8003754 <HAL_ADC_MspInit+0xcc>)
 800371c:	f043 0320 	orr.w	r3, r3, #32
 8003720:	6313      	str	r3, [r2, #48]	; 0x30
 8003722:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <HAL_ADC_MspInit+0xcc>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 800372e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003734:	2303      	movs	r3, #3
 8003736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800373c:	f107 031c 	add.w	r3, r7, #28
 8003740:	4619      	mov	r1, r3
 8003742:	4807      	ldr	r0, [pc, #28]	; (8003760 <HAL_ADC_MspInit+0xd8>)
 8003744:	f002 f9a4 	bl	8005a90 <HAL_GPIO_Init>
}
 8003748:	bf00      	nop
 800374a:	3730      	adds	r7, #48	; 0x30
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40012000 	.word	0x40012000
 8003754:	40023800 	.word	0x40023800
 8003758:	40020000 	.word	0x40020000
 800375c:	40012200 	.word	0x40012200
 8003760:	40021400 	.word	0x40021400

08003764 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	; 0x28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a19      	ldr	r2, [pc, #100]	; (80037e8 <HAL_DAC_MspInit+0x84>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d12b      	bne.n	80037de <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003786:	4b19      	ldr	r3, [pc, #100]	; (80037ec <HAL_DAC_MspInit+0x88>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	4a18      	ldr	r2, [pc, #96]	; (80037ec <HAL_DAC_MspInit+0x88>)
 800378c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003790:	6413      	str	r3, [r2, #64]	; 0x40
 8003792:	4b16      	ldr	r3, [pc, #88]	; (80037ec <HAL_DAC_MspInit+0x88>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800379e:	4b13      	ldr	r3, [pc, #76]	; (80037ec <HAL_DAC_MspInit+0x88>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	4a12      	ldr	r2, [pc, #72]	; (80037ec <HAL_DAC_MspInit+0x88>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	6313      	str	r3, [r2, #48]	; 0x30
 80037aa:	4b10      	ldr	r3, [pc, #64]	; (80037ec <HAL_DAC_MspInit+0x88>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80037b6:	2310      	movs	r3, #16
 80037b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037ba:	2303      	movs	r3, #3
 80037bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c2:	f107 0314 	add.w	r3, r7, #20
 80037c6:	4619      	mov	r1, r3
 80037c8:	4809      	ldr	r0, [pc, #36]	; (80037f0 <HAL_DAC_MspInit+0x8c>)
 80037ca:	f002 f961 	bl	8005a90 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80037ce:	2200      	movs	r2, #0
 80037d0:	210f      	movs	r1, #15
 80037d2:	2036      	movs	r0, #54	; 0x36
 80037d4:	f001 faf8 	bl	8004dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80037d8:	2036      	movs	r0, #54	; 0x36
 80037da:	f001 fb11 	bl	8004e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80037de:	bf00      	nop
 80037e0:	3728      	adds	r7, #40	; 0x28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40007400 	.word	0x40007400
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40020000 	.word	0x40020000

080037f4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a0d      	ldr	r2, [pc, #52]	; (8003838 <HAL_DMA2D_MspInit+0x44>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d113      	bne.n	800382e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003806:	4b0d      	ldr	r3, [pc, #52]	; (800383c <HAL_DMA2D_MspInit+0x48>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	4a0c      	ldr	r2, [pc, #48]	; (800383c <HAL_DMA2D_MspInit+0x48>)
 800380c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003810:	6313      	str	r3, [r2, #48]	; 0x30
 8003812:	4b0a      	ldr	r3, [pc, #40]	; (800383c <HAL_DMA2D_MspInit+0x48>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800381e:	2200      	movs	r2, #0
 8003820:	2105      	movs	r1, #5
 8003822:	205a      	movs	r0, #90	; 0x5a
 8003824:	f001 fad0 	bl	8004dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003828:	205a      	movs	r0, #90	; 0x5a
 800382a:	f001 fae9 	bl	8004e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	4002b000 	.word	0x4002b000
 800383c:	40023800 	.word	0x40023800

08003840 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b0ac      	sub	sp, #176	; 0xb0
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003848:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	605a      	str	r2, [r3, #4]
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	60da      	str	r2, [r3, #12]
 8003856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003858:	f107 0318 	add.w	r3, r7, #24
 800385c:	2284      	movs	r2, #132	; 0x84
 800385e:	2100      	movs	r1, #0
 8003860:	4618      	mov	r0, r3
 8003862:	f009 faa9 	bl	800cdb8 <memset>
  if(hi2c->Instance==I2C1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a44      	ldr	r2, [pc, #272]	; (800397c <HAL_I2C_MspInit+0x13c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d13d      	bne.n	80038ec <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003870:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003874:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003876:	2300      	movs	r3, #0
 8003878:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800387a:	f107 0318 	add.w	r3, r7, #24
 800387e:	4618      	mov	r0, r3
 8003880:	f004 fad6 	bl	8007e30 <HAL_RCCEx_PeriphCLKConfig>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800388a:	f7fe fd57 	bl	800233c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800388e:	4b3c      	ldr	r3, [pc, #240]	; (8003980 <HAL_I2C_MspInit+0x140>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	4a3b      	ldr	r2, [pc, #236]	; (8003980 <HAL_I2C_MspInit+0x140>)
 8003894:	f043 0302 	orr.w	r3, r3, #2
 8003898:	6313      	str	r3, [r2, #48]	; 0x30
 800389a:	4b39      	ldr	r3, [pc, #228]	; (8003980 <HAL_I2C_MspInit+0x140>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038ae:	2312      	movs	r3, #18
 80038b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ba:	2303      	movs	r3, #3
 80038bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038c0:	2304      	movs	r3, #4
 80038c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80038ca:	4619      	mov	r1, r3
 80038cc:	482d      	ldr	r0, [pc, #180]	; (8003984 <HAL_I2C_MspInit+0x144>)
 80038ce:	f002 f8df 	bl	8005a90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038d2:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <HAL_I2C_MspInit+0x140>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	4a2a      	ldr	r2, [pc, #168]	; (8003980 <HAL_I2C_MspInit+0x140>)
 80038d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038dc:	6413      	str	r3, [r2, #64]	; 0x40
 80038de:	4b28      	ldr	r3, [pc, #160]	; (8003980 <HAL_I2C_MspInit+0x140>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80038ea:	e042      	b.n	8003972 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a25      	ldr	r2, [pc, #148]	; (8003988 <HAL_I2C_MspInit+0x148>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d13d      	bne.n	8003972 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80038f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003902:	f107 0318 	add.w	r3, r7, #24
 8003906:	4618      	mov	r0, r3
 8003908:	f004 fa92 	bl	8007e30 <HAL_RCCEx_PeriphCLKConfig>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8003912:	f7fe fd13 	bl	800233c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003916:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <HAL_I2C_MspInit+0x140>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	4a19      	ldr	r2, [pc, #100]	; (8003980 <HAL_I2C_MspInit+0x140>)
 800391c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003920:	6313      	str	r3, [r2, #48]	; 0x30
 8003922:	4b17      	ldr	r3, [pc, #92]	; (8003980 <HAL_I2C_MspInit+0x140>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800392e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003932:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003936:	2312      	movs	r3, #18
 8003938:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800393c:	2301      	movs	r3, #1
 800393e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003942:	2303      	movs	r3, #3
 8003944:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003948:	2304      	movs	r3, #4
 800394a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800394e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003952:	4619      	mov	r1, r3
 8003954:	480d      	ldr	r0, [pc, #52]	; (800398c <HAL_I2C_MspInit+0x14c>)
 8003956:	f002 f89b 	bl	8005a90 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800395a:	4b09      	ldr	r3, [pc, #36]	; (8003980 <HAL_I2C_MspInit+0x140>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	4a08      	ldr	r2, [pc, #32]	; (8003980 <HAL_I2C_MspInit+0x140>)
 8003960:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003964:	6413      	str	r3, [r2, #64]	; 0x40
 8003966:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_I2C_MspInit+0x140>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]
}
 8003972:	bf00      	nop
 8003974:	37b0      	adds	r7, #176	; 0xb0
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40005400 	.word	0x40005400
 8003980:	40023800 	.word	0x40023800
 8003984:	40020400 	.word	0x40020400
 8003988:	40005c00 	.word	0x40005c00
 800398c:	40021c00 	.word	0x40021c00

08003990 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a15      	ldr	r2, [pc, #84]	; (80039f4 <HAL_I2C_MspDeInit+0x64>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d110      	bne.n	80039c4 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80039a2:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <HAL_I2C_MspDeInit+0x68>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	4a14      	ldr	r2, [pc, #80]	; (80039f8 <HAL_I2C_MspDeInit+0x68>)
 80039a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039ac:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80039ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039b2:	4812      	ldr	r0, [pc, #72]	; (80039fc <HAL_I2C_MspDeInit+0x6c>)
 80039b4:	f002 fa18 	bl	8005de8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80039b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039bc:	480f      	ldr	r0, [pc, #60]	; (80039fc <HAL_I2C_MspDeInit+0x6c>)
 80039be:	f002 fa13 	bl	8005de8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80039c2:	e013      	b.n	80039ec <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a0d      	ldr	r2, [pc, #52]	; (8003a00 <HAL_I2C_MspDeInit+0x70>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d10e      	bne.n	80039ec <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80039ce:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <HAL_I2C_MspDeInit+0x68>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <HAL_I2C_MspDeInit+0x68>)
 80039d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039d8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80039da:	2180      	movs	r1, #128	; 0x80
 80039dc:	4809      	ldr	r0, [pc, #36]	; (8003a04 <HAL_I2C_MspDeInit+0x74>)
 80039de:	f002 fa03 	bl	8005de8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80039e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039e6:	4807      	ldr	r0, [pc, #28]	; (8003a04 <HAL_I2C_MspDeInit+0x74>)
 80039e8:	f002 f9fe 	bl	8005de8 <HAL_GPIO_DeInit>
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40005400 	.word	0x40005400
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40020400 	.word	0x40020400
 8003a00:	40005c00 	.word	0x40005c00
 8003a04:	40021c00 	.word	0x40021c00

08003a08 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b0ae      	sub	sp, #184	; 0xb8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	60da      	str	r2, [r3, #12]
 8003a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a20:	f107 0320 	add.w	r3, r7, #32
 8003a24:	2284      	movs	r2, #132	; 0x84
 8003a26:	2100      	movs	r1, #0
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f009 f9c5 	bl	800cdb8 <memset>
  if(hltdc->Instance==LTDC)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a6f      	ldr	r2, [pc, #444]	; (8003bf0 <HAL_LTDC_MspInit+0x1e8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	f040 80d6 	bne.w	8003be6 <HAL_LTDC_MspInit+0x1de>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8003a3e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003a42:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8003a44:	2305      	movs	r3, #5
 8003a46:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003a50:	2301      	movs	r3, #1
 8003a52:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003a54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a58:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a5a:	f107 0320 	add.w	r3, r7, #32
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f004 f9e6 	bl	8007e30 <HAL_RCCEx_PeriphCLKConfig>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8003a6a:	f7fe fc67 	bl	800233c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003a6e:	4b61      	ldr	r3, [pc, #388]	; (8003bf4 <HAL_LTDC_MspInit+0x1ec>)
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	4a60      	ldr	r2, [pc, #384]	; (8003bf4 <HAL_LTDC_MspInit+0x1ec>)
 8003a74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a78:	6453      	str	r3, [r2, #68]	; 0x44
 8003a7a:	4b5e      	ldr	r3, [pc, #376]	; (8003bf4 <HAL_LTDC_MspInit+0x1ec>)
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a82:	61fb      	str	r3, [r7, #28]
 8003a84:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a86:	4b5b      	ldr	r3, [pc, #364]	; (8003bf4 <HAL_LTDC_MspInit+0x1ec>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	4a5a      	ldr	r2, [pc, #360]	; (8003bf4 <HAL_LTDC_MspInit+0x1ec>)
 8003a8c:	f043 0310 	orr.w	r3, r3, #16
 8003a90:	6313      	str	r3, [r2, #48]	; 0x30
 8003a92:	4b58      	ldr	r3, [pc, #352]	; (8003bf4 <HAL_LTDC_MspInit+0x1ec>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003a9e:	4b55      	ldr	r3, [pc, #340]	; (8003bf4 <HAL_LTDC_MspInit+0x1ec>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	4a54      	ldr	r2, [pc, #336]	; (8003bf4 <HAL_LTDC_MspInit+0x1ec>)
 8003aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aaa:	4b52      	ldr	r3, [pc, #328]	; (8003bf4 <HAL_LTDC_MspInit+0x1ec>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003ab6:	4b4f      	ldr	r3, [pc, #316]	; (8003bf4 <HAL_LTDC_MspInit+0x1ec>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	4a4e      	ldr	r2, [pc, #312]	; (8003bf4 <HAL_LTDC_MspInit+0x1ec>)
 8003abc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac2:	4b4c      	ldr	r3, [pc, #304]	; (8003bf4 <HAL_LTDC_MspInit+0x1ec>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ace:	4b49      	ldr	r3, [pc, #292]	; (8003bf4 <HAL_LTDC_MspInit+0x1ec>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	4a48      	ldr	r2, [pc, #288]	; (8003bf4 <HAL_LTDC_MspInit+0x1ec>)
 8003ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8003ada:	4b46      	ldr	r3, [pc, #280]	; (8003bf4 <HAL_LTDC_MspInit+0x1ec>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003ae6:	4b43      	ldr	r3, [pc, #268]	; (8003bf4 <HAL_LTDC_MspInit+0x1ec>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	4a42      	ldr	r2, [pc, #264]	; (8003bf4 <HAL_LTDC_MspInit+0x1ec>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af0:	6313      	str	r3, [r2, #48]	; 0x30
 8003af2:	4b40      	ldr	r3, [pc, #256]	; (8003bf4 <HAL_LTDC_MspInit+0x1ec>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afa:	60bb      	str	r3, [r7, #8]
 8003afc:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003afe:	2310      	movs	r3, #16
 8003b00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b04:	2302      	movs	r3, #2
 8003b06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b10:	2300      	movs	r3, #0
 8003b12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b16:	230e      	movs	r3, #14
 8003b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003b1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003b20:	4619      	mov	r1, r3
 8003b22:	4835      	ldr	r0, [pc, #212]	; (8003bf8 <HAL_LTDC_MspInit+0x1f0>)
 8003b24:	f001 ffb4 	bl	8005a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003b28:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b30:	2302      	movs	r3, #2
 8003b32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b42:	230e      	movs	r3, #14
 8003b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003b48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	482b      	ldr	r0, [pc, #172]	; (8003bfc <HAL_LTDC_MspInit+0x1f4>)
 8003b50:	f001 ff9e 	bl	8005a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003b54:	23f7      	movs	r3, #247	; 0xf7
 8003b56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b66:	2300      	movs	r3, #0
 8003b68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b6c:	230e      	movs	r3, #14
 8003b6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003b72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003b76:	4619      	mov	r1, r3
 8003b78:	4821      	ldr	r0, [pc, #132]	; (8003c00 <HAL_LTDC_MspInit+0x1f8>)
 8003b7a:	f001 ff89 	bl	8005a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b86:	2302      	movs	r3, #2
 8003b88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b92:	2300      	movs	r3, #0
 8003b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003b98:	2309      	movs	r3, #9
 8003b9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003b9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4817      	ldr	r0, [pc, #92]	; (8003c04 <HAL_LTDC_MspInit+0x1fc>)
 8003ba6:	f001 ff73 	bl	8005a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003baa:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003bae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003bc4:	230e      	movs	r3, #14
 8003bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003bca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003bce:	4619      	mov	r1, r3
 8003bd0:	480d      	ldr	r0, [pc, #52]	; (8003c08 <HAL_LTDC_MspInit+0x200>)
 8003bd2:	f001 ff5d 	bl	8005a90 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2105      	movs	r1, #5
 8003bda:	2058      	movs	r0, #88	; 0x58
 8003bdc:	f001 f8f4 	bl	8004dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003be0:	2058      	movs	r0, #88	; 0x58
 8003be2:	f001 f90d 	bl	8004e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003be6:	bf00      	nop
 8003be8:	37b8      	adds	r7, #184	; 0xb8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40016800 	.word	0x40016800
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40022400 	.word	0x40022400
 8003c00:	40022800 	.word	0x40022800
 8003c04:	40021800 	.word	0x40021800
 8003c08:	40022000 	.word	0x40022000

08003c0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b0a4      	sub	sp, #144	; 0x90
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c14:	f107 030c 	add.w	r3, r7, #12
 8003c18:	2284      	movs	r2, #132	; 0x84
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f009 f8cb 	bl	800cdb8 <memset>
  if(hrtc->Instance==RTC)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a0e      	ldr	r2, [pc, #56]	; (8003c60 <HAL_RTC_MspInit+0x54>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d114      	bne.n	8003c56 <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c34:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c36:	f107 030c 	add.w	r3, r7, #12
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f004 f8f8 	bl	8007e30 <HAL_RCCEx_PeriphCLKConfig>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003c46:	f7fe fb79 	bl	800233c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_RTC_MspInit+0x58>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	4a05      	ldr	r2, [pc, #20]	; (8003c64 <HAL_RTC_MspInit+0x58>)
 8003c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c54:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003c56:	bf00      	nop
 8003c58:	3790      	adds	r7, #144	; 0x90
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40002800 	.word	0x40002800
 8003c64:	40023800 	.word	0x40023800

08003c68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08a      	sub	sp, #40	; 0x28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c70:	f107 0314 	add.w	r3, r7, #20
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a25      	ldr	r2, [pc, #148]	; (8003d1c <HAL_SPI_MspInit+0xb4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d144      	bne.n	8003d14 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c8a:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <HAL_SPI_MspInit+0xb8>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	4a24      	ldr	r2, [pc, #144]	; (8003d20 <HAL_SPI_MspInit+0xb8>)
 8003c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c94:	6413      	str	r3, [r2, #64]	; 0x40
 8003c96:	4b22      	ldr	r3, [pc, #136]	; (8003d20 <HAL_SPI_MspInit+0xb8>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003ca2:	4b1f      	ldr	r3, [pc, #124]	; (8003d20 <HAL_SPI_MspInit+0xb8>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <HAL_SPI_MspInit+0xb8>)
 8003ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cac:	6313      	str	r3, [r2, #48]	; 0x30
 8003cae:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <HAL_SPI_MspInit+0xb8>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cba:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <HAL_SPI_MspInit+0xb8>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a18      	ldr	r2, [pc, #96]	; (8003d20 <HAL_SPI_MspInit+0xb8>)
 8003cc0:	f043 0302 	orr.w	r3, r3, #2
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b16      	ldr	r3, [pc, #88]	; (8003d20 <HAL_SPI_MspInit+0xb8>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	60bb      	str	r3, [r7, #8]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ce2:	2305      	movs	r3, #5
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003ce6:	f107 0314 	add.w	r3, r7, #20
 8003cea:	4619      	mov	r1, r3
 8003cec:	480d      	ldr	r0, [pc, #52]	; (8003d24 <HAL_SPI_MspInit+0xbc>)
 8003cee:	f001 fecf 	bl	8005a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003cf2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d00:	2300      	movs	r3, #0
 8003d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003d04:	2305      	movs	r3, #5
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d08:	f107 0314 	add.w	r3, r7, #20
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4806      	ldr	r0, [pc, #24]	; (8003d28 <HAL_SPI_MspInit+0xc0>)
 8003d10:	f001 febe 	bl	8005a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003d14:	bf00      	nop
 8003d16:	3728      	adds	r7, #40	; 0x28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40003800 	.word	0x40003800
 8003d20:	40023800 	.word	0x40023800
 8003d24:	40022000 	.word	0x40022000
 8003d28:	40020400 	.word	0x40020400

08003d2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08e      	sub	sp, #56	; 0x38
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	60da      	str	r2, [r3, #12]
 8003d42:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a3b      	ldr	r2, [pc, #236]	; (8003e38 <HAL_TIM_Base_MspInit+0x10c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d10c      	bne.n	8003d68 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d4e:	4b3b      	ldr	r3, [pc, #236]	; (8003e3c <HAL_TIM_Base_MspInit+0x110>)
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	4a3a      	ldr	r2, [pc, #232]	; (8003e3c <HAL_TIM_Base_MspInit+0x110>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	6453      	str	r3, [r2, #68]	; 0x44
 8003d5a:	4b38      	ldr	r3, [pc, #224]	; (8003e3c <HAL_TIM_Base_MspInit+0x110>)
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	623b      	str	r3, [r7, #32]
 8003d64:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003d66:	e062      	b.n	8003e2e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d70:	d10c      	bne.n	8003d8c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d72:	4b32      	ldr	r3, [pc, #200]	; (8003e3c <HAL_TIM_Base_MspInit+0x110>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	4a31      	ldr	r2, [pc, #196]	; (8003e3c <HAL_TIM_Base_MspInit+0x110>)
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d7e:	4b2f      	ldr	r3, [pc, #188]	; (8003e3c <HAL_TIM_Base_MspInit+0x110>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	61fb      	str	r3, [r7, #28]
 8003d88:	69fb      	ldr	r3, [r7, #28]
}
 8003d8a:	e050      	b.n	8003e2e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a2b      	ldr	r2, [pc, #172]	; (8003e40 <HAL_TIM_Base_MspInit+0x114>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d10c      	bne.n	8003db0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d96:	4b29      	ldr	r3, [pc, #164]	; (8003e3c <HAL_TIM_Base_MspInit+0x110>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	4a28      	ldr	r2, [pc, #160]	; (8003e3c <HAL_TIM_Base_MspInit+0x110>)
 8003d9c:	f043 0302 	orr.w	r3, r3, #2
 8003da0:	6413      	str	r3, [r2, #64]	; 0x40
 8003da2:	4b26      	ldr	r3, [pc, #152]	; (8003e3c <HAL_TIM_Base_MspInit+0x110>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	61bb      	str	r3, [r7, #24]
 8003dac:	69bb      	ldr	r3, [r7, #24]
}
 8003dae:	e03e      	b.n	8003e2e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a23      	ldr	r2, [pc, #140]	; (8003e44 <HAL_TIM_Base_MspInit+0x118>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d10c      	bne.n	8003dd4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003dba:	4b20      	ldr	r3, [pc, #128]	; (8003e3c <HAL_TIM_Base_MspInit+0x110>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	4a1f      	ldr	r2, [pc, #124]	; (8003e3c <HAL_TIM_Base_MspInit+0x110>)
 8003dc0:	f043 0308 	orr.w	r3, r3, #8
 8003dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc6:	4b1d      	ldr	r3, [pc, #116]	; (8003e3c <HAL_TIM_Base_MspInit+0x110>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	697b      	ldr	r3, [r7, #20]
}
 8003dd2:	e02c      	b.n	8003e2e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1b      	ldr	r2, [pc, #108]	; (8003e48 <HAL_TIM_Base_MspInit+0x11c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d127      	bne.n	8003e2e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003dde:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <HAL_TIM_Base_MspInit+0x110>)
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	4a16      	ldr	r2, [pc, #88]	; (8003e3c <HAL_TIM_Base_MspInit+0x110>)
 8003de4:	f043 0302 	orr.w	r3, r3, #2
 8003de8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dea:	4b14      	ldr	r3, [pc, #80]	; (8003e3c <HAL_TIM_Base_MspInit+0x110>)
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003df6:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <HAL_TIM_Base_MspInit+0x110>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	4a10      	ldr	r2, [pc, #64]	; (8003e3c <HAL_TIM_Base_MspInit+0x110>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e00:	6313      	str	r3, [r2, #48]	; 0x30
 8003e02:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <HAL_TIM_Base_MspInit+0x110>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e0e:	2304      	movs	r3, #4
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e12:	2302      	movs	r3, #2
 8003e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e26:	4619      	mov	r1, r3
 8003e28:	4808      	ldr	r0, [pc, #32]	; (8003e4c <HAL_TIM_Base_MspInit+0x120>)
 8003e2a:	f001 fe31 	bl	8005a90 <HAL_GPIO_Init>
}
 8003e2e:	bf00      	nop
 8003e30:	3738      	adds	r7, #56	; 0x38
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40010000 	.word	0x40010000
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40000400 	.word	0x40000400
 8003e44:	40000c00 	.word	0x40000c00
 8003e48:	40010400 	.word	0x40010400
 8003e4c:	40022000 	.word	0x40022000

08003e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b0b0      	sub	sp, #192	; 0xc0
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e58:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	605a      	str	r2, [r3, #4]
 8003e62:	609a      	str	r2, [r3, #8]
 8003e64:	60da      	str	r2, [r3, #12]
 8003e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e6c:	2284      	movs	r2, #132	; 0x84
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4618      	mov	r0, r3
 8003e72:	f008 ffa1 	bl	800cdb8 <memset>
  if(huart->Instance==UART7)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a75      	ldr	r2, [pc, #468]	; (8004050 <HAL_UART_MspInit+0x200>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d13d      	bne.n	8003efc <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e84:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8003e86:	2300      	movs	r3, #0
 8003e88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e90:	4618      	mov	r0, r3
 8003e92:	f003 ffcd 	bl	8007e30 <HAL_RCCEx_PeriphCLKConfig>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003e9c:	f7fe fa4e 	bl	800233c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003ea0:	4b6c      	ldr	r3, [pc, #432]	; (8004054 <HAL_UART_MspInit+0x204>)
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	4a6b      	ldr	r2, [pc, #428]	; (8004054 <HAL_UART_MspInit+0x204>)
 8003ea6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8003eac:	4b69      	ldr	r3, [pc, #420]	; (8004054 <HAL_UART_MspInit+0x204>)
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003eb8:	4b66      	ldr	r3, [pc, #408]	; (8004054 <HAL_UART_MspInit+0x204>)
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	4a65      	ldr	r2, [pc, #404]	; (8004054 <HAL_UART_MspInit+0x204>)
 8003ebe:	f043 0320 	orr.w	r3, r3, #32
 8003ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec4:	4b63      	ldr	r3, [pc, #396]	; (8004054 <HAL_UART_MspInit+0x204>)
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	623b      	str	r3, [r7, #32]
 8003ece:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003ed0:	23c0      	movs	r3, #192	; 0xc0
 8003ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003ee8:	2308      	movs	r3, #8
 8003eea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003eee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4858      	ldr	r0, [pc, #352]	; (8004058 <HAL_UART_MspInit+0x208>)
 8003ef6:	f001 fdcb 	bl	8005a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003efa:	e0a4      	b.n	8004046 <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a56      	ldr	r2, [pc, #344]	; (800405c <HAL_UART_MspInit+0x20c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d15d      	bne.n	8003fc2 <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003f06:	2340      	movs	r3, #64	; 0x40
 8003f08:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f12:	4618      	mov	r0, r3
 8003f14:	f003 ff8c 	bl	8007e30 <HAL_RCCEx_PeriphCLKConfig>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8003f1e:	f7fe fa0d 	bl	800233c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f22:	4b4c      	ldr	r3, [pc, #304]	; (8004054 <HAL_UART_MspInit+0x204>)
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	4a4b      	ldr	r2, [pc, #300]	; (8004054 <HAL_UART_MspInit+0x204>)
 8003f28:	f043 0310 	orr.w	r3, r3, #16
 8003f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f2e:	4b49      	ldr	r3, [pc, #292]	; (8004054 <HAL_UART_MspInit+0x204>)
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	61fb      	str	r3, [r7, #28]
 8003f38:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f3a:	4b46      	ldr	r3, [pc, #280]	; (8004054 <HAL_UART_MspInit+0x204>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	4a45      	ldr	r2, [pc, #276]	; (8004054 <HAL_UART_MspInit+0x204>)
 8003f40:	f043 0302 	orr.w	r3, r3, #2
 8003f44:	6313      	str	r3, [r2, #48]	; 0x30
 8003f46:	4b43      	ldr	r3, [pc, #268]	; (8004054 <HAL_UART_MspInit+0x204>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f52:	4b40      	ldr	r3, [pc, #256]	; (8004054 <HAL_UART_MspInit+0x204>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	4a3f      	ldr	r2, [pc, #252]	; (8004054 <HAL_UART_MspInit+0x204>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5e:	4b3d      	ldr	r3, [pc, #244]	; (8004054 <HAL_UART_MspInit+0x204>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003f6a:	2380      	movs	r3, #128	; 0x80
 8003f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f70:	2302      	movs	r3, #2
 8003f72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f82:	2307      	movs	r3, #7
 8003f84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003f88:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4834      	ldr	r0, [pc, #208]	; (8004060 <HAL_UART_MspInit+0x210>)
 8003f90:	f001 fd7e 	bl	8005a90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fae:	2307      	movs	r3, #7
 8003fb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003fb4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003fb8:	4619      	mov	r1, r3
 8003fba:	482a      	ldr	r0, [pc, #168]	; (8004064 <HAL_UART_MspInit+0x214>)
 8003fbc:	f001 fd68 	bl	8005a90 <HAL_GPIO_Init>
}
 8003fc0:	e041      	b.n	8004046 <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART6)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a28      	ldr	r2, [pc, #160]	; (8004068 <HAL_UART_MspInit+0x218>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d13c      	bne.n	8004046 <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003fcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f003 ff27 	bl	8007e30 <HAL_RCCEx_PeriphCLKConfig>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8003fe8:	f7fe f9a8 	bl	800233c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003fec:	4b19      	ldr	r3, [pc, #100]	; (8004054 <HAL_UART_MspInit+0x204>)
 8003fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff0:	4a18      	ldr	r2, [pc, #96]	; (8004054 <HAL_UART_MspInit+0x204>)
 8003ff2:	f043 0320 	orr.w	r3, r3, #32
 8003ff6:	6453      	str	r3, [r2, #68]	; 0x44
 8003ff8:	4b16      	ldr	r3, [pc, #88]	; (8004054 <HAL_UART_MspInit+0x204>)
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004004:	4b13      	ldr	r3, [pc, #76]	; (8004054 <HAL_UART_MspInit+0x204>)
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	4a12      	ldr	r2, [pc, #72]	; (8004054 <HAL_UART_MspInit+0x204>)
 800400a:	f043 0304 	orr.w	r3, r3, #4
 800400e:	6313      	str	r3, [r2, #48]	; 0x30
 8004010:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_UART_MspInit+0x204>)
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800401c:	23c0      	movs	r3, #192	; 0xc0
 800401e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004022:	2302      	movs	r3, #2
 8004024:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004028:	2300      	movs	r3, #0
 800402a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800402e:	2303      	movs	r3, #3
 8004030:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004034:	2308      	movs	r3, #8
 8004036:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800403a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800403e:	4619      	mov	r1, r3
 8004040:	480a      	ldr	r0, [pc, #40]	; (800406c <HAL_UART_MspInit+0x21c>)
 8004042:	f001 fd25 	bl	8005a90 <HAL_GPIO_Init>
}
 8004046:	bf00      	nop
 8004048:	37c0      	adds	r7, #192	; 0xc0
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40007800 	.word	0x40007800
 8004054:	40023800 	.word	0x40023800
 8004058:	40021400 	.word	0x40021400
 800405c:	40011000 	.word	0x40011000
 8004060:	40020400 	.word	0x40020400
 8004064:	40020000 	.word	0x40020000
 8004068:	40011400 	.word	0x40011400
 800406c:	40020800 	.word	0x40020800

08004070 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004076:	1d3b      	adds	r3, r7, #4
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	605a      	str	r2, [r3, #4]
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004084:	4b3a      	ldr	r3, [pc, #232]	; (8004170 <HAL_FMC_MspInit+0x100>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d16d      	bne.n	8004168 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800408c:	4b38      	ldr	r3, [pc, #224]	; (8004170 <HAL_FMC_MspInit+0x100>)
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004092:	4b38      	ldr	r3, [pc, #224]	; (8004174 <HAL_FMC_MspInit+0x104>)
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	4a37      	ldr	r2, [pc, #220]	; (8004174 <HAL_FMC_MspInit+0x104>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	6393      	str	r3, [r2, #56]	; 0x38
 800409e:	4b35      	ldr	r3, [pc, #212]	; (8004174 <HAL_FMC_MspInit+0x104>)
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80040aa:	f64f 7383 	movw	r3, #65411	; 0xff83
 80040ae:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b0:	2302      	movs	r3, #2
 80040b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b8:	2303      	movs	r3, #3
 80040ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040bc:	230c      	movs	r3, #12
 80040be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040c0:	1d3b      	adds	r3, r7, #4
 80040c2:	4619      	mov	r1, r3
 80040c4:	482c      	ldr	r0, [pc, #176]	; (8004178 <HAL_FMC_MspInit+0x108>)
 80040c6:	f001 fce3 	bl	8005a90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80040ca:	f248 1333 	movw	r3, #33075	; 0x8133
 80040ce:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d0:	2302      	movs	r3, #2
 80040d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d8:	2303      	movs	r3, #3
 80040da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040dc:	230c      	movs	r3, #12
 80040de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040e0:	1d3b      	adds	r3, r7, #4
 80040e2:	4619      	mov	r1, r3
 80040e4:	4825      	ldr	r0, [pc, #148]	; (800417c <HAL_FMC_MspInit+0x10c>)
 80040e6:	f001 fcd3 	bl	8005a90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80040ea:	f24c 7303 	movw	r3, #50947	; 0xc703
 80040ee:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f0:	2302      	movs	r3, #2
 80040f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f8:	2303      	movs	r3, #3
 80040fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040fc:	230c      	movs	r3, #12
 80040fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004100:	1d3b      	adds	r3, r7, #4
 8004102:	4619      	mov	r1, r3
 8004104:	481e      	ldr	r0, [pc, #120]	; (8004180 <HAL_FMC_MspInit+0x110>)
 8004106:	f001 fcc3 	bl	8005a90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800410a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800410e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004110:	2302      	movs	r3, #2
 8004112:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004118:	2303      	movs	r3, #3
 800411a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800411c:	230c      	movs	r3, #12
 800411e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004120:	1d3b      	adds	r3, r7, #4
 8004122:	4619      	mov	r1, r3
 8004124:	4817      	ldr	r0, [pc, #92]	; (8004184 <HAL_FMC_MspInit+0x114>)
 8004126:	f001 fcb3 	bl	8005a90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800412a:	2328      	movs	r3, #40	; 0x28
 800412c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412e:	2302      	movs	r3, #2
 8004130:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004136:	2303      	movs	r3, #3
 8004138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800413a:	230c      	movs	r3, #12
 800413c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800413e:	1d3b      	adds	r3, r7, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4811      	ldr	r0, [pc, #68]	; (8004188 <HAL_FMC_MspInit+0x118>)
 8004144:	f001 fca4 	bl	8005a90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8004148:	2308      	movs	r3, #8
 800414a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414c:	2302      	movs	r3, #2
 800414e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004154:	2303      	movs	r3, #3
 8004156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004158:	230c      	movs	r3, #12
 800415a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800415c:	1d3b      	adds	r3, r7, #4
 800415e:	4619      	mov	r1, r3
 8004160:	480a      	ldr	r0, [pc, #40]	; (800418c <HAL_FMC_MspInit+0x11c>)
 8004162:	f001 fc95 	bl	8005a90 <HAL_GPIO_Init>
 8004166:	e000      	b.n	800416a <HAL_FMC_MspInit+0xfa>
    return;
 8004168:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20000c3c 	.word	0x20000c3c
 8004174:	40023800 	.word	0x40023800
 8004178:	40021000 	.word	0x40021000
 800417c:	40021800 	.word	0x40021800
 8004180:	40020c00 	.word	0x40020c00
 8004184:	40021400 	.word	0x40021400
 8004188:	40021c00 	.word	0x40021c00
 800418c:	40020800 	.word	0x40020800

08004190 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004198:	f7ff ff6a 	bl	8004070 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800419c:	bf00      	nop
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08c      	sub	sp, #48	; 0x30
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80041b4:	2200      	movs	r2, #0
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	2036      	movs	r0, #54	; 0x36
 80041ba:	f000 fe05 	bl	8004dc8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80041be:	2036      	movs	r0, #54	; 0x36
 80041c0:	f000 fe1e 	bl	8004e00 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80041c4:	4b1f      	ldr	r3, [pc, #124]	; (8004244 <HAL_InitTick+0xa0>)
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	4a1e      	ldr	r2, [pc, #120]	; (8004244 <HAL_InitTick+0xa0>)
 80041ca:	f043 0310 	orr.w	r3, r3, #16
 80041ce:	6413      	str	r3, [r2, #64]	; 0x40
 80041d0:	4b1c      	ldr	r3, [pc, #112]	; (8004244 <HAL_InitTick+0xa0>)
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80041dc:	f107 0210 	add.w	r2, r7, #16
 80041e0:	f107 0314 	add.w	r3, r7, #20
 80041e4:	4611      	mov	r1, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f003 fdf0 	bl	8007dcc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80041ec:	f003 fdc6 	bl	8007d7c <HAL_RCC_GetPCLK1Freq>
 80041f0:	4603      	mov	r3, r0
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80041f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f8:	4a13      	ldr	r2, [pc, #76]	; (8004248 <HAL_InitTick+0xa4>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	0c9b      	lsrs	r3, r3, #18
 8004200:	3b01      	subs	r3, #1
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004204:	4b11      	ldr	r3, [pc, #68]	; (800424c <HAL_InitTick+0xa8>)
 8004206:	4a12      	ldr	r2, [pc, #72]	; (8004250 <HAL_InitTick+0xac>)
 8004208:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800420a:	4b10      	ldr	r3, [pc, #64]	; (800424c <HAL_InitTick+0xa8>)
 800420c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004210:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004212:	4a0e      	ldr	r2, [pc, #56]	; (800424c <HAL_InitTick+0xa8>)
 8004214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004216:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <HAL_InitTick+0xa8>)
 800421a:	2200      	movs	r2, #0
 800421c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800421e:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_InitTick+0xa8>)
 8004220:	2200      	movs	r2, #0
 8004222:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004224:	4809      	ldr	r0, [pc, #36]	; (800424c <HAL_InitTick+0xa8>)
 8004226:	f004 ff07 	bl	8009038 <HAL_TIM_Base_Init>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d104      	bne.n	800423a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004230:	4806      	ldr	r0, [pc, #24]	; (800424c <HAL_InitTick+0xa8>)
 8004232:	f004 ff59 	bl	80090e8 <HAL_TIM_Base_Start_IT>
 8004236:	4603      	mov	r3, r0
 8004238:	e000      	b.n	800423c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
}
 800423c:	4618      	mov	r0, r3
 800423e:	3730      	adds	r7, #48	; 0x30
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40023800 	.word	0x40023800
 8004248:	431bde83 	.word	0x431bde83
 800424c:	20000c40 	.word	0x20000c40
 8004250:	40001000 	.word	0x40001000

08004254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004258:	e7fe      	b.n	8004258 <NMI_Handler+0x4>

0800425a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800425a:	b480      	push	{r7}
 800425c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800425e:	e7fe      	b.n	800425e <HardFault_Handler+0x4>

08004260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004264:	e7fe      	b.n	8004264 <MemManage_Handler+0x4>

08004266 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004266:	b480      	push	{r7}
 8004268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800426a:	e7fe      	b.n	800426a <BusFault_Handler+0x4>

0800426c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004270:	e7fe      	b.n	8004270 <UsageFault_Handler+0x4>

08004272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004272:	b480      	push	{r7}
 8004274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004284:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004288:	f001 feec 	bl	8006064 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800428c:	bf00      	nop
 800428e:	bd80      	pop	{r7, pc}

08004290 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8004294:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <TIM6_DAC_IRQHandler+0x20>)
 8004296:	791b      	ldrb	r3, [r3, #4]
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800429e:	4804      	ldr	r0, [pc, #16]	; (80042b0 <TIM6_DAC_IRQHandler+0x20>)
 80042a0:	f000 fdde 	bl	8004e60 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80042a4:	4803      	ldr	r0, [pc, #12]	; (80042b4 <TIM6_DAC_IRQHandler+0x24>)
 80042a6:	f004 ff97 	bl	80091d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80042aa:	bf00      	nop
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20000418 	.word	0x20000418
 80042b4:	20000c40 	.word	0x20000c40

080042b8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80042bc:	4802      	ldr	r0, [pc, #8]	; (80042c8 <LTDC_IRQHandler+0x10>)
 80042be:	f002 fdf3 	bl	8006ea8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80042c2:	bf00      	nop
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000504 	.word	0x20000504

080042cc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80042d0:	4802      	ldr	r0, [pc, #8]	; (80042dc <DMA2D_IRQHandler+0x10>)
 80042d2:	f001 f99f 	bl	8005614 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80042d6:	bf00      	nop
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	2000042c 	.word	0x2000042c

080042e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042e8:	4a14      	ldr	r2, [pc, #80]	; (800433c <_sbrk+0x5c>)
 80042ea:	4b15      	ldr	r3, [pc, #84]	; (8004340 <_sbrk+0x60>)
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042f4:	4b13      	ldr	r3, [pc, #76]	; (8004344 <_sbrk+0x64>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d102      	bne.n	8004302 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042fc:	4b11      	ldr	r3, [pc, #68]	; (8004344 <_sbrk+0x64>)
 80042fe:	4a12      	ldr	r2, [pc, #72]	; (8004348 <_sbrk+0x68>)
 8004300:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004302:	4b10      	ldr	r3, [pc, #64]	; (8004344 <_sbrk+0x64>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4413      	add	r3, r2
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	429a      	cmp	r2, r3
 800430e:	d207      	bcs.n	8004320 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004310:	f008 fd18 	bl	800cd44 <__errno>
 8004314:	4603      	mov	r3, r0
 8004316:	220c      	movs	r2, #12
 8004318:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800431a:	f04f 33ff 	mov.w	r3, #4294967295
 800431e:	e009      	b.n	8004334 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004320:	4b08      	ldr	r3, [pc, #32]	; (8004344 <_sbrk+0x64>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004326:	4b07      	ldr	r3, [pc, #28]	; (8004344 <_sbrk+0x64>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4413      	add	r3, r2
 800432e:	4a05      	ldr	r2, [pc, #20]	; (8004344 <_sbrk+0x64>)
 8004330:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004332:	68fb      	ldr	r3, [r7, #12]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	20050000 	.word	0x20050000
 8004340:	00000400 	.word	0x00000400
 8004344:	20000c8c 	.word	0x20000c8c
 8004348:	200049f0 	.word	0x200049f0

0800434c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004350:	4b06      	ldr	r3, [pc, #24]	; (800436c <SystemInit+0x20>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	4a05      	ldr	r2, [pc, #20]	; (800436c <SystemInit+0x20>)
 8004358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800435c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004360:	bf00      	nop
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	e000ed00 	.word	0xe000ed00

08004370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004374:	480d      	ldr	r0, [pc, #52]	; (80043ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004376:	490e      	ldr	r1, [pc, #56]	; (80043b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004378:	4a0e      	ldr	r2, [pc, #56]	; (80043b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800437a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800437c:	e002      	b.n	8004384 <LoopCopyDataInit>

0800437e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800437e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004382:	3304      	adds	r3, #4

08004384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004388:	d3f9      	bcc.n	800437e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800438a:	4a0b      	ldr	r2, [pc, #44]	; (80043b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800438c:	4c0b      	ldr	r4, [pc, #44]	; (80043bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800438e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004390:	e001      	b.n	8004396 <LoopFillZerobss>

08004392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004394:	3204      	adds	r2, #4

08004396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004398:	d3fb      	bcc.n	8004392 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800439a:	f7ff ffd7 	bl	800434c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800439e:	f008 fcd7 	bl	800cd50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043a2:	f7fc fafd 	bl	80009a0 <main>
  bx  lr    
 80043a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80043a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80043ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043b0:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80043b4:	08012444 	.word	0x08012444
  ldr r2, =_sbss
 80043b8:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80043bc:	200049f0 	.word	0x200049f0

080043c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043c0:	e7fe      	b.n	80043c0 <ADC_IRQHandler>

080043c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043c6:	2003      	movs	r0, #3
 80043c8:	f000 fcf3 	bl	8004db2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043cc:	200f      	movs	r0, #15
 80043ce:	f7ff fee9 	bl	80041a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043d2:	f7ff f931 	bl	8003638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <HAL_IncTick+0x20>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	4b06      	ldr	r3, [pc, #24]	; (8004400 <HAL_IncTick+0x24>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4413      	add	r3, r2
 80043ec:	4a04      	ldr	r2, [pc, #16]	; (8004400 <HAL_IncTick+0x24>)
 80043ee:	6013      	str	r3, [r2, #0]
}
 80043f0:	bf00      	nop
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000044 	.word	0x20000044
 8004400:	20000c90 	.word	0x20000c90

08004404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  return uwTick;
 8004408:	4b03      	ldr	r3, [pc, #12]	; (8004418 <HAL_GetTick+0x14>)
 800440a:	681b      	ldr	r3, [r3, #0]
}
 800440c:	4618      	mov	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20000c90 	.word	0x20000c90

0800441c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004424:	f7ff ffee 	bl	8004404 <HAL_GetTick>
 8004428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004434:	d005      	beq.n	8004442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004436:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <HAL_Delay+0x44>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004442:	bf00      	nop
 8004444:	f7ff ffde 	bl	8004404 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	429a      	cmp	r2, r3
 8004452:	d8f7      	bhi.n	8004444 <HAL_Delay+0x28>
  {
  }
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	20000044 	.word	0x20000044

08004464 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e031      	b.n	80044de <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	d109      	bne.n	8004496 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff f900 	bl	8003688 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f003 0310 	and.w	r3, r3, #16
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d116      	bne.n	80044d0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044a6:	4b10      	ldr	r3, [pc, #64]	; (80044e8 <HAL_ADC_Init+0x84>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	f043 0202 	orr.w	r2, r3, #2
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fad6 	bl	8004a64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	f023 0303 	bic.w	r3, r3, #3
 80044c6:	f043 0201 	orr.w	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	641a      	str	r2, [r3, #64]	; 0x40
 80044ce:	e001      	b.n	80044d4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	ffffeefd 	.word	0xffffeefd

080044ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_ADC_Start+0x1a>
 8004502:	2302      	movs	r3, #2
 8004504:	e0ad      	b.n	8004662 <HAL_ADC_Start+0x176>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b01      	cmp	r3, #1
 800451a:	d018      	beq.n	800454e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800452c:	4b50      	ldr	r3, [pc, #320]	; (8004670 <HAL_ADC_Start+0x184>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a50      	ldr	r2, [pc, #320]	; (8004674 <HAL_ADC_Start+0x188>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	0c9a      	lsrs	r2, r3, #18
 8004538:	4613      	mov	r3, r2
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	4413      	add	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004540:	e002      	b.n	8004548 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	3b01      	subs	r3, #1
 8004546:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f9      	bne.n	8004542 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b01      	cmp	r3, #1
 800455a:	d175      	bne.n	8004648 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004560:	4b45      	ldr	r3, [pc, #276]	; (8004678 <HAL_ADC_Start+0x18c>)
 8004562:	4013      	ands	r3, r2
 8004564:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004582:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004596:	d106      	bne.n	80045a6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459c:	f023 0206 	bic.w	r2, r3, #6
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	645a      	str	r2, [r3, #68]	; 0x44
 80045a4:	e002      	b.n	80045ac <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80045bc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80045be:	4b2f      	ldr	r3, [pc, #188]	; (800467c <HAL_ADC_Start+0x190>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f003 031f 	and.w	r3, r3, #31
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10f      	bne.n	80045ea <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d143      	bne.n	8004660 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	e03a      	b.n	8004660 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a24      	ldr	r2, [pc, #144]	; (8004680 <HAL_ADC_Start+0x194>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d10e      	bne.n	8004612 <HAL_ADC_Start+0x126>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d107      	bne.n	8004612 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004610:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004612:	4b1a      	ldr	r3, [pc, #104]	; (800467c <HAL_ADC_Start+0x190>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f003 0310 	and.w	r3, r3, #16
 800461a:	2b00      	cmp	r3, #0
 800461c:	d120      	bne.n	8004660 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a18      	ldr	r2, [pc, #96]	; (8004684 <HAL_ADC_Start+0x198>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d11b      	bne.n	8004660 <HAL_ADC_Start+0x174>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d114      	bne.n	8004660 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004644:	609a      	str	r2, [r3, #8]
 8004646:	e00b      	b.n	8004660 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	f043 0210 	orr.w	r2, r3, #16
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004658:	f043 0201 	orr.w	r2, r3, #1
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	2000003c 	.word	0x2000003c
 8004674:	431bde83 	.word	0x431bde83
 8004678:	fffff8fe 	.word	0xfffff8fe
 800467c:	40012300 	.word	0x40012300
 8004680:	40012000 	.word	0x40012000
 8004684:	40012200 	.word	0x40012200

08004688 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a4:	d113      	bne.n	80046ce <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80046b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b4:	d10b      	bne.n	80046ce <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	f043 0220 	orr.w	r2, r3, #32
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e063      	b.n	8004796 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80046ce:	f7ff fe99 	bl	8004404 <HAL_GetTick>
 80046d2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80046d4:	e021      	b.n	800471a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046dc:	d01d      	beq.n	800471a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <HAL_ADC_PollForConversion+0x6c>
 80046e4:	f7ff fe8e 	bl	8004404 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d212      	bcs.n	800471a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d00b      	beq.n	800471a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f043 0204 	orr.w	r2, r3, #4
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e03d      	b.n	8004796 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b02      	cmp	r3, #2
 8004726:	d1d6      	bne.n	80046d6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0212 	mvn.w	r2, #18
 8004730:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d123      	bne.n	8004794 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004750:	2b00      	cmp	r3, #0
 8004752:	d11f      	bne.n	8004794 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800475e:	2b00      	cmp	r3, #0
 8004760:	d006      	beq.n	8004770 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800476c:	2b00      	cmp	r3, #0
 800476e:	d111      	bne.n	8004794 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d105      	bne.n	8004794 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	f043 0201 	orr.w	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x1c>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e136      	b.n	8004a42 <HAL_ADC_ConfigChannel+0x28a>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b09      	cmp	r3, #9
 80047e2:	d93a      	bls.n	800485a <HAL_ADC_ConfigChannel+0xa2>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ec:	d035      	beq.n	800485a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68d9      	ldr	r1, [r3, #12]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	461a      	mov	r2, r3
 80047fc:	4613      	mov	r3, r2
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	4413      	add	r3, r2
 8004802:	3b1e      	subs	r3, #30
 8004804:	2207      	movs	r2, #7
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	43da      	mvns	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	400a      	ands	r2, r1
 8004812:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a8d      	ldr	r2, [pc, #564]	; (8004a50 <HAL_ADC_ConfigChannel+0x298>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d10a      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68d9      	ldr	r1, [r3, #12]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	061a      	lsls	r2, r3, #24
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004832:	e035      	b.n	80048a0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68d9      	ldr	r1, [r3, #12]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	4618      	mov	r0, r3
 8004846:	4603      	mov	r3, r0
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4403      	add	r3, r0
 800484c:	3b1e      	subs	r3, #30
 800484e:	409a      	lsls	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004858:	e022      	b.n	80048a0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6919      	ldr	r1, [r3, #16]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	b29b      	uxth	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	4613      	mov	r3, r2
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	4413      	add	r3, r2
 800486e:	2207      	movs	r2, #7
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	43da      	mvns	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	400a      	ands	r2, r1
 800487c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6919      	ldr	r1, [r3, #16]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	4618      	mov	r0, r3
 8004890:	4603      	mov	r3, r0
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	4403      	add	r3, r0
 8004896:	409a      	lsls	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b06      	cmp	r3, #6
 80048a6:	d824      	bhi.n	80048f2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	3b05      	subs	r3, #5
 80048ba:	221f      	movs	r2, #31
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	43da      	mvns	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	400a      	ands	r2, r1
 80048c8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	4618      	mov	r0, r3
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	3b05      	subs	r3, #5
 80048e4:	fa00 f203 	lsl.w	r2, r0, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	635a      	str	r2, [r3, #52]	; 0x34
 80048f0:	e04c      	b.n	800498c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b0c      	cmp	r3, #12
 80048f8:	d824      	bhi.n	8004944 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	3b23      	subs	r3, #35	; 0x23
 800490c:	221f      	movs	r2, #31
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	43da      	mvns	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	400a      	ands	r2, r1
 800491a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	b29b      	uxth	r3, r3
 8004928:	4618      	mov	r0, r3
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	3b23      	subs	r3, #35	; 0x23
 8004936:	fa00 f203 	lsl.w	r2, r0, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	631a      	str	r2, [r3, #48]	; 0x30
 8004942:	e023      	b.n	800498c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	3b41      	subs	r3, #65	; 0x41
 8004956:	221f      	movs	r2, #31
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	43da      	mvns	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	400a      	ands	r2, r1
 8004964:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	b29b      	uxth	r3, r3
 8004972:	4618      	mov	r0, r3
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	3b41      	subs	r3, #65	; 0x41
 8004980:	fa00 f203 	lsl.w	r2, r0, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a30      	ldr	r2, [pc, #192]	; (8004a54 <HAL_ADC_ConfigChannel+0x29c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d10a      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x1f4>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800499e:	d105      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80049a0:	4b2d      	ldr	r3, [pc, #180]	; (8004a58 <HAL_ADC_ConfigChannel+0x2a0>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	4a2c      	ldr	r2, [pc, #176]	; (8004a58 <HAL_ADC_ConfigChannel+0x2a0>)
 80049a6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80049aa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a28      	ldr	r2, [pc, #160]	; (8004a54 <HAL_ADC_ConfigChannel+0x29c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d10f      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0x21e>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b12      	cmp	r3, #18
 80049bc:	d10b      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80049be:	4b26      	ldr	r3, [pc, #152]	; (8004a58 <HAL_ADC_ConfigChannel+0x2a0>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	4a25      	ldr	r2, [pc, #148]	; (8004a58 <HAL_ADC_ConfigChannel+0x2a0>)
 80049c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80049c8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80049ca:	4b23      	ldr	r3, [pc, #140]	; (8004a58 <HAL_ADC_ConfigChannel+0x2a0>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4a22      	ldr	r2, [pc, #136]	; (8004a58 <HAL_ADC_ConfigChannel+0x2a0>)
 80049d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049d4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1e      	ldr	r2, [pc, #120]	; (8004a54 <HAL_ADC_ConfigChannel+0x29c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d12b      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x280>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1a      	ldr	r2, [pc, #104]	; (8004a50 <HAL_ADC_ConfigChannel+0x298>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d003      	beq.n	80049f2 <HAL_ADC_ConfigChannel+0x23a>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b11      	cmp	r3, #17
 80049f0:	d122      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80049f2:	4b19      	ldr	r3, [pc, #100]	; (8004a58 <HAL_ADC_ConfigChannel+0x2a0>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4a18      	ldr	r2, [pc, #96]	; (8004a58 <HAL_ADC_ConfigChannel+0x2a0>)
 80049f8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80049fc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80049fe:	4b16      	ldr	r3, [pc, #88]	; (8004a58 <HAL_ADC_ConfigChannel+0x2a0>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	4a15      	ldr	r2, [pc, #84]	; (8004a58 <HAL_ADC_ConfigChannel+0x2a0>)
 8004a04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a08:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a10      	ldr	r2, [pc, #64]	; (8004a50 <HAL_ADC_ConfigChannel+0x298>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d111      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004a14:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <HAL_ADC_ConfigChannel+0x2a4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a11      	ldr	r2, [pc, #68]	; (8004a60 <HAL_ADC_ConfigChannel+0x2a8>)
 8004a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1e:	0c9a      	lsrs	r2, r3, #18
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004a2a:	e002      	b.n	8004a32 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f9      	bne.n	8004a2c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	10000012 	.word	0x10000012
 8004a54:	40012000 	.word	0x40012000
 8004a58:	40012300 	.word	0x40012300
 8004a5c:	2000003c 	.word	0x2000003c
 8004a60:	431bde83 	.word	0x431bde83

08004a64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004a6c:	4b78      	ldr	r3, [pc, #480]	; (8004c50 <ADC_Init+0x1ec>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	4a77      	ldr	r2, [pc, #476]	; (8004c50 <ADC_Init+0x1ec>)
 8004a72:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004a76:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004a78:	4b75      	ldr	r3, [pc, #468]	; (8004c50 <ADC_Init+0x1ec>)
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	4973      	ldr	r1, [pc, #460]	; (8004c50 <ADC_Init+0x1ec>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6859      	ldr	r1, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	021a      	lsls	r2, r3, #8
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ab8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6859      	ldr	r1, [r3, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689a      	ldr	r2, [r3, #8]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ada:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6899      	ldr	r1, [r3, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	4a58      	ldr	r2, [pc, #352]	; (8004c54 <ADC_Init+0x1f0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d022      	beq.n	8004b3e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6899      	ldr	r1, [r3, #8]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6899      	ldr	r1, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	609a      	str	r2, [r3, #8]
 8004b3c:	e00f      	b.n	8004b5e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0202 	bic.w	r2, r2, #2
 8004b6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6899      	ldr	r1, [r3, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	005a      	lsls	r2, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d01b      	beq.n	8004bc4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004baa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6859      	ldr	r1, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	035a      	lsls	r2, r3, #13
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]
 8004bc2:	e007      	b.n	8004bd4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bd2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004be2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	051a      	lsls	r2, r3, #20
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6899      	ldr	r1, [r3, #8]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c16:	025a      	lsls	r2, r3, #9
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6899      	ldr	r1, [r3, #8]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	029a      	lsls	r2, r3, #10
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	609a      	str	r2, [r3, #8]
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	40012300 	.word	0x40012300
 8004c54:	0f000001 	.word	0x0f000001

08004c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c68:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <__NVIC_SetPriorityGrouping+0x40>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c74:	4013      	ands	r3, r2
 8004c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004c80:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <__NVIC_SetPriorityGrouping+0x44>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c86:	4a04      	ldr	r2, [pc, #16]	; (8004c98 <__NVIC_SetPriorityGrouping+0x40>)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	60d3      	str	r3, [r2, #12]
}
 8004c8c:	bf00      	nop
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	e000ed00 	.word	0xe000ed00
 8004c9c:	05fa0000 	.word	0x05fa0000

08004ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ca4:	4b04      	ldr	r3, [pc, #16]	; (8004cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	0a1b      	lsrs	r3, r3, #8
 8004caa:	f003 0307 	and.w	r3, r3, #7
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	e000ed00 	.word	0xe000ed00

08004cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	db0b      	blt.n	8004ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	f003 021f 	and.w	r2, r3, #31
 8004cd4:	4907      	ldr	r1, [pc, #28]	; (8004cf4 <__NVIC_EnableIRQ+0x38>)
 8004cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	2001      	movs	r0, #1
 8004cde:	fa00 f202 	lsl.w	r2, r0, r2
 8004ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	e000e100 	.word	0xe000e100

08004cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	6039      	str	r1, [r7, #0]
 8004d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	db0a      	blt.n	8004d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	490c      	ldr	r1, [pc, #48]	; (8004d44 <__NVIC_SetPriority+0x4c>)
 8004d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d16:	0112      	lsls	r2, r2, #4
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d20:	e00a      	b.n	8004d38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	4908      	ldr	r1, [pc, #32]	; (8004d48 <__NVIC_SetPriority+0x50>)
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	3b04      	subs	r3, #4
 8004d30:	0112      	lsls	r2, r2, #4
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	440b      	add	r3, r1
 8004d36:	761a      	strb	r2, [r3, #24]
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	e000e100 	.word	0xe000e100
 8004d48:	e000ed00 	.word	0xe000ed00

08004d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b089      	sub	sp, #36	; 0x24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f1c3 0307 	rsb	r3, r3, #7
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	bf28      	it	cs
 8004d6a:	2304      	movcs	r3, #4
 8004d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	3304      	adds	r3, #4
 8004d72:	2b06      	cmp	r3, #6
 8004d74:	d902      	bls.n	8004d7c <NVIC_EncodePriority+0x30>
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	3b03      	subs	r3, #3
 8004d7a:	e000      	b.n	8004d7e <NVIC_EncodePriority+0x32>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d80:	f04f 32ff 	mov.w	r2, #4294967295
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	43da      	mvns	r2, r3
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	401a      	ands	r2, r3
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d94:	f04f 31ff 	mov.w	r1, #4294967295
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9e:	43d9      	mvns	r1, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004da4:	4313      	orrs	r3, r2
         );
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3724      	adds	r7, #36	; 0x24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff ff4c 	bl	8004c58 <__NVIC_SetPriorityGrouping>
}
 8004dc0:	bf00      	nop
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004dda:	f7ff ff61 	bl	8004ca0 <__NVIC_GetPriorityGrouping>
 8004dde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	6978      	ldr	r0, [r7, #20]
 8004de6:	f7ff ffb1 	bl	8004d4c <NVIC_EncodePriority>
 8004dea:	4602      	mov	r2, r0
 8004dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004df0:	4611      	mov	r1, r2
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff ff80 	bl	8004cf8 <__NVIC_SetPriority>
}
 8004df8:	bf00      	nop
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff ff54 	bl	8004cbc <__NVIC_EnableIRQ>
}
 8004e14:	bf00      	nop
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e014      	b.n	8004e58 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	791b      	ldrb	r3, [r3, #4]
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d105      	bne.n	8004e44 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7fe fc90 	bl	8003764 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e76:	d120      	bne.n	8004eba <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e86:	d118      	bne.n	8004eba <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2204      	movs	r2, #4
 8004e8c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f043 0201 	orr.w	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ea2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004eb2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f82d 	bl	8004f14 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec8:	d120      	bne.n	8004f0c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ed8:	d118      	bne.n	8004f0c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2204      	movs	r2, #4
 8004ede:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	f043 0202 	orr.w	r2, r3, #2
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004ef4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004f04:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f85d 	bl	8004fc6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004f0c:	bf00      	nop
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	795b      	ldrb	r3, [r3, #5]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_DAC_ConfigChannel+0x18>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e03c      	b.n	8004fba <HAL_DAC_ConfigChannel+0x92>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f003 0310 	and.w	r3, r3, #16
 8004f5a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	43db      	mvns	r3, r3
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4013      	ands	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6819      	ldr	r1, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	22c0      	movs	r2, #192	; 0xc0
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43da      	mvns	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	400a      	ands	r2, r1
 8004faa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
	...

08004fdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004fe8:	f7ff fa0c 	bl	8004404 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e099      	b.n	800512c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0201 	bic.w	r2, r2, #1
 8005016:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005018:	e00f      	b.n	800503a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800501a:	f7ff f9f3 	bl	8004404 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b05      	cmp	r3, #5
 8005026:	d908      	bls.n	800503a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2220      	movs	r2, #32
 800502c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2203      	movs	r2, #3
 8005032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e078      	b.n	800512c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e8      	bne.n	800501a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4b38      	ldr	r3, [pc, #224]	; (8005134 <HAL_DMA_Init+0x158>)
 8005054:	4013      	ands	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005066:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005072:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800507e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	2b04      	cmp	r3, #4
 8005092:	d107      	bne.n	80050a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	4313      	orrs	r3, r2
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f023 0307 	bic.w	r3, r3, #7
 80050ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d117      	bne.n	80050fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00e      	beq.n	80050fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f8bd 	bl	8005260 <DMA_CheckFifoParam>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d008      	beq.n	80050fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2240      	movs	r2, #64	; 0x40
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80050fa:	2301      	movs	r3, #1
 80050fc:	e016      	b.n	800512c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f874 	bl	80051f4 <DMA_CalcBaseAndBitshift>
 800510c:	4603      	mov	r3, r0
 800510e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005114:	223f      	movs	r2, #63	; 0x3f
 8005116:	409a      	lsls	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	f010803f 	.word	0xf010803f

08005138 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e050      	b.n	80051ec <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d101      	bne.n	800515a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005156:	2302      	movs	r3, #2
 8005158:	e048      	b.n	80051ec <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0201 	bic.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2200      	movs	r2, #0
 8005178:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2200      	movs	r2, #0
 8005180:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2200      	movs	r2, #0
 8005188:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2200      	movs	r2, #0
 8005190:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2221      	movs	r2, #33	; 0x21
 8005198:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f82a 	bl	80051f4 <DMA_CalcBaseAndBitshift>
 80051a0:	4603      	mov	r3, r0
 80051a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a8:	223f      	movs	r2, #63	; 0x3f
 80051aa:	409a      	lsls	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	b2db      	uxtb	r3, r3
 8005202:	3b10      	subs	r3, #16
 8005204:	4a13      	ldr	r2, [pc, #76]	; (8005254 <DMA_CalcBaseAndBitshift+0x60>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	091b      	lsrs	r3, r3, #4
 800520c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800520e:	4a12      	ldr	r2, [pc, #72]	; (8005258 <DMA_CalcBaseAndBitshift+0x64>)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4413      	add	r3, r2
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b03      	cmp	r3, #3
 8005220:	d908      	bls.n	8005234 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	4b0c      	ldr	r3, [pc, #48]	; (800525c <DMA_CalcBaseAndBitshift+0x68>)
 800522a:	4013      	ands	r3, r2
 800522c:	1d1a      	adds	r2, r3, #4
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	659a      	str	r2, [r3, #88]	; 0x58
 8005232:	e006      	b.n	8005242 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	4b08      	ldr	r3, [pc, #32]	; (800525c <DMA_CalcBaseAndBitshift+0x68>)
 800523c:	4013      	ands	r3, r2
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	aaaaaaab 	.word	0xaaaaaaab
 8005258:	08012398 	.word	0x08012398
 800525c:	fffffc00 	.word	0xfffffc00

08005260 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005270:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d11f      	bne.n	80052ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b03      	cmp	r3, #3
 800527e:	d856      	bhi.n	800532e <DMA_CheckFifoParam+0xce>
 8005280:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <DMA_CheckFifoParam+0x28>)
 8005282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005286:	bf00      	nop
 8005288:	08005299 	.word	0x08005299
 800528c:	080052ab 	.word	0x080052ab
 8005290:	08005299 	.word	0x08005299
 8005294:	0800532f 	.word	0x0800532f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d046      	beq.n	8005332 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052a8:	e043      	b.n	8005332 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052b2:	d140      	bne.n	8005336 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052b8:	e03d      	b.n	8005336 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c2:	d121      	bne.n	8005308 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d837      	bhi.n	800533a <DMA_CheckFifoParam+0xda>
 80052ca:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <DMA_CheckFifoParam+0x70>)
 80052cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d0:	080052e1 	.word	0x080052e1
 80052d4:	080052e7 	.word	0x080052e7
 80052d8:	080052e1 	.word	0x080052e1
 80052dc:	080052f9 	.word	0x080052f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	73fb      	strb	r3, [r7, #15]
      break;
 80052e4:	e030      	b.n	8005348 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d025      	beq.n	800533e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052f6:	e022      	b.n	800533e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005300:	d11f      	bne.n	8005342 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005306:	e01c      	b.n	8005342 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d903      	bls.n	8005316 <DMA_CheckFifoParam+0xb6>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b03      	cmp	r3, #3
 8005312:	d003      	beq.n	800531c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005314:	e018      	b.n	8005348 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	73fb      	strb	r3, [r7, #15]
      break;
 800531a:	e015      	b.n	8005348 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00e      	beq.n	8005346 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	73fb      	strb	r3, [r7, #15]
      break;
 800532c:	e00b      	b.n	8005346 <DMA_CheckFifoParam+0xe6>
      break;
 800532e:	bf00      	nop
 8005330:	e00a      	b.n	8005348 <DMA_CheckFifoParam+0xe8>
      break;
 8005332:	bf00      	nop
 8005334:	e008      	b.n	8005348 <DMA_CheckFifoParam+0xe8>
      break;
 8005336:	bf00      	nop
 8005338:	e006      	b.n	8005348 <DMA_CheckFifoParam+0xe8>
      break;
 800533a:	bf00      	nop
 800533c:	e004      	b.n	8005348 <DMA_CheckFifoParam+0xe8>
      break;
 800533e:	bf00      	nop
 8005340:	e002      	b.n	8005348 <DMA_CheckFifoParam+0xe8>
      break;   
 8005342:	bf00      	nop
 8005344:	e000      	b.n	8005348 <DMA_CheckFifoParam+0xe8>
      break;
 8005346:	bf00      	nop
    }
  } 
  
  return status; 
 8005348:	7bfb      	ldrb	r3, [r7, #15]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop

08005358 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e039      	b.n	80053de <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d106      	bne.n	8005384 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fe fa38 	bl	80037f4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a8:	f023 0107 	bic.w	r1, r3, #7
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053be:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <HAL_DMA2D_Init+0x90>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	68d1      	ldr	r1, [r2, #12]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6812      	ldr	r2, [r2, #0]
 80053ca:	430b      	orrs	r3, r1
 80053cc:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	ffffc000 	.word	0xffffc000

080053ec <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_DMA2D_Start+0x1c>
 8005404:	2302      	movs	r3, #2
 8005406:	e018      	b.n	800543a <HAL_DMA2D_Start+0x4e>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	68b9      	ldr	r1, [r7, #8]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 fa98 	bl	8005958 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0201 	orr.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b086      	sub	sp, #24
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d056      	beq.n	800550c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800545e:	f7fe ffd1 	bl	8004404 <HAL_GetTick>
 8005462:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005464:	e04b      	b.n	80054fe <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005474:	2b00      	cmp	r3, #0
 8005476:	d023      	beq.n	80054c0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 0320 	and.w	r3, r3, #32
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005486:	f043 0202 	orr.w	r2, r3, #2
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	d005      	beq.n	80054a4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549c:	f043 0201 	orr.w	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2221      	movs	r2, #33	; 0x21
 80054aa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2204      	movs	r2, #4
 80054b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e0a5      	b.n	800560c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c6:	d01a      	beq.n	80054fe <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054c8:	f7fe ff9c 	bl	8004404 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d302      	bcc.n	80054de <HAL_DMA2D_PollForTransfer+0x9c>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10f      	bne.n	80054fe <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e2:	f043 0220 	orr.w	r2, r3, #32
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2203      	movs	r2, #3
 80054ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e086      	b.n	800560c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0ac      	beq.n	8005466 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d061      	beq.n	80055f2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800552e:	f7fe ff69 	bl	8004404 <HAL_GetTick>
 8005532:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005534:	e056      	b.n	80055e4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005544:	2b00      	cmp	r3, #0
 8005546:	d02e      	beq.n	80055a6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f003 0308 	and.w	r3, r3, #8
 800554e:	2b00      	cmp	r3, #0
 8005550:	d005      	beq.n	800555e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005556:	f043 0204 	orr.w	r2, r3, #4
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f003 0320 	and.w	r3, r3, #32
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556c:	f043 0202 	orr.w	r2, r3, #2
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005582:	f043 0201 	orr.w	r2, r3, #1
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2229      	movs	r2, #41	; 0x29
 8005590:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2204      	movs	r2, #4
 8005596:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e032      	b.n	800560c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ac:	d01a      	beq.n	80055e4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055ae:	f7fe ff29 	bl	8004404 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d302      	bcc.n	80055c4 <HAL_DMA2D_PollForTransfer+0x182>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10f      	bne.n	80055e4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c8:	f043 0220 	orr.w	r2, r3, #32
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2203      	movs	r2, #3
 80055d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e013      	b.n	800560c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f003 0310 	and.w	r3, r3, #16
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0a1      	beq.n	8005536 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2212      	movs	r2, #18
 80055f8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d026      	beq.n	8005684 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563c:	2b00      	cmp	r3, #0
 800563e:	d021      	beq.n	8005684 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800564e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005654:	f043 0201 	orr.w	r2, r3, #1
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2201      	movs	r2, #1
 8005662:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2204      	movs	r2, #4
 8005668:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d026      	beq.n	80056dc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d021      	beq.n	80056dc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056a6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2220      	movs	r2, #32
 80056ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b4:	f043 0202 	orr.w	r2, r3, #2
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2204      	movs	r2, #4
 80056c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d026      	beq.n	8005734 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d021      	beq.n	8005734 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056fe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2208      	movs	r2, #8
 8005706:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570c:	f043 0204 	orr.w	r2, r3, #4
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2204      	movs	r2, #4
 8005718:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f003 0304 	and.w	r3, r3, #4
 800573a:	2b00      	cmp	r3, #0
 800573c:	d013      	beq.n	8005766 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00e      	beq.n	8005766 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005756:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2204      	movs	r2, #4
 800575e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f853 	bl	800580c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d024      	beq.n	80057ba <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005776:	2b00      	cmp	r3, #0
 8005778:	d01f      	beq.n	80057ba <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005788:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2202      	movs	r2, #2
 8005790:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f003 0310 	and.w	r3, r3, #16
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d01f      	beq.n	8005804 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01a      	beq.n	8005804 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057dc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2210      	movs	r2, #16
 80057e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f80e 	bl	8005820 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_DMA2D_ConfigLayer+0x20>
 8005850:	2302      	movs	r3, #2
 8005852:	e079      	b.n	8005948 <HAL_DMA2D_ConfigLayer+0x114>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	3318      	adds	r3, #24
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	4413      	add	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	041b      	lsls	r3, r3, #16
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800587e:	4b35      	ldr	r3, [pc, #212]	; (8005954 <HAL_DMA2D_ConfigLayer+0x120>)
 8005880:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2b0a      	cmp	r3, #10
 8005888:	d003      	beq.n	8005892 <HAL_DMA2D_ConfigLayer+0x5e>
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2b09      	cmp	r3, #9
 8005890:	d107      	bne.n	80058a2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	e005      	b.n	80058ae <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	061b      	lsls	r3, r3, #24
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d120      	bne.n	80058f6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	43db      	mvns	r3, r3
 80058be:	ea02 0103 	and.w	r1, r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	6812      	ldr	r2, [r2, #0]
 80058d4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b0a      	cmp	r3, #10
 80058dc:	d003      	beq.n	80058e6 <HAL_DMA2D_ConfigLayer+0xb2>
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b09      	cmp	r3, #9
 80058e4:	d127      	bne.n	8005936 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80058f2:	629a      	str	r2, [r3, #40]	; 0x28
 80058f4:	e01f      	b.n	8005936 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69da      	ldr	r2, [r3, #28]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	43db      	mvns	r3, r3
 8005900:	ea02 0103 	and.w	r1, r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	430a      	orrs	r2, r1
 800590c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	6812      	ldr	r2, [r2, #0]
 8005916:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b0a      	cmp	r3, #10
 800591e:	d003      	beq.n	8005928 <HAL_DMA2D_ConfigLayer+0xf4>
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2b09      	cmp	r3, #9
 8005926:	d106      	bne.n	8005936 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005934:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	371c      	adds	r7, #28
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	ff03000f 	.word	0xff03000f

08005958 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005958:	b480      	push	{r7}
 800595a:	b08b      	sub	sp, #44	; 0x2c
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	041a      	lsls	r2, r3, #16
 8005974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005976:	431a      	orrs	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005990:	d174      	bne.n	8005a7c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005998:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059a0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80059a8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d108      	bne.n	80059ca <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	431a      	orrs	r2, r3
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	627b      	str	r3, [r7, #36]	; 0x24
 80059c8:	e053      	b.n	8005a72 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d106      	bne.n	80059e0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
 80059de:	e048      	b.n	8005a72 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d111      	bne.n	8005a0c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	0cdb      	lsrs	r3, r3, #19
 80059ec:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	0a9b      	lsrs	r3, r3, #10
 80059f2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	08db      	lsrs	r3, r3, #3
 80059f8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	02db      	lsls	r3, r3, #11
 8005a02:	4313      	orrs	r3, r2
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
 8005a0a:	e032      	b.n	8005a72 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	d117      	bne.n	8005a44 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	0fdb      	lsrs	r3, r3, #31
 8005a18:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	0cdb      	lsrs	r3, r3, #19
 8005a1e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	0adb      	lsrs	r3, r3, #11
 8005a24:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	08db      	lsrs	r3, r3, #3
 8005a2a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	029b      	lsls	r3, r3, #10
 8005a34:	431a      	orrs	r2, r3
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	03db      	lsls	r3, r3, #15
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	627b      	str	r3, [r7, #36]	; 0x24
 8005a42:	e016      	b.n	8005a72 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	0f1b      	lsrs	r3, r3, #28
 8005a48:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	0d1b      	lsrs	r3, r3, #20
 8005a4e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	0b1b      	lsrs	r3, r3, #12
 8005a54:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	091b      	lsrs	r3, r3, #4
 8005a5a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	011a      	lsls	r2, r3, #4
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	021b      	lsls	r3, r3, #8
 8005a64:	431a      	orrs	r2, r3
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	031b      	lsls	r3, r3, #12
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a78:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005a7a:	e003      	b.n	8005a84 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	60da      	str	r2, [r3, #12]
}
 8005a84:	bf00      	nop
 8005a86:	372c      	adds	r7, #44	; 0x2c
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b089      	sub	sp, #36	; 0x24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61fb      	str	r3, [r7, #28]
 8005aae:	e175      	b.n	8005d9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	f040 8164 	bne.w	8005d96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d005      	beq.n	8005ae6 <HAL_GPIO_Init+0x56>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d130      	bne.n	8005b48 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	2203      	movs	r2, #3
 8005af2:	fa02 f303 	lsl.w	r3, r2, r3
 8005af6:	43db      	mvns	r3, r3
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	4013      	ands	r3, r2
 8005afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	fa02 f303 	lsl.w	r3, r2, r3
 8005b24:	43db      	mvns	r3, r3
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	f003 0201 	and.w	r2, r3, #1
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f003 0303 	and.w	r3, r3, #3
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d017      	beq.n	8005b84 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	2203      	movs	r2, #3
 8005b60:	fa02 f303 	lsl.w	r3, r2, r3
 8005b64:	43db      	mvns	r3, r3
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	fa02 f303 	lsl.w	r3, r2, r3
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f003 0303 	and.w	r3, r3, #3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d123      	bne.n	8005bd8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	08da      	lsrs	r2, r3, #3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3208      	adds	r2, #8
 8005b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	220f      	movs	r2, #15
 8005ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bac:	43db      	mvns	r3, r3
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	08da      	lsrs	r2, r3, #3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3208      	adds	r2, #8
 8005bd2:	69b9      	ldr	r1, [r7, #24]
 8005bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	2203      	movs	r2, #3
 8005be4:	fa02 f303 	lsl.w	r3, r2, r3
 8005be8:	43db      	mvns	r3, r3
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	4013      	ands	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f003 0203 	and.w	r2, r3, #3
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 80be 	beq.w	8005d96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c1a:	4b66      	ldr	r3, [pc, #408]	; (8005db4 <HAL_GPIO_Init+0x324>)
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1e:	4a65      	ldr	r2, [pc, #404]	; (8005db4 <HAL_GPIO_Init+0x324>)
 8005c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c24:	6453      	str	r3, [r2, #68]	; 0x44
 8005c26:	4b63      	ldr	r3, [pc, #396]	; (8005db4 <HAL_GPIO_Init+0x324>)
 8005c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005c32:	4a61      	ldr	r2, [pc, #388]	; (8005db8 <HAL_GPIO_Init+0x328>)
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	089b      	lsrs	r3, r3, #2
 8005c38:	3302      	adds	r3, #2
 8005c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	220f      	movs	r2, #15
 8005c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4e:	43db      	mvns	r3, r3
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	4013      	ands	r3, r2
 8005c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a58      	ldr	r2, [pc, #352]	; (8005dbc <HAL_GPIO_Init+0x32c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d037      	beq.n	8005cce <HAL_GPIO_Init+0x23e>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a57      	ldr	r2, [pc, #348]	; (8005dc0 <HAL_GPIO_Init+0x330>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d031      	beq.n	8005cca <HAL_GPIO_Init+0x23a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a56      	ldr	r2, [pc, #344]	; (8005dc4 <HAL_GPIO_Init+0x334>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d02b      	beq.n	8005cc6 <HAL_GPIO_Init+0x236>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a55      	ldr	r2, [pc, #340]	; (8005dc8 <HAL_GPIO_Init+0x338>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d025      	beq.n	8005cc2 <HAL_GPIO_Init+0x232>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a54      	ldr	r2, [pc, #336]	; (8005dcc <HAL_GPIO_Init+0x33c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d01f      	beq.n	8005cbe <HAL_GPIO_Init+0x22e>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a53      	ldr	r2, [pc, #332]	; (8005dd0 <HAL_GPIO_Init+0x340>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d019      	beq.n	8005cba <HAL_GPIO_Init+0x22a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a52      	ldr	r2, [pc, #328]	; (8005dd4 <HAL_GPIO_Init+0x344>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d013      	beq.n	8005cb6 <HAL_GPIO_Init+0x226>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a51      	ldr	r2, [pc, #324]	; (8005dd8 <HAL_GPIO_Init+0x348>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d00d      	beq.n	8005cb2 <HAL_GPIO_Init+0x222>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a50      	ldr	r2, [pc, #320]	; (8005ddc <HAL_GPIO_Init+0x34c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d007      	beq.n	8005cae <HAL_GPIO_Init+0x21e>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a4f      	ldr	r2, [pc, #316]	; (8005de0 <HAL_GPIO_Init+0x350>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d101      	bne.n	8005caa <HAL_GPIO_Init+0x21a>
 8005ca6:	2309      	movs	r3, #9
 8005ca8:	e012      	b.n	8005cd0 <HAL_GPIO_Init+0x240>
 8005caa:	230a      	movs	r3, #10
 8005cac:	e010      	b.n	8005cd0 <HAL_GPIO_Init+0x240>
 8005cae:	2308      	movs	r3, #8
 8005cb0:	e00e      	b.n	8005cd0 <HAL_GPIO_Init+0x240>
 8005cb2:	2307      	movs	r3, #7
 8005cb4:	e00c      	b.n	8005cd0 <HAL_GPIO_Init+0x240>
 8005cb6:	2306      	movs	r3, #6
 8005cb8:	e00a      	b.n	8005cd0 <HAL_GPIO_Init+0x240>
 8005cba:	2305      	movs	r3, #5
 8005cbc:	e008      	b.n	8005cd0 <HAL_GPIO_Init+0x240>
 8005cbe:	2304      	movs	r3, #4
 8005cc0:	e006      	b.n	8005cd0 <HAL_GPIO_Init+0x240>
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e004      	b.n	8005cd0 <HAL_GPIO_Init+0x240>
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	e002      	b.n	8005cd0 <HAL_GPIO_Init+0x240>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <HAL_GPIO_Init+0x240>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	69fa      	ldr	r2, [r7, #28]
 8005cd2:	f002 0203 	and.w	r2, r2, #3
 8005cd6:	0092      	lsls	r2, r2, #2
 8005cd8:	4093      	lsls	r3, r2
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005ce0:	4935      	ldr	r1, [pc, #212]	; (8005db8 <HAL_GPIO_Init+0x328>)
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	089b      	lsrs	r3, r3, #2
 8005ce6:	3302      	adds	r3, #2
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cee:	4b3d      	ldr	r3, [pc, #244]	; (8005de4 <HAL_GPIO_Init+0x354>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	43db      	mvns	r3, r3
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d12:	4a34      	ldr	r2, [pc, #208]	; (8005de4 <HAL_GPIO_Init+0x354>)
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d18:	4b32      	ldr	r3, [pc, #200]	; (8005de4 <HAL_GPIO_Init+0x354>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	43db      	mvns	r3, r3
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	4013      	ands	r3, r2
 8005d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d3c:	4a29      	ldr	r2, [pc, #164]	; (8005de4 <HAL_GPIO_Init+0x354>)
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d42:	4b28      	ldr	r3, [pc, #160]	; (8005de4 <HAL_GPIO_Init+0x354>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	43db      	mvns	r3, r3
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d66:	4a1f      	ldr	r2, [pc, #124]	; (8005de4 <HAL_GPIO_Init+0x354>)
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d6c:	4b1d      	ldr	r3, [pc, #116]	; (8005de4 <HAL_GPIO_Init+0x354>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	43db      	mvns	r3, r3
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d90:	4a14      	ldr	r2, [pc, #80]	; (8005de4 <HAL_GPIO_Init+0x354>)
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	61fb      	str	r3, [r7, #28]
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	2b0f      	cmp	r3, #15
 8005da0:	f67f ae86 	bls.w	8005ab0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop
 8005da8:	3724      	adds	r7, #36	; 0x24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	40023800 	.word	0x40023800
 8005db8:	40013800 	.word	0x40013800
 8005dbc:	40020000 	.word	0x40020000
 8005dc0:	40020400 	.word	0x40020400
 8005dc4:	40020800 	.word	0x40020800
 8005dc8:	40020c00 	.word	0x40020c00
 8005dcc:	40021000 	.word	0x40021000
 8005dd0:	40021400 	.word	0x40021400
 8005dd4:	40021800 	.word	0x40021800
 8005dd8:	40021c00 	.word	0x40021c00
 8005ddc:	40022000 	.word	0x40022000
 8005de0:	40022400 	.word	0x40022400
 8005de4:	40013c00 	.word	0x40013c00

08005de8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005df2:	2300      	movs	r3, #0
 8005df4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005dfe:	2300      	movs	r3, #0
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	e0d9      	b.n	8005fb8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005e04:	2201      	movs	r2, #1
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4013      	ands	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	f040 80c9 	bne.w	8005fb2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005e20:	4a6b      	ldr	r2, [pc, #428]	; (8005fd0 <HAL_GPIO_DeInit+0x1e8>)
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	089b      	lsrs	r3, r3, #2
 8005e26:	3302      	adds	r3, #2
 8005e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e2c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f003 0303 	and.w	r3, r3, #3
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	220f      	movs	r2, #15
 8005e38:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a63      	ldr	r2, [pc, #396]	; (8005fd4 <HAL_GPIO_DeInit+0x1ec>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d037      	beq.n	8005eba <HAL_GPIO_DeInit+0xd2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a62      	ldr	r2, [pc, #392]	; (8005fd8 <HAL_GPIO_DeInit+0x1f0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d031      	beq.n	8005eb6 <HAL_GPIO_DeInit+0xce>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a61      	ldr	r2, [pc, #388]	; (8005fdc <HAL_GPIO_DeInit+0x1f4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d02b      	beq.n	8005eb2 <HAL_GPIO_DeInit+0xca>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a60      	ldr	r2, [pc, #384]	; (8005fe0 <HAL_GPIO_DeInit+0x1f8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d025      	beq.n	8005eae <HAL_GPIO_DeInit+0xc6>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a5f      	ldr	r2, [pc, #380]	; (8005fe4 <HAL_GPIO_DeInit+0x1fc>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d01f      	beq.n	8005eaa <HAL_GPIO_DeInit+0xc2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a5e      	ldr	r2, [pc, #376]	; (8005fe8 <HAL_GPIO_DeInit+0x200>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d019      	beq.n	8005ea6 <HAL_GPIO_DeInit+0xbe>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a5d      	ldr	r2, [pc, #372]	; (8005fec <HAL_GPIO_DeInit+0x204>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d013      	beq.n	8005ea2 <HAL_GPIO_DeInit+0xba>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a5c      	ldr	r2, [pc, #368]	; (8005ff0 <HAL_GPIO_DeInit+0x208>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00d      	beq.n	8005e9e <HAL_GPIO_DeInit+0xb6>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a5b      	ldr	r2, [pc, #364]	; (8005ff4 <HAL_GPIO_DeInit+0x20c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d007      	beq.n	8005e9a <HAL_GPIO_DeInit+0xb2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a5a      	ldr	r2, [pc, #360]	; (8005ff8 <HAL_GPIO_DeInit+0x210>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d101      	bne.n	8005e96 <HAL_GPIO_DeInit+0xae>
 8005e92:	2309      	movs	r3, #9
 8005e94:	e012      	b.n	8005ebc <HAL_GPIO_DeInit+0xd4>
 8005e96:	230a      	movs	r3, #10
 8005e98:	e010      	b.n	8005ebc <HAL_GPIO_DeInit+0xd4>
 8005e9a:	2308      	movs	r3, #8
 8005e9c:	e00e      	b.n	8005ebc <HAL_GPIO_DeInit+0xd4>
 8005e9e:	2307      	movs	r3, #7
 8005ea0:	e00c      	b.n	8005ebc <HAL_GPIO_DeInit+0xd4>
 8005ea2:	2306      	movs	r3, #6
 8005ea4:	e00a      	b.n	8005ebc <HAL_GPIO_DeInit+0xd4>
 8005ea6:	2305      	movs	r3, #5
 8005ea8:	e008      	b.n	8005ebc <HAL_GPIO_DeInit+0xd4>
 8005eaa:	2304      	movs	r3, #4
 8005eac:	e006      	b.n	8005ebc <HAL_GPIO_DeInit+0xd4>
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e004      	b.n	8005ebc <HAL_GPIO_DeInit+0xd4>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	e002      	b.n	8005ebc <HAL_GPIO_DeInit+0xd4>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <HAL_GPIO_DeInit+0xd4>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	f002 0203 	and.w	r2, r2, #3
 8005ec2:	0092      	lsls	r2, r2, #2
 8005ec4:	4093      	lsls	r3, r2
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d132      	bne.n	8005f32 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005ecc:	4b4b      	ldr	r3, [pc, #300]	; (8005ffc <HAL_GPIO_DeInit+0x214>)
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	4949      	ldr	r1, [pc, #292]	; (8005ffc <HAL_GPIO_DeInit+0x214>)
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005eda:	4b48      	ldr	r3, [pc, #288]	; (8005ffc <HAL_GPIO_DeInit+0x214>)
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	43db      	mvns	r3, r3
 8005ee2:	4946      	ldr	r1, [pc, #280]	; (8005ffc <HAL_GPIO_DeInit+0x214>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005ee8:	4b44      	ldr	r3, [pc, #272]	; (8005ffc <HAL_GPIO_DeInit+0x214>)
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	43db      	mvns	r3, r3
 8005ef0:	4942      	ldr	r1, [pc, #264]	; (8005ffc <HAL_GPIO_DeInit+0x214>)
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005ef6:	4b41      	ldr	r3, [pc, #260]	; (8005ffc <HAL_GPIO_DeInit+0x214>)
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	43db      	mvns	r3, r3
 8005efe:	493f      	ldr	r1, [pc, #252]	; (8005ffc <HAL_GPIO_DeInit+0x214>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	220f      	movs	r2, #15
 8005f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f12:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005f14:	4a2e      	ldr	r2, [pc, #184]	; (8005fd0 <HAL_GPIO_DeInit+0x1e8>)
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	089b      	lsrs	r3, r3, #2
 8005f1a:	3302      	adds	r3, #2
 8005f1c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	43da      	mvns	r2, r3
 8005f24:	482a      	ldr	r0, [pc, #168]	; (8005fd0 <HAL_GPIO_DeInit+0x1e8>)
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	089b      	lsrs	r3, r3, #2
 8005f2a:	400a      	ands	r2, r1
 8005f2c:	3302      	adds	r3, #2
 8005f2e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	2103      	movs	r1, #3
 8005f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f40:	43db      	mvns	r3, r3
 8005f42:	401a      	ands	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	08da      	lsrs	r2, r3, #3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3208      	adds	r2, #8
 8005f50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	220f      	movs	r2, #15
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	43db      	mvns	r3, r3
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	08d2      	lsrs	r2, r2, #3
 8005f68:	4019      	ands	r1, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	3208      	adds	r2, #8
 8005f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	2103      	movs	r1, #3
 8005f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f80:	43db      	mvns	r3, r3
 8005f82:	401a      	ands	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	fa01 f303 	lsl.w	r3, r1, r3
 8005f94:	43db      	mvns	r3, r3
 8005f96:	401a      	ands	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	2103      	movs	r1, #3
 8005fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8005faa:	43db      	mvns	r3, r3
 8005fac:	401a      	ands	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2b0f      	cmp	r3, #15
 8005fbc:	f67f af22 	bls.w	8005e04 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005fc0:	bf00      	nop
 8005fc2:	bf00      	nop
 8005fc4:	371c      	adds	r7, #28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	40013800 	.word	0x40013800
 8005fd4:	40020000 	.word	0x40020000
 8005fd8:	40020400 	.word	0x40020400
 8005fdc:	40020800 	.word	0x40020800
 8005fe0:	40020c00 	.word	0x40020c00
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	40021400 	.word	0x40021400
 8005fec:	40021800 	.word	0x40021800
 8005ff0:	40021c00 	.word	0x40021c00
 8005ff4:	40022000 	.word	0x40022000
 8005ff8:	40022400 	.word	0x40022400
 8005ffc:	40013c00 	.word	0x40013c00

08006000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691a      	ldr	r2, [r3, #16]
 8006010:	887b      	ldrh	r3, [r7, #2]
 8006012:	4013      	ands	r3, r2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006018:	2301      	movs	r3, #1
 800601a:	73fb      	strb	r3, [r7, #15]
 800601c:	e001      	b.n	8006022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800601e:	2300      	movs	r3, #0
 8006020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006022:	7bfb      	ldrb	r3, [r7, #15]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	807b      	strh	r3, [r7, #2]
 800603c:	4613      	mov	r3, r2
 800603e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006040:	787b      	ldrb	r3, [r7, #1]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006046:	887a      	ldrh	r2, [r7, #2]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800604c:	e003      	b.n	8006056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800604e:	887b      	ldrh	r3, [r7, #2]
 8006050:	041a      	lsls	r2, r3, #16
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	619a      	str	r2, [r3, #24]
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
	...

08006064 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	4603      	mov	r3, r0
 800606c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800606e:	4b08      	ldr	r3, [pc, #32]	; (8006090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006070:	695a      	ldr	r2, [r3, #20]
 8006072:	88fb      	ldrh	r3, [r7, #6]
 8006074:	4013      	ands	r3, r2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d006      	beq.n	8006088 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800607a:	4a05      	ldr	r2, [pc, #20]	; (8006090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800607c:	88fb      	ldrh	r3, [r7, #6]
 800607e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006080:	88fb      	ldrh	r3, [r7, #6]
 8006082:	4618      	mov	r0, r3
 8006084:	f7fb fe78 	bl	8001d78 <HAL_GPIO_EXTI_Callback>
  }
}
 8006088:	bf00      	nop
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	40013c00 	.word	0x40013c00

08006094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e07f      	b.n	80061a6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d106      	bne.n	80060c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fd fbc0 	bl	8003840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2224      	movs	r2, #36	; 0x24
 80060c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0201 	bic.w	r2, r2, #1
 80060d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80060e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d107      	bne.n	800610e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800610a:	609a      	str	r2, [r3, #8]
 800610c:	e006      	b.n	800611c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800611a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d104      	bne.n	800612e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800612c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6859      	ldr	r1, [r3, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	4b1d      	ldr	r3, [pc, #116]	; (80061b0 <HAL_I2C_Init+0x11c>)
 800613a:	430b      	orrs	r3, r1
 800613c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68da      	ldr	r2, [r3, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800614c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691a      	ldr	r2, [r3, #16]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	69d9      	ldr	r1, [r3, #28]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1a      	ldr	r2, [r3, #32]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0201 	orr.w	r2, r2, #1
 8006186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2220      	movs	r2, #32
 8006192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	02008000 	.word	0x02008000

080061b4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e021      	b.n	800620a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2224      	movs	r2, #36	; 0x24
 80061ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 0201 	bic.w	r2, r2, #1
 80061dc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7fd fbd6 	bl	8003990 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af02      	add	r7, sp, #8
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	4608      	mov	r0, r1
 800621e:	4611      	mov	r1, r2
 8006220:	461a      	mov	r2, r3
 8006222:	4603      	mov	r3, r0
 8006224:	817b      	strh	r3, [r7, #10]
 8006226:	460b      	mov	r3, r1
 8006228:	813b      	strh	r3, [r7, #8]
 800622a:	4613      	mov	r3, r2
 800622c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b20      	cmp	r3, #32
 8006238:	f040 80f9 	bne.w	800642e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <HAL_I2C_Mem_Write+0x34>
 8006242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006244:	2b00      	cmp	r3, #0
 8006246:	d105      	bne.n	8006254 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800624e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e0ed      	b.n	8006430 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800625a:	2b01      	cmp	r3, #1
 800625c:	d101      	bne.n	8006262 <HAL_I2C_Mem_Write+0x4e>
 800625e:	2302      	movs	r3, #2
 8006260:	e0e6      	b.n	8006430 <HAL_I2C_Mem_Write+0x21c>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800626a:	f7fe f8cb 	bl	8004404 <HAL_GetTick>
 800626e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	2319      	movs	r3, #25
 8006276:	2201      	movs	r2, #1
 8006278:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 fad1 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e0d1      	b.n	8006430 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2221      	movs	r2, #33	; 0x21
 8006290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2240      	movs	r2, #64	; 0x40
 8006298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a3a      	ldr	r2, [r7, #32]
 80062a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80062ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062b4:	88f8      	ldrh	r0, [r7, #6]
 80062b6:	893a      	ldrh	r2, [r7, #8]
 80062b8:	8979      	ldrh	r1, [r7, #10]
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	9301      	str	r3, [sp, #4]
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	4603      	mov	r3, r0
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 f9e1 	bl	800668c <I2C_RequestMemoryWrite>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d005      	beq.n	80062dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e0a9      	b.n	8006430 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2bff      	cmp	r3, #255	; 0xff
 80062e4:	d90e      	bls.n	8006304 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	22ff      	movs	r2, #255	; 0xff
 80062ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	8979      	ldrh	r1, [r7, #10]
 80062f4:	2300      	movs	r3, #0
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 fc39 	bl	8006b74 <I2C_TransferConfig>
 8006302:	e00f      	b.n	8006324 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006308:	b29a      	uxth	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006312:	b2da      	uxtb	r2, r3
 8006314:	8979      	ldrh	r1, [r7, #10]
 8006316:	2300      	movs	r3, #0
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 fc28 	bl	8006b74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 fabb 	bl	80068a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e07b      	b.n	8006430 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	781a      	ldrb	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006352:	b29b      	uxth	r3, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d034      	beq.n	80063dc <HAL_I2C_Mem_Write+0x1c8>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006376:	2b00      	cmp	r3, #0
 8006378:	d130      	bne.n	80063dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	2200      	movs	r2, #0
 8006382:	2180      	movs	r1, #128	; 0x80
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 fa4d 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e04d      	b.n	8006430 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006398:	b29b      	uxth	r3, r3
 800639a:	2bff      	cmp	r3, #255	; 0xff
 800639c:	d90e      	bls.n	80063bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	22ff      	movs	r2, #255	; 0xff
 80063a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	8979      	ldrh	r1, [r7, #10]
 80063ac:	2300      	movs	r3, #0
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 fbdd 	bl	8006b74 <I2C_TransferConfig>
 80063ba:	e00f      	b.n	80063dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	8979      	ldrh	r1, [r7, #10]
 80063ce:	2300      	movs	r3, #0
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 fbcc 	bl	8006b74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d19e      	bne.n	8006324 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 fa9a 	bl	8006924 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e01a      	b.n	8006430 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2220      	movs	r2, #32
 8006400:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6859      	ldr	r1, [r3, #4]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <HAL_I2C_Mem_Write+0x224>)
 800640e:	400b      	ands	r3, r1
 8006410:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2220      	movs	r2, #32
 8006416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	e000      	b.n	8006430 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800642e:	2302      	movs	r3, #2
  }
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	fe00e800 	.word	0xfe00e800

0800643c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af02      	add	r7, sp, #8
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	4608      	mov	r0, r1
 8006446:	4611      	mov	r1, r2
 8006448:	461a      	mov	r2, r3
 800644a:	4603      	mov	r3, r0
 800644c:	817b      	strh	r3, [r7, #10]
 800644e:	460b      	mov	r3, r1
 8006450:	813b      	strh	r3, [r7, #8]
 8006452:	4613      	mov	r3, r2
 8006454:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b20      	cmp	r3, #32
 8006460:	f040 80fd 	bne.w	800665e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <HAL_I2C_Mem_Read+0x34>
 800646a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	d105      	bne.n	800647c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006476:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e0f1      	b.n	8006660 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006482:	2b01      	cmp	r3, #1
 8006484:	d101      	bne.n	800648a <HAL_I2C_Mem_Read+0x4e>
 8006486:	2302      	movs	r3, #2
 8006488:	e0ea      	b.n	8006660 <HAL_I2C_Mem_Read+0x224>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006492:	f7fd ffb7 	bl	8004404 <HAL_GetTick>
 8006496:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	2319      	movs	r3, #25
 800649e:	2201      	movs	r2, #1
 80064a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 f9bd 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e0d5      	b.n	8006660 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2222      	movs	r2, #34	; 0x22
 80064b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2240      	movs	r2, #64	; 0x40
 80064c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a3a      	ldr	r2, [r7, #32]
 80064ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80064d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064dc:	88f8      	ldrh	r0, [r7, #6]
 80064de:	893a      	ldrh	r2, [r7, #8]
 80064e0:	8979      	ldrh	r1, [r7, #10]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	9301      	str	r3, [sp, #4]
 80064e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	4603      	mov	r3, r0
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 f921 	bl	8006734 <I2C_RequestMemoryRead>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d005      	beq.n	8006504 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e0ad      	b.n	8006660 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006508:	b29b      	uxth	r3, r3
 800650a:	2bff      	cmp	r3, #255	; 0xff
 800650c:	d90e      	bls.n	800652c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	22ff      	movs	r2, #255	; 0xff
 8006512:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006518:	b2da      	uxtb	r2, r3
 800651a:	8979      	ldrh	r1, [r7, #10]
 800651c:	4b52      	ldr	r3, [pc, #328]	; (8006668 <HAL_I2C_Mem_Read+0x22c>)
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 fb25 	bl	8006b74 <I2C_TransferConfig>
 800652a:	e00f      	b.n	800654c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006530:	b29a      	uxth	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653a:	b2da      	uxtb	r2, r3
 800653c:	8979      	ldrh	r1, [r7, #10]
 800653e:	4b4a      	ldr	r3, [pc, #296]	; (8006668 <HAL_I2C_Mem_Read+0x22c>)
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 fb14 	bl	8006b74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	2200      	movs	r2, #0
 8006554:	2104      	movs	r1, #4
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 f964 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e07c      	b.n	8006660 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	b2d2      	uxtb	r2, r2
 8006572:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006582:	3b01      	subs	r3, #1
 8006584:	b29a      	uxth	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800658e:	b29b      	uxth	r3, r3
 8006590:	3b01      	subs	r3, #1
 8006592:	b29a      	uxth	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659c:	b29b      	uxth	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d034      	beq.n	800660c <HAL_I2C_Mem_Read+0x1d0>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d130      	bne.n	800660c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	2200      	movs	r2, #0
 80065b2:	2180      	movs	r1, #128	; 0x80
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 f935 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e04d      	b.n	8006660 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2bff      	cmp	r3, #255	; 0xff
 80065cc:	d90e      	bls.n	80065ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	22ff      	movs	r2, #255	; 0xff
 80065d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	8979      	ldrh	r1, [r7, #10]
 80065dc:	2300      	movs	r3, #0
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f000 fac5 	bl	8006b74 <I2C_TransferConfig>
 80065ea:	e00f      	b.n	800660c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	8979      	ldrh	r1, [r7, #10]
 80065fe:	2300      	movs	r3, #0
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 fab4 	bl	8006b74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d19a      	bne.n	800654c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 f982 	bl	8006924 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e01a      	b.n	8006660 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2220      	movs	r2, #32
 8006630:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6859      	ldr	r1, [r3, #4]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	4b0b      	ldr	r3, [pc, #44]	; (800666c <HAL_I2C_Mem_Read+0x230>)
 800663e:	400b      	ands	r3, r1
 8006640:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2220      	movs	r2, #32
 8006646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	e000      	b.n	8006660 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800665e:	2302      	movs	r3, #2
  }
}
 8006660:	4618      	mov	r0, r3
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	80002400 	.word	0x80002400
 800666c:	fe00e800 	.word	0xfe00e800

08006670 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800667e:	b2db      	uxtb	r3, r3
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af02      	add	r7, sp, #8
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	4608      	mov	r0, r1
 8006696:	4611      	mov	r1, r2
 8006698:	461a      	mov	r2, r3
 800669a:	4603      	mov	r3, r0
 800669c:	817b      	strh	r3, [r7, #10]
 800669e:	460b      	mov	r3, r1
 80066a0:	813b      	strh	r3, [r7, #8]
 80066a2:	4613      	mov	r3, r2
 80066a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80066a6:	88fb      	ldrh	r3, [r7, #6]
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	8979      	ldrh	r1, [r7, #10]
 80066ac:	4b20      	ldr	r3, [pc, #128]	; (8006730 <I2C_RequestMemoryWrite+0xa4>)
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 fa5d 	bl	8006b74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ba:	69fa      	ldr	r2, [r7, #28]
 80066bc:	69b9      	ldr	r1, [r7, #24]
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 f8f0 	bl	80068a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e02c      	b.n	8006728 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066ce:	88fb      	ldrh	r3, [r7, #6]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d105      	bne.n	80066e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066d4:	893b      	ldrh	r3, [r7, #8]
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	629a      	str	r2, [r3, #40]	; 0x28
 80066de:	e015      	b.n	800670c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80066e0:	893b      	ldrh	r3, [r7, #8]
 80066e2:	0a1b      	lsrs	r3, r3, #8
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ee:	69fa      	ldr	r2, [r7, #28]
 80066f0:	69b9      	ldr	r1, [r7, #24]
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 f8d6 	bl	80068a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e012      	b.n	8006728 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006702:	893b      	ldrh	r3, [r7, #8]
 8006704:	b2da      	uxtb	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	2200      	movs	r2, #0
 8006714:	2180      	movs	r1, #128	; 0x80
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 f884 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	80002000 	.word	0x80002000

08006734 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af02      	add	r7, sp, #8
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	4608      	mov	r0, r1
 800673e:	4611      	mov	r1, r2
 8006740:	461a      	mov	r2, r3
 8006742:	4603      	mov	r3, r0
 8006744:	817b      	strh	r3, [r7, #10]
 8006746:	460b      	mov	r3, r1
 8006748:	813b      	strh	r3, [r7, #8]
 800674a:	4613      	mov	r3, r2
 800674c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	b2da      	uxtb	r2, r3
 8006752:	8979      	ldrh	r1, [r7, #10]
 8006754:	4b20      	ldr	r3, [pc, #128]	; (80067d8 <I2C_RequestMemoryRead+0xa4>)
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	2300      	movs	r3, #0
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 fa0a 	bl	8006b74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006760:	69fa      	ldr	r2, [r7, #28]
 8006762:	69b9      	ldr	r1, [r7, #24]
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f89d 	bl	80068a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e02c      	b.n	80067ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006774:	88fb      	ldrh	r3, [r7, #6]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d105      	bne.n	8006786 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800677a:	893b      	ldrh	r3, [r7, #8]
 800677c:	b2da      	uxtb	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	629a      	str	r2, [r3, #40]	; 0x28
 8006784:	e015      	b.n	80067b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006786:	893b      	ldrh	r3, [r7, #8]
 8006788:	0a1b      	lsrs	r3, r3, #8
 800678a:	b29b      	uxth	r3, r3
 800678c:	b2da      	uxtb	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006794:	69fa      	ldr	r2, [r7, #28]
 8006796:	69b9      	ldr	r1, [r7, #24]
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 f883 	bl	80068a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e012      	b.n	80067ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067a8:	893b      	ldrh	r3, [r7, #8]
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	2200      	movs	r2, #0
 80067ba:	2140      	movs	r1, #64	; 0x40
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 f831 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e000      	b.n	80067ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	80002000 	.word	0x80002000

080067dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d103      	bne.n	80067fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2200      	movs	r2, #0
 80067f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b01      	cmp	r3, #1
 8006806:	d007      	beq.n	8006818 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699a      	ldr	r2, [r3, #24]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0201 	orr.w	r2, r2, #1
 8006816:	619a      	str	r2, [r3, #24]
  }
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	603b      	str	r3, [r7, #0]
 8006830:	4613      	mov	r3, r2
 8006832:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006834:	e022      	b.n	800687c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683c:	d01e      	beq.n	800687c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800683e:	f7fd fde1 	bl	8004404 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	429a      	cmp	r2, r3
 800684c:	d302      	bcc.n	8006854 <I2C_WaitOnFlagUntilTimeout+0x30>
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d113      	bne.n	800687c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006858:	f043 0220 	orr.w	r2, r3, #32
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2220      	movs	r2, #32
 8006864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e00f      	b.n	800689c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	699a      	ldr	r2, [r3, #24]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	4013      	ands	r3, r2
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	429a      	cmp	r2, r3
 800688a:	bf0c      	ite	eq
 800688c:	2301      	moveq	r3, #1
 800688e:	2300      	movne	r3, #0
 8006890:	b2db      	uxtb	r3, r3
 8006892:	461a      	mov	r2, r3
 8006894:	79fb      	ldrb	r3, [r7, #7]
 8006896:	429a      	cmp	r2, r3
 8006898:	d0cd      	beq.n	8006836 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068b0:	e02c      	b.n	800690c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	68b9      	ldr	r1, [r7, #8]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f870 	bl	800699c <I2C_IsErrorOccurred>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e02a      	b.n	800691c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068cc:	d01e      	beq.n	800690c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ce:	f7fd fd99 	bl	8004404 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d302      	bcc.n	80068e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d113      	bne.n	800690c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e8:	f043 0220 	orr.w	r2, r3, #32
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e007      	b.n	800691c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b02      	cmp	r3, #2
 8006918:	d1cb      	bne.n	80068b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006930:	e028      	b.n	8006984 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	68b9      	ldr	r1, [r7, #8]
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 f830 	bl	800699c <I2C_IsErrorOccurred>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e026      	b.n	8006994 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006946:	f7fd fd5d 	bl	8004404 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	429a      	cmp	r2, r3
 8006954:	d302      	bcc.n	800695c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d113      	bne.n	8006984 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006960:	f043 0220 	orr.w	r2, r3, #32
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2220      	movs	r2, #32
 800696c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e007      	b.n	8006994 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	f003 0320 	and.w	r3, r3, #32
 800698e:	2b20      	cmp	r3, #32
 8006990:	d1cf      	bne.n	8006932 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08a      	sub	sp, #40	; 0x28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80069b6:	2300      	movs	r3, #0
 80069b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	f003 0310 	and.w	r3, r3, #16
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d075      	beq.n	8006ab4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2210      	movs	r2, #16
 80069ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069d0:	e056      	b.n	8006a80 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d8:	d052      	beq.n	8006a80 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069da:	f7fd fd13 	bl	8004404 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d302      	bcc.n	80069f0 <I2C_IsErrorOccurred+0x54>
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d147      	bne.n	8006a80 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a12:	d12e      	bne.n	8006a72 <I2C_IsErrorOccurred+0xd6>
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a1a:	d02a      	beq.n	8006a72 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006a1c:	7cfb      	ldrb	r3, [r7, #19]
 8006a1e:	2b20      	cmp	r3, #32
 8006a20:	d027      	beq.n	8006a72 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a30:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006a32:	f7fd fce7 	bl	8004404 <HAL_GetTick>
 8006a36:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a38:	e01b      	b.n	8006a72 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006a3a:	f7fd fce3 	bl	8004404 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b19      	cmp	r3, #25
 8006a46:	d914      	bls.n	8006a72 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4c:	f043 0220 	orr.w	r2, r3, #32
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	f003 0320 	and.w	r3, r3, #32
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	d1dc      	bne.n	8006a3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	f003 0320 	and.w	r3, r3, #32
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	d003      	beq.n	8006a96 <I2C_IsErrorOccurred+0xfa>
 8006a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d09d      	beq.n	80069d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d103      	bne.n	8006aa6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	f043 0304 	orr.w	r3, r3, #4
 8006aac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00b      	beq.n	8006ade <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	f043 0301 	orr.w	r3, r3, #1
 8006acc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ad6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00b      	beq.n	8006b00 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	f043 0308 	orr.w	r3, r3, #8
 8006aee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006af8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00b      	beq.n	8006b22 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	f043 0302 	orr.w	r3, r3, #2
 8006b10:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d01c      	beq.n	8006b64 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f7ff fe56 	bl	80067dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6859      	ldr	r1, [r3, #4]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	4b0d      	ldr	r3, [pc, #52]	; (8006b70 <I2C_IsErrorOccurred+0x1d4>)
 8006b3c:	400b      	ands	r3, r1
 8006b3e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3728      	adds	r7, #40	; 0x28
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	fe00e800 	.word	0xfe00e800

08006b74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b087      	sub	sp, #28
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	607b      	str	r3, [r7, #4]
 8006b7e:	460b      	mov	r3, r1
 8006b80:	817b      	strh	r3, [r7, #10]
 8006b82:	4613      	mov	r3, r2
 8006b84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b86:	897b      	ldrh	r3, [r7, #10]
 8006b88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b8c:	7a7b      	ldrb	r3, [r7, #9]
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b94:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ba2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	0d5b      	lsrs	r3, r3, #21
 8006bae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006bb2:	4b08      	ldr	r3, [pc, #32]	; (8006bd4 <I2C_TransferConfig+0x60>)
 8006bb4:	430b      	orrs	r3, r1
 8006bb6:	43db      	mvns	r3, r3
 8006bb8:	ea02 0103 	and.w	r1, r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006bc6:	bf00      	nop
 8006bc8:	371c      	adds	r7, #28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	03ff63ff 	.word	0x03ff63ff

08006bd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	d138      	bne.n	8006c60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d101      	bne.n	8006bfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e032      	b.n	8006c62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2224      	movs	r2, #36	; 0x24
 8006c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0201 	bic.w	r2, r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6819      	ldr	r1, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0201 	orr.w	r2, r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	e000      	b.n	8006c62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c60:	2302      	movs	r3, #2
  }
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b085      	sub	sp, #20
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b20      	cmp	r3, #32
 8006c82:	d139      	bne.n	8006cf8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d101      	bne.n	8006c92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	e033      	b.n	8006cfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2224      	movs	r2, #36	; 0x24
 8006c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0201 	bic.w	r2, r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006cc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0201 	orr.w	r2, r2, #1
 8006ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	e000      	b.n	8006cfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006cf8:	2302      	movs	r3, #2
  }
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
	...

08006d08 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e0bf      	b.n	8006e9a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d106      	bne.n	8006d34 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fc fe6a 	bl	8003a08 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699a      	ldr	r2, [r3, #24]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006d4a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6999      	ldr	r1, [r3, #24]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d60:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6899      	ldr	r1, [r3, #8]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	4b4a      	ldr	r3, [pc, #296]	; (8006ea4 <HAL_LTDC_Init+0x19c>)
 8006d7c:	400b      	ands	r3, r1
 8006d7e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	041b      	lsls	r3, r3, #16
 8006d86:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6899      	ldr	r1, [r3, #8]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699a      	ldr	r2, [r3, #24]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	431a      	orrs	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68d9      	ldr	r1, [r3, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	4b3e      	ldr	r3, [pc, #248]	; (8006ea4 <HAL_LTDC_Init+0x19c>)
 8006daa:	400b      	ands	r3, r1
 8006dac:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	041b      	lsls	r3, r3, #16
 8006db4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68d9      	ldr	r1, [r3, #12]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1a      	ldr	r2, [r3, #32]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6919      	ldr	r1, [r3, #16]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	4b33      	ldr	r3, [pc, #204]	; (8006ea4 <HAL_LTDC_Init+0x19c>)
 8006dd8:	400b      	ands	r3, r1
 8006dda:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de0:	041b      	lsls	r3, r3, #16
 8006de2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6919      	ldr	r1, [r3, #16]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	431a      	orrs	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6959      	ldr	r1, [r3, #20]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	4b27      	ldr	r3, [pc, #156]	; (8006ea4 <HAL_LTDC_Init+0x19c>)
 8006e06:	400b      	ands	r3, r1
 8006e08:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0e:	041b      	lsls	r3, r3, #16
 8006e10:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6959      	ldr	r1, [r3, #20]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	430a      	orrs	r2, r1
 8006e26:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e2e:	021b      	lsls	r3, r3, #8
 8006e30:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006e38:	041b      	lsls	r3, r3, #16
 8006e3a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f042 0206 	orr.w	r2, r2, #6
 8006e76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	699a      	ldr	r2, [r3, #24]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0201 	orr.w	r2, r2, #1
 8006e86:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	f000f800 	.word	0xf000f800

08006ea8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ebe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f003 0304 	and.w	r3, r3, #4
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d023      	beq.n	8006f12 <HAL_LTDC_IRQHandler+0x6a>
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f003 0304 	and.w	r3, r3, #4
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01e      	beq.n	8006f12 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 0204 	bic.w	r2, r2, #4
 8006ee2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2204      	movs	r2, #4
 8006eea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ef2:	f043 0201 	orr.w	r2, r3, #1
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2204      	movs	r2, #4
 8006f00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f86f 	bl	8006ff0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d023      	beq.n	8006f64 <HAL_LTDC_IRQHandler+0xbc>
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d01e      	beq.n	8006f64 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 0202 	bic.w	r2, r2, #2
 8006f34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006f44:	f043 0202 	orr.w	r2, r3, #2
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2204      	movs	r2, #4
 8006f52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f846 	bl	8006ff0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d01b      	beq.n	8006fa6 <HAL_LTDC_IRQHandler+0xfe>
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d016      	beq.n	8006fa6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f022 0201 	bic.w	r2, r2, #1
 8006f86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f82f 	bl	8007004 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d01b      	beq.n	8006fe8 <HAL_LTDC_IRQHandler+0x140>
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	f003 0308 	and.w	r3, r3, #8
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d016      	beq.n	8006fe8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 0208 	bic.w	r2, r2, #8
 8006fc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2208      	movs	r2, #8
 8006fd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f818 	bl	8007018 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006fe8:	bf00      	nop
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800702c:	b5b0      	push	{r4, r5, r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800703e:	2b01      	cmp	r3, #1
 8007040:	d101      	bne.n	8007046 <HAL_LTDC_ConfigLayer+0x1a>
 8007042:	2302      	movs	r3, #2
 8007044:	e02c      	b.n	80070a0 <HAL_LTDC_ConfigLayer+0x74>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2202      	movs	r2, #2
 8007052:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2134      	movs	r1, #52	; 0x34
 800705c:	fb01 f303 	mul.w	r3, r1, r3
 8007060:	4413      	add	r3, r2
 8007062:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	4614      	mov	r4, r2
 800706a:	461d      	mov	r5, r3
 800706c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800706e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	68b9      	ldr	r1, [r7, #8]
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 f81f 	bl	80070c4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2201      	movs	r2, #1
 800708c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bdb0      	pop	{r4, r5, r7, pc}

080070a8 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80070b6:	b2db      	uxtb	r3, r3
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b089      	sub	sp, #36	; 0x24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	0c1b      	lsrs	r3, r3, #16
 80070dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070e0:	4413      	add	r3, r2
 80070e2:	041b      	lsls	r3, r3, #16
 80070e4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	01db      	lsls	r3, r3, #7
 80070f0:	4413      	add	r3, r2
 80070f2:	3384      	adds	r3, #132	; 0x84
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	6812      	ldr	r2, [r2, #0]
 80070fa:	4611      	mov	r1, r2
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	01d2      	lsls	r2, r2, #7
 8007100:	440a      	add	r2, r1
 8007102:	3284      	adds	r2, #132	; 0x84
 8007104:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007108:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	0c1b      	lsrs	r3, r3, #16
 8007116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800711a:	4413      	add	r3, r2
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4619      	mov	r1, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	01db      	lsls	r3, r3, #7
 8007128:	440b      	add	r3, r1
 800712a:	3384      	adds	r3, #132	; 0x84
 800712c:	4619      	mov	r1, r3
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	4313      	orrs	r3, r2
 8007132:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	68da      	ldr	r2, [r3, #12]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007142:	4413      	add	r3, r2
 8007144:	041b      	lsls	r3, r3, #16
 8007146:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	461a      	mov	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	01db      	lsls	r3, r3, #7
 8007152:	4413      	add	r3, r2
 8007154:	3384      	adds	r3, #132	; 0x84
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	6812      	ldr	r2, [r2, #0]
 800715c:	4611      	mov	r1, r2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	01d2      	lsls	r2, r2, #7
 8007162:	440a      	add	r2, r1
 8007164:	3284      	adds	r2, #132	; 0x84
 8007166:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800716a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800717a:	4413      	add	r3, r2
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4619      	mov	r1, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	01db      	lsls	r3, r3, #7
 8007188:	440b      	add	r3, r1
 800718a:	3384      	adds	r3, #132	; 0x84
 800718c:	4619      	mov	r1, r3
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	4313      	orrs	r3, r2
 8007192:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	461a      	mov	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	01db      	lsls	r3, r3, #7
 800719e:	4413      	add	r3, r2
 80071a0:	3384      	adds	r3, #132	; 0x84
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	6812      	ldr	r2, [r2, #0]
 80071a8:	4611      	mov	r1, r2
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	01d2      	lsls	r2, r2, #7
 80071ae:	440a      	add	r2, r1
 80071b0:	3284      	adds	r2, #132	; 0x84
 80071b2:	f023 0307 	bic.w	r3, r3, #7
 80071b6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	461a      	mov	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	01db      	lsls	r3, r3, #7
 80071c2:	4413      	add	r3, r2
 80071c4:	3384      	adds	r3, #132	; 0x84
 80071c6:	461a      	mov	r2, r3
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80071d4:	021b      	lsls	r3, r3, #8
 80071d6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80071de:	041b      	lsls	r3, r3, #16
 80071e0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	061b      	lsls	r3, r3, #24
 80071e8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	01db      	lsls	r3, r3, #7
 80071f4:	4413      	add	r3, r2
 80071f6:	3384      	adds	r3, #132	; 0x84
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	461a      	mov	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	01db      	lsls	r3, r3, #7
 8007204:	4413      	add	r3, r2
 8007206:	3384      	adds	r3, #132	; 0x84
 8007208:	461a      	mov	r2, r3
 800720a:	2300      	movs	r3, #0
 800720c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007214:	461a      	mov	r2, r3
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	431a      	orrs	r2, r3
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	431a      	orrs	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4619      	mov	r1, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	01db      	lsls	r3, r3, #7
 8007228:	440b      	add	r3, r1
 800722a:	3384      	adds	r3, #132	; 0x84
 800722c:	4619      	mov	r1, r3
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	4313      	orrs	r3, r2
 8007232:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	461a      	mov	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	01db      	lsls	r3, r3, #7
 800723e:	4413      	add	r3, r2
 8007240:	3384      	adds	r3, #132	; 0x84
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	6812      	ldr	r2, [r2, #0]
 8007248:	4611      	mov	r1, r2
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	01d2      	lsls	r2, r2, #7
 800724e:	440a      	add	r2, r1
 8007250:	3284      	adds	r2, #132	; 0x84
 8007252:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007256:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	461a      	mov	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	01db      	lsls	r3, r3, #7
 8007262:	4413      	add	r3, r2
 8007264:	3384      	adds	r3, #132	; 0x84
 8007266:	461a      	mov	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	01db      	lsls	r3, r3, #7
 8007278:	4413      	add	r3, r2
 800727a:	3384      	adds	r3, #132	; 0x84
 800727c:	69da      	ldr	r2, [r3, #28]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4619      	mov	r1, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	01db      	lsls	r3, r3, #7
 8007288:	440b      	add	r3, r1
 800728a:	3384      	adds	r3, #132	; 0x84
 800728c:	4619      	mov	r1, r3
 800728e:	4b58      	ldr	r3, [pc, #352]	; (80073f0 <LTDC_SetConfig+0x32c>)
 8007290:	4013      	ands	r3, r2
 8007292:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	69da      	ldr	r2, [r3, #28]
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	68f9      	ldr	r1, [r7, #12]
 800729e:	6809      	ldr	r1, [r1, #0]
 80072a0:	4608      	mov	r0, r1
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	01c9      	lsls	r1, r1, #7
 80072a6:	4401      	add	r1, r0
 80072a8:	3184      	adds	r1, #132	; 0x84
 80072aa:	4313      	orrs	r3, r2
 80072ac:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	01db      	lsls	r3, r3, #7
 80072b8:	4413      	add	r3, r2
 80072ba:	3384      	adds	r3, #132	; 0x84
 80072bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	01db      	lsls	r3, r3, #7
 80072c8:	4413      	add	r3, r2
 80072ca:	3384      	adds	r3, #132	; 0x84
 80072cc:	461a      	mov	r2, r3
 80072ce:	2300      	movs	r3, #0
 80072d0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	01db      	lsls	r3, r3, #7
 80072dc:	4413      	add	r3, r2
 80072de:	3384      	adds	r3, #132	; 0x84
 80072e0:	461a      	mov	r2, r3
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d102      	bne.n	80072f6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80072f0:	2304      	movs	r3, #4
 80072f2:	61fb      	str	r3, [r7, #28]
 80072f4:	e01b      	b.n	800732e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d102      	bne.n	8007304 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80072fe:	2303      	movs	r3, #3
 8007300:	61fb      	str	r3, [r7, #28]
 8007302:	e014      	b.n	800732e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	2b04      	cmp	r3, #4
 800730a:	d00b      	beq.n	8007324 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007310:	2b02      	cmp	r3, #2
 8007312:	d007      	beq.n	8007324 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007318:	2b03      	cmp	r3, #3
 800731a:	d003      	beq.n	8007324 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007320:	2b07      	cmp	r3, #7
 8007322:	d102      	bne.n	800732a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007324:	2302      	movs	r3, #2
 8007326:	61fb      	str	r3, [r7, #28]
 8007328:	e001      	b.n	800732e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800732a:	2301      	movs	r3, #1
 800732c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	461a      	mov	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	01db      	lsls	r3, r3, #7
 8007338:	4413      	add	r3, r2
 800733a:	3384      	adds	r3, #132	; 0x84
 800733c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	6812      	ldr	r2, [r2, #0]
 8007342:	4611      	mov	r1, r2
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	01d2      	lsls	r2, r2, #7
 8007348:	440a      	add	r2, r1
 800734a:	3284      	adds	r2, #132	; 0x84
 800734c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007350:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007356:	69fa      	ldr	r2, [r7, #28]
 8007358:	fb02 f303 	mul.w	r3, r2, r3
 800735c:	041a      	lsls	r2, r3, #16
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	6859      	ldr	r1, [r3, #4]
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	1acb      	subs	r3, r1, r3
 8007368:	69f9      	ldr	r1, [r7, #28]
 800736a:	fb01 f303 	mul.w	r3, r1, r3
 800736e:	3303      	adds	r3, #3
 8007370:	68f9      	ldr	r1, [r7, #12]
 8007372:	6809      	ldr	r1, [r1, #0]
 8007374:	4608      	mov	r0, r1
 8007376:	6879      	ldr	r1, [r7, #4]
 8007378:	01c9      	lsls	r1, r1, #7
 800737a:	4401      	add	r1, r0
 800737c:	3184      	adds	r1, #132	; 0x84
 800737e:	4313      	orrs	r3, r2
 8007380:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	01db      	lsls	r3, r3, #7
 800738c:	4413      	add	r3, r2
 800738e:	3384      	adds	r3, #132	; 0x84
 8007390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4619      	mov	r1, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	01db      	lsls	r3, r3, #7
 800739c:	440b      	add	r3, r1
 800739e:	3384      	adds	r3, #132	; 0x84
 80073a0:	4619      	mov	r1, r3
 80073a2:	4b14      	ldr	r3, [pc, #80]	; (80073f4 <LTDC_SetConfig+0x330>)
 80073a4:	4013      	ands	r3, r2
 80073a6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	461a      	mov	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	01db      	lsls	r3, r3, #7
 80073b2:	4413      	add	r3, r2
 80073b4:	3384      	adds	r3, #132	; 0x84
 80073b6:	461a      	mov	r2, r3
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	01db      	lsls	r3, r3, #7
 80073c8:	4413      	add	r3, r2
 80073ca:	3384      	adds	r3, #132	; 0x84
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	6812      	ldr	r2, [r2, #0]
 80073d2:	4611      	mov	r1, r2
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	01d2      	lsls	r2, r2, #7
 80073d8:	440a      	add	r2, r1
 80073da:	3284      	adds	r2, #132	; 0x84
 80073dc:	f043 0301 	orr.w	r3, r3, #1
 80073e0:	6013      	str	r3, [r2, #0]
}
 80073e2:	bf00      	nop
 80073e4:	3724      	adds	r7, #36	; 0x24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	fffff8f8 	.word	0xfffff8f8
 80073f4:	fffff800 	.word	0xfffff800

080073f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80073f8:	b480      	push	{r7}
 80073fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073fc:	4b05      	ldr	r3, [pc, #20]	; (8007414 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a04      	ldr	r2, [pc, #16]	; (8007414 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007406:	6013      	str	r3, [r2, #0]
}
 8007408:	bf00      	nop
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	40007000 	.word	0x40007000

08007418 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800741e:	2300      	movs	r3, #0
 8007420:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007422:	4b23      	ldr	r3, [pc, #140]	; (80074b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	4a22      	ldr	r2, [pc, #136]	; (80074b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800742c:	6413      	str	r3, [r2, #64]	; 0x40
 800742e:	4b20      	ldr	r3, [pc, #128]	; (80074b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007436:	603b      	str	r3, [r7, #0]
 8007438:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800743a:	4b1e      	ldr	r3, [pc, #120]	; (80074b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a1d      	ldr	r2, [pc, #116]	; (80074b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007444:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007446:	f7fc ffdd 	bl	8004404 <HAL_GetTick>
 800744a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800744c:	e009      	b.n	8007462 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800744e:	f7fc ffd9 	bl	8004404 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800745c:	d901      	bls.n	8007462 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e022      	b.n	80074a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007462:	4b14      	ldr	r3, [pc, #80]	; (80074b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800746a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800746e:	d1ee      	bne.n	800744e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007470:	4b10      	ldr	r3, [pc, #64]	; (80074b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a0f      	ldr	r2, [pc, #60]	; (80074b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800747a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800747c:	f7fc ffc2 	bl	8004404 <HAL_GetTick>
 8007480:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007482:	e009      	b.n	8007498 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007484:	f7fc ffbe 	bl	8004404 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007492:	d901      	bls.n	8007498 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e007      	b.n	80074a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007498:	4b06      	ldr	r3, [pc, #24]	; (80074b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074a4:	d1ee      	bne.n	8007484 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	40023800 	.word	0x40023800
 80074b4:	40007000 	.word	0x40007000

080074b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80074c0:	2300      	movs	r3, #0
 80074c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e291      	b.n	80079f2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 8087 	beq.w	80075ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80074dc:	4b96      	ldr	r3, [pc, #600]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 030c 	and.w	r3, r3, #12
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	d00c      	beq.n	8007502 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074e8:	4b93      	ldr	r3, [pc, #588]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f003 030c 	and.w	r3, r3, #12
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d112      	bne.n	800751a <HAL_RCC_OscConfig+0x62>
 80074f4:	4b90      	ldr	r3, [pc, #576]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007500:	d10b      	bne.n	800751a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007502:	4b8d      	ldr	r3, [pc, #564]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d06c      	beq.n	80075e8 <HAL_RCC_OscConfig+0x130>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d168      	bne.n	80075e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e26b      	b.n	80079f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007522:	d106      	bne.n	8007532 <HAL_RCC_OscConfig+0x7a>
 8007524:	4b84      	ldr	r3, [pc, #528]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a83      	ldr	r2, [pc, #524]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 800752a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800752e:	6013      	str	r3, [r2, #0]
 8007530:	e02e      	b.n	8007590 <HAL_RCC_OscConfig+0xd8>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10c      	bne.n	8007554 <HAL_RCC_OscConfig+0x9c>
 800753a:	4b7f      	ldr	r3, [pc, #508]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a7e      	ldr	r2, [pc, #504]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	4b7c      	ldr	r3, [pc, #496]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a7b      	ldr	r2, [pc, #492]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 800754c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	e01d      	b.n	8007590 <HAL_RCC_OscConfig+0xd8>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800755c:	d10c      	bne.n	8007578 <HAL_RCC_OscConfig+0xc0>
 800755e:	4b76      	ldr	r3, [pc, #472]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a75      	ldr	r2, [pc, #468]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007568:	6013      	str	r3, [r2, #0]
 800756a:	4b73      	ldr	r3, [pc, #460]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a72      	ldr	r2, [pc, #456]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007574:	6013      	str	r3, [r2, #0]
 8007576:	e00b      	b.n	8007590 <HAL_RCC_OscConfig+0xd8>
 8007578:	4b6f      	ldr	r3, [pc, #444]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a6e      	ldr	r2, [pc, #440]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 800757e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	4b6c      	ldr	r3, [pc, #432]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a6b      	ldr	r2, [pc, #428]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 800758a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800758e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d013      	beq.n	80075c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007598:	f7fc ff34 	bl	8004404 <HAL_GetTick>
 800759c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800759e:	e008      	b.n	80075b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075a0:	f7fc ff30 	bl	8004404 <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	2b64      	cmp	r3, #100	; 0x64
 80075ac:	d901      	bls.n	80075b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e21f      	b.n	80079f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075b2:	4b61      	ldr	r3, [pc, #388]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d0f0      	beq.n	80075a0 <HAL_RCC_OscConfig+0xe8>
 80075be:	e014      	b.n	80075ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075c0:	f7fc ff20 	bl	8004404 <HAL_GetTick>
 80075c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075c6:	e008      	b.n	80075da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075c8:	f7fc ff1c 	bl	8004404 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	2b64      	cmp	r3, #100	; 0x64
 80075d4:	d901      	bls.n	80075da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e20b      	b.n	80079f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075da:	4b57      	ldr	r3, [pc, #348]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1f0      	bne.n	80075c8 <HAL_RCC_OscConfig+0x110>
 80075e6:	e000      	b.n	80075ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d069      	beq.n	80076ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80075f6:	4b50      	ldr	r3, [pc, #320]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f003 030c 	and.w	r3, r3, #12
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00b      	beq.n	800761a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007602:	4b4d      	ldr	r3, [pc, #308]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f003 030c 	and.w	r3, r3, #12
 800760a:	2b08      	cmp	r3, #8
 800760c:	d11c      	bne.n	8007648 <HAL_RCC_OscConfig+0x190>
 800760e:	4b4a      	ldr	r3, [pc, #296]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d116      	bne.n	8007648 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800761a:	4b47      	ldr	r3, [pc, #284]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0302 	and.w	r3, r3, #2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d005      	beq.n	8007632 <HAL_RCC_OscConfig+0x17a>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d001      	beq.n	8007632 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e1df      	b.n	80079f2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007632:	4b41      	ldr	r3, [pc, #260]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	493d      	ldr	r1, [pc, #244]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007642:	4313      	orrs	r3, r2
 8007644:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007646:	e040      	b.n	80076ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d023      	beq.n	8007698 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007650:	4b39      	ldr	r3, [pc, #228]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a38      	ldr	r2, [pc, #224]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007656:	f043 0301 	orr.w	r3, r3, #1
 800765a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800765c:	f7fc fed2 	bl	8004404 <HAL_GetTick>
 8007660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007662:	e008      	b.n	8007676 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007664:	f7fc fece 	bl	8004404 <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	2b02      	cmp	r3, #2
 8007670:	d901      	bls.n	8007676 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e1bd      	b.n	80079f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007676:	4b30      	ldr	r3, [pc, #192]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0f0      	beq.n	8007664 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007682:	4b2d      	ldr	r3, [pc, #180]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	4929      	ldr	r1, [pc, #164]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007692:	4313      	orrs	r3, r2
 8007694:	600b      	str	r3, [r1, #0]
 8007696:	e018      	b.n	80076ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007698:	4b27      	ldr	r3, [pc, #156]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a26      	ldr	r2, [pc, #152]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 800769e:	f023 0301 	bic.w	r3, r3, #1
 80076a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a4:	f7fc feae 	bl	8004404 <HAL_GetTick>
 80076a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076aa:	e008      	b.n	80076be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076ac:	f7fc feaa 	bl	8004404 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d901      	bls.n	80076be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e199      	b.n	80079f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076be:	4b1e      	ldr	r3, [pc, #120]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1f0      	bne.n	80076ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0308 	and.w	r3, r3, #8
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d038      	beq.n	8007748 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d019      	beq.n	8007712 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076de:	4b16      	ldr	r3, [pc, #88]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 80076e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076e2:	4a15      	ldr	r2, [pc, #84]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 80076e4:	f043 0301 	orr.w	r3, r3, #1
 80076e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076ea:	f7fc fe8b 	bl	8004404 <HAL_GetTick>
 80076ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076f0:	e008      	b.n	8007704 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076f2:	f7fc fe87 	bl	8004404 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d901      	bls.n	8007704 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e176      	b.n	80079f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007704:	4b0c      	ldr	r3, [pc, #48]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007708:	f003 0302 	and.w	r3, r3, #2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d0f0      	beq.n	80076f2 <HAL_RCC_OscConfig+0x23a>
 8007710:	e01a      	b.n	8007748 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007712:	4b09      	ldr	r3, [pc, #36]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007716:	4a08      	ldr	r2, [pc, #32]	; (8007738 <HAL_RCC_OscConfig+0x280>)
 8007718:	f023 0301 	bic.w	r3, r3, #1
 800771c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800771e:	f7fc fe71 	bl	8004404 <HAL_GetTick>
 8007722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007724:	e00a      	b.n	800773c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007726:	f7fc fe6d 	bl	8004404 <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	2b02      	cmp	r3, #2
 8007732:	d903      	bls.n	800773c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e15c      	b.n	80079f2 <HAL_RCC_OscConfig+0x53a>
 8007738:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800773c:	4b91      	ldr	r3, [pc, #580]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 800773e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1ee      	bne.n	8007726 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0304 	and.w	r3, r3, #4
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 80a4 	beq.w	800789e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007756:	4b8b      	ldr	r3, [pc, #556]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10d      	bne.n	800777e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007762:	4b88      	ldr	r3, [pc, #544]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	4a87      	ldr	r2, [pc, #540]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 8007768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800776c:	6413      	str	r3, [r2, #64]	; 0x40
 800776e:	4b85      	ldr	r3, [pc, #532]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007776:	60bb      	str	r3, [r7, #8]
 8007778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800777a:	2301      	movs	r3, #1
 800777c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800777e:	4b82      	ldr	r3, [pc, #520]	; (8007988 <HAL_RCC_OscConfig+0x4d0>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007786:	2b00      	cmp	r3, #0
 8007788:	d118      	bne.n	80077bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800778a:	4b7f      	ldr	r3, [pc, #508]	; (8007988 <HAL_RCC_OscConfig+0x4d0>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a7e      	ldr	r2, [pc, #504]	; (8007988 <HAL_RCC_OscConfig+0x4d0>)
 8007790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007796:	f7fc fe35 	bl	8004404 <HAL_GetTick>
 800779a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800779c:	e008      	b.n	80077b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800779e:	f7fc fe31 	bl	8004404 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b64      	cmp	r3, #100	; 0x64
 80077aa:	d901      	bls.n	80077b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e120      	b.n	80079f2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077b0:	4b75      	ldr	r3, [pc, #468]	; (8007988 <HAL_RCC_OscConfig+0x4d0>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d0f0      	beq.n	800779e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d106      	bne.n	80077d2 <HAL_RCC_OscConfig+0x31a>
 80077c4:	4b6f      	ldr	r3, [pc, #444]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 80077c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c8:	4a6e      	ldr	r2, [pc, #440]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 80077ca:	f043 0301 	orr.w	r3, r3, #1
 80077ce:	6713      	str	r3, [r2, #112]	; 0x70
 80077d0:	e02d      	b.n	800782e <HAL_RCC_OscConfig+0x376>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10c      	bne.n	80077f4 <HAL_RCC_OscConfig+0x33c>
 80077da:	4b6a      	ldr	r3, [pc, #424]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 80077dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077de:	4a69      	ldr	r2, [pc, #420]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 80077e0:	f023 0301 	bic.w	r3, r3, #1
 80077e4:	6713      	str	r3, [r2, #112]	; 0x70
 80077e6:	4b67      	ldr	r3, [pc, #412]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 80077e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ea:	4a66      	ldr	r2, [pc, #408]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 80077ec:	f023 0304 	bic.w	r3, r3, #4
 80077f0:	6713      	str	r3, [r2, #112]	; 0x70
 80077f2:	e01c      	b.n	800782e <HAL_RCC_OscConfig+0x376>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	2b05      	cmp	r3, #5
 80077fa:	d10c      	bne.n	8007816 <HAL_RCC_OscConfig+0x35e>
 80077fc:	4b61      	ldr	r3, [pc, #388]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 80077fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007800:	4a60      	ldr	r2, [pc, #384]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 8007802:	f043 0304 	orr.w	r3, r3, #4
 8007806:	6713      	str	r3, [r2, #112]	; 0x70
 8007808:	4b5e      	ldr	r3, [pc, #376]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 800780a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780c:	4a5d      	ldr	r2, [pc, #372]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 800780e:	f043 0301 	orr.w	r3, r3, #1
 8007812:	6713      	str	r3, [r2, #112]	; 0x70
 8007814:	e00b      	b.n	800782e <HAL_RCC_OscConfig+0x376>
 8007816:	4b5b      	ldr	r3, [pc, #364]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 8007818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781a:	4a5a      	ldr	r2, [pc, #360]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 800781c:	f023 0301 	bic.w	r3, r3, #1
 8007820:	6713      	str	r3, [r2, #112]	; 0x70
 8007822:	4b58      	ldr	r3, [pc, #352]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 8007824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007826:	4a57      	ldr	r2, [pc, #348]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 8007828:	f023 0304 	bic.w	r3, r3, #4
 800782c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d015      	beq.n	8007862 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007836:	f7fc fde5 	bl	8004404 <HAL_GetTick>
 800783a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800783c:	e00a      	b.n	8007854 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800783e:	f7fc fde1 	bl	8004404 <HAL_GetTick>
 8007842:	4602      	mov	r2, r0
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	f241 3288 	movw	r2, #5000	; 0x1388
 800784c:	4293      	cmp	r3, r2
 800784e:	d901      	bls.n	8007854 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e0ce      	b.n	80079f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007854:	4b4b      	ldr	r3, [pc, #300]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 8007856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007858:	f003 0302 	and.w	r3, r3, #2
 800785c:	2b00      	cmp	r3, #0
 800785e:	d0ee      	beq.n	800783e <HAL_RCC_OscConfig+0x386>
 8007860:	e014      	b.n	800788c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007862:	f7fc fdcf 	bl	8004404 <HAL_GetTick>
 8007866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007868:	e00a      	b.n	8007880 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800786a:	f7fc fdcb 	bl	8004404 <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	f241 3288 	movw	r2, #5000	; 0x1388
 8007878:	4293      	cmp	r3, r2
 800787a:	d901      	bls.n	8007880 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e0b8      	b.n	80079f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007880:	4b40      	ldr	r3, [pc, #256]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 8007882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007884:	f003 0302 	and.w	r3, r3, #2
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1ee      	bne.n	800786a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800788c:	7dfb      	ldrb	r3, [r7, #23]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d105      	bne.n	800789e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007892:	4b3c      	ldr	r3, [pc, #240]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	4a3b      	ldr	r2, [pc, #236]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 8007898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800789c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 80a4 	beq.w	80079f0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078a8:	4b36      	ldr	r3, [pc, #216]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f003 030c 	and.w	r3, r3, #12
 80078b0:	2b08      	cmp	r3, #8
 80078b2:	d06b      	beq.n	800798c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d149      	bne.n	8007950 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078bc:	4b31      	ldr	r3, [pc, #196]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a30      	ldr	r2, [pc, #192]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 80078c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c8:	f7fc fd9c 	bl	8004404 <HAL_GetTick>
 80078cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078ce:	e008      	b.n	80078e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078d0:	f7fc fd98 	bl	8004404 <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d901      	bls.n	80078e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e087      	b.n	80079f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078e2:	4b28      	ldr	r3, [pc, #160]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1f0      	bne.n	80078d0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	69da      	ldr	r2, [r3, #28]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	431a      	orrs	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	019b      	lsls	r3, r3, #6
 80078fe:	431a      	orrs	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007904:	085b      	lsrs	r3, r3, #1
 8007906:	3b01      	subs	r3, #1
 8007908:	041b      	lsls	r3, r3, #16
 800790a:	431a      	orrs	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007910:	061b      	lsls	r3, r3, #24
 8007912:	4313      	orrs	r3, r2
 8007914:	4a1b      	ldr	r2, [pc, #108]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 8007916:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800791a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800791c:	4b19      	ldr	r3, [pc, #100]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a18      	ldr	r2, [pc, #96]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 8007922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007928:	f7fc fd6c 	bl	8004404 <HAL_GetTick>
 800792c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800792e:	e008      	b.n	8007942 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007930:	f7fc fd68 	bl	8004404 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b02      	cmp	r3, #2
 800793c:	d901      	bls.n	8007942 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e057      	b.n	80079f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007942:	4b10      	ldr	r3, [pc, #64]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0f0      	beq.n	8007930 <HAL_RCC_OscConfig+0x478>
 800794e:	e04f      	b.n	80079f0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007950:	4b0c      	ldr	r3, [pc, #48]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a0b      	ldr	r2, [pc, #44]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 8007956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800795a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800795c:	f7fc fd52 	bl	8004404 <HAL_GetTick>
 8007960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007962:	e008      	b.n	8007976 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007964:	f7fc fd4e 	bl	8004404 <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b02      	cmp	r3, #2
 8007970:	d901      	bls.n	8007976 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e03d      	b.n	80079f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007976:	4b03      	ldr	r3, [pc, #12]	; (8007984 <HAL_RCC_OscConfig+0x4cc>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1f0      	bne.n	8007964 <HAL_RCC_OscConfig+0x4ac>
 8007982:	e035      	b.n	80079f0 <HAL_RCC_OscConfig+0x538>
 8007984:	40023800 	.word	0x40023800
 8007988:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800798c:	4b1b      	ldr	r3, [pc, #108]	; (80079fc <HAL_RCC_OscConfig+0x544>)
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d028      	beq.n	80079ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d121      	bne.n	80079ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d11a      	bne.n	80079ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80079bc:	4013      	ands	r3, r2
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80079c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d111      	bne.n	80079ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d2:	085b      	lsrs	r3, r3, #1
 80079d4:	3b01      	subs	r3, #1
 80079d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80079d8:	429a      	cmp	r2, r3
 80079da:	d107      	bne.n	80079ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d001      	beq.n	80079f0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e000      	b.n	80079f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3718      	adds	r7, #24
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	40023800 	.word	0x40023800

08007a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e0d0      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a18:	4b6a      	ldr	r3, [pc, #424]	; (8007bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 030f 	and.w	r3, r3, #15
 8007a20:	683a      	ldr	r2, [r7, #0]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d910      	bls.n	8007a48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a26:	4b67      	ldr	r3, [pc, #412]	; (8007bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f023 020f 	bic.w	r2, r3, #15
 8007a2e:	4965      	ldr	r1, [pc, #404]	; (8007bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a36:	4b63      	ldr	r3, [pc, #396]	; (8007bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 030f 	and.w	r3, r3, #15
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d001      	beq.n	8007a48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e0b8      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d020      	beq.n	8007a96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d005      	beq.n	8007a6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a60:	4b59      	ldr	r3, [pc, #356]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	4a58      	ldr	r2, [pc, #352]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0308 	and.w	r3, r3, #8
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a78:	4b53      	ldr	r3, [pc, #332]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	4a52      	ldr	r2, [pc, #328]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a84:	4b50      	ldr	r3, [pc, #320]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	494d      	ldr	r1, [pc, #308]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d040      	beq.n	8007b24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d107      	bne.n	8007aba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aaa:	4b47      	ldr	r3, [pc, #284]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d115      	bne.n	8007ae2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e07f      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d107      	bne.n	8007ad2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ac2:	4b41      	ldr	r3, [pc, #260]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d109      	bne.n	8007ae2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e073      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ad2:	4b3d      	ldr	r3, [pc, #244]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e06b      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ae2:	4b39      	ldr	r3, [pc, #228]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f023 0203 	bic.w	r2, r3, #3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	4936      	ldr	r1, [pc, #216]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007af4:	f7fc fc86 	bl	8004404 <HAL_GetTick>
 8007af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007afa:	e00a      	b.n	8007b12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007afc:	f7fc fc82 	bl	8004404 <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e053      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b12:	4b2d      	ldr	r3, [pc, #180]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f003 020c 	and.w	r2, r3, #12
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d1eb      	bne.n	8007afc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b24:	4b27      	ldr	r3, [pc, #156]	; (8007bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 030f 	and.w	r3, r3, #15
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d210      	bcs.n	8007b54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b32:	4b24      	ldr	r3, [pc, #144]	; (8007bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f023 020f 	bic.w	r2, r3, #15
 8007b3a:	4922      	ldr	r1, [pc, #136]	; (8007bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b42:	4b20      	ldr	r3, [pc, #128]	; (8007bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 030f 	and.w	r3, r3, #15
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d001      	beq.n	8007b54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e032      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d008      	beq.n	8007b72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b60:	4b19      	ldr	r3, [pc, #100]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	4916      	ldr	r1, [pc, #88]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0308 	and.w	r3, r3, #8
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d009      	beq.n	8007b92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007b7e:	4b12      	ldr	r3, [pc, #72]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	00db      	lsls	r3, r3, #3
 8007b8c:	490e      	ldr	r1, [pc, #56]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007b92:	f000 f821 	bl	8007bd8 <HAL_RCC_GetSysClockFreq>
 8007b96:	4602      	mov	r2, r0
 8007b98:	4b0b      	ldr	r3, [pc, #44]	; (8007bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	091b      	lsrs	r3, r3, #4
 8007b9e:	f003 030f 	and.w	r3, r3, #15
 8007ba2:	490a      	ldr	r1, [pc, #40]	; (8007bcc <HAL_RCC_ClockConfig+0x1cc>)
 8007ba4:	5ccb      	ldrb	r3, [r1, r3]
 8007ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8007baa:	4a09      	ldr	r2, [pc, #36]	; (8007bd0 <HAL_RCC_ClockConfig+0x1d0>)
 8007bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007bae:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <HAL_RCC_ClockConfig+0x1d4>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fc faf6 	bl	80041a4 <HAL_InitTick>

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	40023c00 	.word	0x40023c00
 8007bc8:	40023800 	.word	0x40023800
 8007bcc:	08012380 	.word	0x08012380
 8007bd0:	2000003c 	.word	0x2000003c
 8007bd4:	20000040 	.word	0x20000040

08007bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bdc:	b090      	sub	sp, #64	; 0x40
 8007bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007be0:	2300      	movs	r3, #0
 8007be2:	637b      	str	r3, [r7, #52]	; 0x34
 8007be4:	2300      	movs	r3, #0
 8007be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007be8:	2300      	movs	r3, #0
 8007bea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8007bec:	2300      	movs	r3, #0
 8007bee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bf0:	4b59      	ldr	r3, [pc, #356]	; (8007d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f003 030c 	and.w	r3, r3, #12
 8007bf8:	2b08      	cmp	r3, #8
 8007bfa:	d00d      	beq.n	8007c18 <HAL_RCC_GetSysClockFreq+0x40>
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	f200 80a1 	bhi.w	8007d44 <HAL_RCC_GetSysClockFreq+0x16c>
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d002      	beq.n	8007c0c <HAL_RCC_GetSysClockFreq+0x34>
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	d003      	beq.n	8007c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8007c0a:	e09b      	b.n	8007d44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c0c:	4b53      	ldr	r3, [pc, #332]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x184>)
 8007c0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c10:	e09b      	b.n	8007d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c12:	4b53      	ldr	r3, [pc, #332]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c16:	e098      	b.n	8007d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c18:	4b4f      	ldr	r3, [pc, #316]	; (8007d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c20:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007c22:	4b4d      	ldr	r3, [pc, #308]	; (8007d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d028      	beq.n	8007c80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c2e:	4b4a      	ldr	r3, [pc, #296]	; (8007d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	099b      	lsrs	r3, r3, #6
 8007c34:	2200      	movs	r2, #0
 8007c36:	623b      	str	r3, [r7, #32]
 8007c38:	627a      	str	r2, [r7, #36]	; 0x24
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007c40:	2100      	movs	r1, #0
 8007c42:	4b47      	ldr	r3, [pc, #284]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c44:	fb03 f201 	mul.w	r2, r3, r1
 8007c48:	2300      	movs	r3, #0
 8007c4a:	fb00 f303 	mul.w	r3, r0, r3
 8007c4e:	4413      	add	r3, r2
 8007c50:	4a43      	ldr	r2, [pc, #268]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c52:	fba0 1202 	umull	r1, r2, r0, r2
 8007c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c58:	460a      	mov	r2, r1
 8007c5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8007c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c5e:	4413      	add	r3, r2
 8007c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c64:	2200      	movs	r2, #0
 8007c66:	61bb      	str	r3, [r7, #24]
 8007c68:	61fa      	str	r2, [r7, #28]
 8007c6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007c72:	f7f8 fb1d 	bl	80002b0 <__aeabi_uldivmod>
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c7e:	e053      	b.n	8007d28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c80:	4b35      	ldr	r3, [pc, #212]	; (8007d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	099b      	lsrs	r3, r3, #6
 8007c86:	2200      	movs	r2, #0
 8007c88:	613b      	str	r3, [r7, #16]
 8007c8a:	617a      	str	r2, [r7, #20]
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007c92:	f04f 0b00 	mov.w	fp, #0
 8007c96:	4652      	mov	r2, sl
 8007c98:	465b      	mov	r3, fp
 8007c9a:	f04f 0000 	mov.w	r0, #0
 8007c9e:	f04f 0100 	mov.w	r1, #0
 8007ca2:	0159      	lsls	r1, r3, #5
 8007ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ca8:	0150      	lsls	r0, r2, #5
 8007caa:	4602      	mov	r2, r0
 8007cac:	460b      	mov	r3, r1
 8007cae:	ebb2 080a 	subs.w	r8, r2, sl
 8007cb2:	eb63 090b 	sbc.w	r9, r3, fp
 8007cb6:	f04f 0200 	mov.w	r2, #0
 8007cba:	f04f 0300 	mov.w	r3, #0
 8007cbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007cc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007cc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007cca:	ebb2 0408 	subs.w	r4, r2, r8
 8007cce:	eb63 0509 	sbc.w	r5, r3, r9
 8007cd2:	f04f 0200 	mov.w	r2, #0
 8007cd6:	f04f 0300 	mov.w	r3, #0
 8007cda:	00eb      	lsls	r3, r5, #3
 8007cdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ce0:	00e2      	lsls	r2, r4, #3
 8007ce2:	4614      	mov	r4, r2
 8007ce4:	461d      	mov	r5, r3
 8007ce6:	eb14 030a 	adds.w	r3, r4, sl
 8007cea:	603b      	str	r3, [r7, #0]
 8007cec:	eb45 030b 	adc.w	r3, r5, fp
 8007cf0:	607b      	str	r3, [r7, #4]
 8007cf2:	f04f 0200 	mov.w	r2, #0
 8007cf6:	f04f 0300 	mov.w	r3, #0
 8007cfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007cfe:	4629      	mov	r1, r5
 8007d00:	028b      	lsls	r3, r1, #10
 8007d02:	4621      	mov	r1, r4
 8007d04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d08:	4621      	mov	r1, r4
 8007d0a:	028a      	lsls	r2, r1, #10
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d12:	2200      	movs	r2, #0
 8007d14:	60bb      	str	r3, [r7, #8]
 8007d16:	60fa      	str	r2, [r7, #12]
 8007d18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d1c:	f7f8 fac8 	bl	80002b0 <__aeabi_uldivmod>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4613      	mov	r3, r2
 8007d26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007d28:	4b0b      	ldr	r3, [pc, #44]	; (8007d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	0c1b      	lsrs	r3, r3, #16
 8007d2e:	f003 0303 	and.w	r3, r3, #3
 8007d32:	3301      	adds	r3, #1
 8007d34:	005b      	lsls	r3, r3, #1
 8007d36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007d42:	e002      	b.n	8007d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d44:	4b05      	ldr	r3, [pc, #20]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x184>)
 8007d46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3740      	adds	r7, #64	; 0x40
 8007d50:	46bd      	mov	sp, r7
 8007d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d56:	bf00      	nop
 8007d58:	40023800 	.word	0x40023800
 8007d5c:	00f42400 	.word	0x00f42400
 8007d60:	017d7840 	.word	0x017d7840

08007d64 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d64:	b480      	push	{r7}
 8007d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d68:	4b03      	ldr	r3, [pc, #12]	; (8007d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	2000003c 	.word	0x2000003c

08007d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007d80:	f7ff fff0 	bl	8007d64 <HAL_RCC_GetHCLKFreq>
 8007d84:	4602      	mov	r2, r0
 8007d86:	4b05      	ldr	r3, [pc, #20]	; (8007d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	0a9b      	lsrs	r3, r3, #10
 8007d8c:	f003 0307 	and.w	r3, r3, #7
 8007d90:	4903      	ldr	r1, [pc, #12]	; (8007da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d92:	5ccb      	ldrb	r3, [r1, r3]
 8007d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	40023800 	.word	0x40023800
 8007da0:	08012390 	.word	0x08012390

08007da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007da8:	f7ff ffdc 	bl	8007d64 <HAL_RCC_GetHCLKFreq>
 8007dac:	4602      	mov	r2, r0
 8007dae:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	0b5b      	lsrs	r3, r3, #13
 8007db4:	f003 0307 	and.w	r3, r3, #7
 8007db8:	4903      	ldr	r1, [pc, #12]	; (8007dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dba:	5ccb      	ldrb	r3, [r1, r3]
 8007dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	40023800 	.word	0x40023800
 8007dc8:	08012390 	.word	0x08012390

08007dcc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	220f      	movs	r2, #15
 8007dda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ddc:	4b12      	ldr	r3, [pc, #72]	; (8007e28 <HAL_RCC_GetClockConfig+0x5c>)
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f003 0203 	and.w	r2, r3, #3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007de8:	4b0f      	ldr	r3, [pc, #60]	; (8007e28 <HAL_RCC_GetClockConfig+0x5c>)
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007df4:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <HAL_RCC_GetClockConfig+0x5c>)
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007e00:	4b09      	ldr	r3, [pc, #36]	; (8007e28 <HAL_RCC_GetClockConfig+0x5c>)
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	08db      	lsrs	r3, r3, #3
 8007e06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007e0e:	4b07      	ldr	r3, [pc, #28]	; (8007e2c <HAL_RCC_GetClockConfig+0x60>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 020f 	and.w	r2, r3, #15
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	601a      	str	r2, [r3, #0]
}
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	40023800 	.word	0x40023800
 8007e2c:	40023c00 	.word	0x40023c00

08007e30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b088      	sub	sp, #32
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007e44:	2300      	movs	r3, #0
 8007e46:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d012      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e58:	4b69      	ldr	r3, [pc, #420]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	4a68      	ldr	r2, [pc, #416]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e5e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007e62:	6093      	str	r3, [r2, #8]
 8007e64:	4b66      	ldr	r3, [pc, #408]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e66:	689a      	ldr	r2, [r3, #8]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6c:	4964      	ldr	r1, [pc, #400]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d101      	bne.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d017      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e8a:	4b5d      	ldr	r3, [pc, #372]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e98:	4959      	ldr	r1, [pc, #356]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ea8:	d101      	bne.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d017      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007ec6:	4b4e      	ldr	r3, [pc, #312]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ecc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed4:	494a      	ldr	r1, [pc, #296]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ee4:	d101      	bne.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007f02:	2301      	movs	r3, #1
 8007f04:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0320 	and.w	r3, r3, #32
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 808b 	beq.w	800802a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f14:	4b3a      	ldr	r3, [pc, #232]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f18:	4a39      	ldr	r2, [pc, #228]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8007f20:	4b37      	ldr	r3, [pc, #220]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f28:	60bb      	str	r3, [r7, #8]
 8007f2a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f2c:	4b35      	ldr	r3, [pc, #212]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a34      	ldr	r2, [pc, #208]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f38:	f7fc fa64 	bl	8004404 <HAL_GetTick>
 8007f3c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f3e:	e008      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f40:	f7fc fa60 	bl	8004404 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b64      	cmp	r3, #100	; 0x64
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e357      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f52:	4b2c      	ldr	r3, [pc, #176]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d0f0      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007f5e:	4b28      	ldr	r3, [pc, #160]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f66:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d035      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d02e      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f7c:	4b20      	ldr	r3, [pc, #128]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f84:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007f86:	4b1e      	ldr	r3, [pc, #120]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8a:	4a1d      	ldr	r2, [pc, #116]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f90:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007f92:	4b1b      	ldr	r3, [pc, #108]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f96:	4a1a      	ldr	r2, [pc, #104]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007f9e:	4a18      	ldr	r2, [pc, #96]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007fa4:	4b16      	ldr	r3, [pc, #88]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d114      	bne.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb0:	f7fc fa28 	bl	8004404 <HAL_GetTick>
 8007fb4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fb6:	e00a      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fb8:	f7fc fa24 	bl	8004404 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d901      	bls.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e319      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fce:	4b0c      	ldr	r3, [pc, #48]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d0ee      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fe6:	d111      	bne.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007fe8:	4b05      	ldr	r3, [pc, #20]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007ff4:	4b04      	ldr	r3, [pc, #16]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007ff6:	400b      	ands	r3, r1
 8007ff8:	4901      	ldr	r1, [pc, #4]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	608b      	str	r3, [r1, #8]
 8007ffe:	e00b      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008000:	40023800 	.word	0x40023800
 8008004:	40007000 	.word	0x40007000
 8008008:	0ffffcff 	.word	0x0ffffcff
 800800c:	4baa      	ldr	r3, [pc, #680]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	4aa9      	ldr	r2, [pc, #676]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008012:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008016:	6093      	str	r3, [r2, #8]
 8008018:	4ba7      	ldr	r3, [pc, #668]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800801a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008024:	49a4      	ldr	r1, [pc, #656]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008026:	4313      	orrs	r3, r2
 8008028:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 0310 	and.w	r3, r3, #16
 8008032:	2b00      	cmp	r3, #0
 8008034:	d010      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008036:	4ba0      	ldr	r3, [pc, #640]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800803c:	4a9e      	ldr	r2, [pc, #632]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800803e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008042:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008046:	4b9c      	ldr	r3, [pc, #624]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008048:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008050:	4999      	ldr	r1, [pc, #612]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008052:	4313      	orrs	r3, r2
 8008054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00a      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008064:	4b94      	ldr	r3, [pc, #592]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800806a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008072:	4991      	ldr	r1, [pc, #580]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008074:	4313      	orrs	r3, r2
 8008076:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00a      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008086:	4b8c      	ldr	r3, [pc, #560]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800808c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008094:	4988      	ldr	r1, [pc, #544]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008096:	4313      	orrs	r3, r2
 8008098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00a      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80080a8:	4b83      	ldr	r3, [pc, #524]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b6:	4980      	ldr	r1, [pc, #512]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080b8:	4313      	orrs	r3, r2
 80080ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80080ca:	4b7b      	ldr	r3, [pc, #492]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d8:	4977      	ldr	r1, [pc, #476]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00a      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80080ec:	4b72      	ldr	r3, [pc, #456]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f2:	f023 0203 	bic.w	r2, r3, #3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080fa:	496f      	ldr	r1, [pc, #444]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00a      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800810e:	4b6a      	ldr	r3, [pc, #424]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008114:	f023 020c 	bic.w	r2, r3, #12
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800811c:	4966      	ldr	r1, [pc, #408]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800811e:	4313      	orrs	r3, r2
 8008120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00a      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008130:	4b61      	ldr	r3, [pc, #388]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008136:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800813e:	495e      	ldr	r1, [pc, #376]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008140:	4313      	orrs	r3, r2
 8008142:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008152:	4b59      	ldr	r3, [pc, #356]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008158:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008160:	4955      	ldr	r1, [pc, #340]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008162:	4313      	orrs	r3, r2
 8008164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00a      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008174:	4b50      	ldr	r3, [pc, #320]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800817a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008182:	494d      	ldr	r1, [pc, #308]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008184:	4313      	orrs	r3, r2
 8008186:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00a      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008196:	4b48      	ldr	r3, [pc, #288]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800819c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081a4:	4944      	ldr	r1, [pc, #272]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00a      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80081b8:	4b3f      	ldr	r3, [pc, #252]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c6:	493c      	ldr	r1, [pc, #240]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80081da:	4b37      	ldr	r3, [pc, #220]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e8:	4933      	ldr	r1, [pc, #204]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00a      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80081fc:	4b2e      	ldr	r3, [pc, #184]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008202:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800820a:	492b      	ldr	r1, [pc, #172]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800820c:	4313      	orrs	r3, r2
 800820e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d011      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800821e:	4b26      	ldr	r3, [pc, #152]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008224:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800822c:	4922      	ldr	r1, [pc, #136]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800822e:	4313      	orrs	r3, r2
 8008230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008238:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800823c:	d101      	bne.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800823e:	2301      	movs	r3, #1
 8008240:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0308 	and.w	r3, r3, #8
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800824e:	2301      	movs	r3, #1
 8008250:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800825e:	4b16      	ldr	r3, [pc, #88]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008264:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800826c:	4912      	ldr	r1, [pc, #72]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800826e:	4313      	orrs	r3, r2
 8008270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00b      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008280:	4b0d      	ldr	r3, [pc, #52]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008286:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008290:	4909      	ldr	r1, [pc, #36]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008292:	4313      	orrs	r3, r2
 8008294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d006      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f000 80d9 	beq.w	800845e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80082ac:	4b02      	ldr	r3, [pc, #8]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a01      	ldr	r2, [pc, #4]	; (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082b6:	e001      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80082b8:	40023800 	.word	0x40023800
 80082bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082be:	f7fc f8a1 	bl	8004404 <HAL_GetTick>
 80082c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082c4:	e008      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80082c6:	f7fc f89d 	bl	8004404 <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	2b64      	cmp	r3, #100	; 0x64
 80082d2:	d901      	bls.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e194      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082d8:	4b6c      	ldr	r3, [pc, #432]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1f0      	bne.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0301 	and.w	r3, r3, #1
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d021      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d11d      	bne.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80082f8:	4b64      	ldr	r3, [pc, #400]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082fe:	0c1b      	lsrs	r3, r3, #16
 8008300:	f003 0303 	and.w	r3, r3, #3
 8008304:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008306:	4b61      	ldr	r3, [pc, #388]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800830c:	0e1b      	lsrs	r3, r3, #24
 800830e:	f003 030f 	and.w	r3, r3, #15
 8008312:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	019a      	lsls	r2, r3, #6
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	041b      	lsls	r3, r3, #16
 800831e:	431a      	orrs	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	061b      	lsls	r3, r3, #24
 8008324:	431a      	orrs	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	071b      	lsls	r3, r3, #28
 800832c:	4957      	ldr	r1, [pc, #348]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800832e:	4313      	orrs	r3, r2
 8008330:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d004      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008348:	d00a      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008352:	2b00      	cmp	r3, #0
 8008354:	d02e      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800835e:	d129      	bne.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008360:	4b4a      	ldr	r3, [pc, #296]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008366:	0c1b      	lsrs	r3, r3, #16
 8008368:	f003 0303 	and.w	r3, r3, #3
 800836c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800836e:	4b47      	ldr	r3, [pc, #284]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008374:	0f1b      	lsrs	r3, r3, #28
 8008376:	f003 0307 	and.w	r3, r3, #7
 800837a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	019a      	lsls	r2, r3, #6
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	041b      	lsls	r3, r3, #16
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	061b      	lsls	r3, r3, #24
 800838e:	431a      	orrs	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	071b      	lsls	r3, r3, #28
 8008394:	493d      	ldr	r1, [pc, #244]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008396:	4313      	orrs	r3, r2
 8008398:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800839c:	4b3b      	ldr	r3, [pc, #236]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800839e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083a2:	f023 021f 	bic.w	r2, r3, #31
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083aa:	3b01      	subs	r3, #1
 80083ac:	4937      	ldr	r1, [pc, #220]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d01d      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80083c0:	4b32      	ldr	r3, [pc, #200]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083c6:	0e1b      	lsrs	r3, r3, #24
 80083c8:	f003 030f 	and.w	r3, r3, #15
 80083cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80083ce:	4b2f      	ldr	r3, [pc, #188]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083d4:	0f1b      	lsrs	r3, r3, #28
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	019a      	lsls	r2, r3, #6
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	041b      	lsls	r3, r3, #16
 80083e8:	431a      	orrs	r2, r3
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	061b      	lsls	r3, r3, #24
 80083ee:	431a      	orrs	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	071b      	lsls	r3, r3, #28
 80083f4:	4925      	ldr	r1, [pc, #148]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008404:	2b00      	cmp	r3, #0
 8008406:	d011      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	019a      	lsls	r2, r3, #6
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	041b      	lsls	r3, r3, #16
 8008414:	431a      	orrs	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	061b      	lsls	r3, r3, #24
 800841c:	431a      	orrs	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	071b      	lsls	r3, r3, #28
 8008424:	4919      	ldr	r1, [pc, #100]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008426:	4313      	orrs	r3, r2
 8008428:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800842c:	4b17      	ldr	r3, [pc, #92]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a16      	ldr	r2, [pc, #88]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008432:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008438:	f7fb ffe4 	bl	8004404 <HAL_GetTick>
 800843c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800843e:	e008      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008440:	f7fb ffe0 	bl	8004404 <HAL_GetTick>
 8008444:	4602      	mov	r2, r0
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	2b64      	cmp	r3, #100	; 0x64
 800844c:	d901      	bls.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800844e:	2303      	movs	r3, #3
 8008450:	e0d7      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008452:	4b0e      	ldr	r3, [pc, #56]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0f0      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	2b01      	cmp	r3, #1
 8008462:	f040 80cd 	bne.w	8008600 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008466:	4b09      	ldr	r3, [pc, #36]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a08      	ldr	r2, [pc, #32]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800846c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008472:	f7fb ffc7 	bl	8004404 <HAL_GetTick>
 8008476:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008478:	e00a      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800847a:	f7fb ffc3 	bl	8004404 <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b64      	cmp	r3, #100	; 0x64
 8008486:	d903      	bls.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e0ba      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800848c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008490:	4b5e      	ldr	r3, [pc, #376]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800849c:	d0ed      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d009      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d02e      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d12a      	bne.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80084c6:	4b51      	ldr	r3, [pc, #324]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084cc:	0c1b      	lsrs	r3, r3, #16
 80084ce:	f003 0303 	and.w	r3, r3, #3
 80084d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80084d4:	4b4d      	ldr	r3, [pc, #308]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084da:	0f1b      	lsrs	r3, r3, #28
 80084dc:	f003 0307 	and.w	r3, r3, #7
 80084e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	019a      	lsls	r2, r3, #6
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	041b      	lsls	r3, r3, #16
 80084ec:	431a      	orrs	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	061b      	lsls	r3, r3, #24
 80084f4:	431a      	orrs	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	071b      	lsls	r3, r3, #28
 80084fa:	4944      	ldr	r1, [pc, #272]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084fc:	4313      	orrs	r3, r2
 80084fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008502:	4b42      	ldr	r3, [pc, #264]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008508:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008510:	3b01      	subs	r3, #1
 8008512:	021b      	lsls	r3, r3, #8
 8008514:	493d      	ldr	r1, [pc, #244]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008516:	4313      	orrs	r3, r2
 8008518:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d022      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800852c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008530:	d11d      	bne.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008532:	4b36      	ldr	r3, [pc, #216]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008538:	0e1b      	lsrs	r3, r3, #24
 800853a:	f003 030f 	and.w	r3, r3, #15
 800853e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008540:	4b32      	ldr	r3, [pc, #200]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008546:	0f1b      	lsrs	r3, r3, #28
 8008548:	f003 0307 	and.w	r3, r3, #7
 800854c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	019a      	lsls	r2, r3, #6
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a1b      	ldr	r3, [r3, #32]
 8008558:	041b      	lsls	r3, r3, #16
 800855a:	431a      	orrs	r2, r3
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	061b      	lsls	r3, r3, #24
 8008560:	431a      	orrs	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	071b      	lsls	r3, r3, #28
 8008566:	4929      	ldr	r1, [pc, #164]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008568:	4313      	orrs	r3, r2
 800856a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0308 	and.w	r3, r3, #8
 8008576:	2b00      	cmp	r3, #0
 8008578:	d028      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800857a:	4b24      	ldr	r3, [pc, #144]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800857c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008580:	0e1b      	lsrs	r3, r3, #24
 8008582:	f003 030f 	and.w	r3, r3, #15
 8008586:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008588:	4b20      	ldr	r3, [pc, #128]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800858a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800858e:	0c1b      	lsrs	r3, r3, #16
 8008590:	f003 0303 	and.w	r3, r3, #3
 8008594:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	019a      	lsls	r2, r3, #6
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	041b      	lsls	r3, r3, #16
 80085a0:	431a      	orrs	r2, r3
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	061b      	lsls	r3, r3, #24
 80085a6:	431a      	orrs	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	69db      	ldr	r3, [r3, #28]
 80085ac:	071b      	lsls	r3, r3, #28
 80085ae:	4917      	ldr	r1, [pc, #92]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085b0:	4313      	orrs	r3, r2
 80085b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80085b6:	4b15      	ldr	r3, [pc, #84]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c4:	4911      	ldr	r1, [pc, #68]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80085cc:	4b0f      	ldr	r3, [pc, #60]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a0e      	ldr	r2, [pc, #56]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085d8:	f7fb ff14 	bl	8004404 <HAL_GetTick>
 80085dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80085de:	e008      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80085e0:	f7fb ff10 	bl	8004404 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b64      	cmp	r3, #100	; 0x64
 80085ec:	d901      	bls.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e007      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80085f2:	4b06      	ldr	r3, [pc, #24]	; (800860c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085fe:	d1ef      	bne.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3720      	adds	r7, #32
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	40023800 	.word	0x40023800

08008610 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d101      	bne.n	8008622 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e081      	b.n	8008726 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	7f5b      	ldrb	r3, [r3, #29]
 8008626:	b2db      	uxtb	r3, r3
 8008628:	2b00      	cmp	r3, #0
 800862a:	d105      	bne.n	8008638 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7fb faea 	bl	8003c0c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2202      	movs	r2, #2
 800863c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	22ca      	movs	r2, #202	; 0xca
 8008644:	625a      	str	r2, [r3, #36]	; 0x24
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2253      	movs	r2, #83	; 0x53
 800864c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fb16 	bl	8008c80 <RTC_EnterInitMode>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d008      	beq.n	800866c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	22ff      	movs	r2, #255	; 0xff
 8008660:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2204      	movs	r2, #4
 8008666:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e05c      	b.n	8008726 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6899      	ldr	r1, [r3, #8]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	4b2e      	ldr	r3, [pc, #184]	; (8008730 <HAL_RTC_Init+0x120>)
 8008678:	400b      	ands	r3, r1
 800867a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6899      	ldr	r1, [r3, #8]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	431a      	orrs	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	695b      	ldr	r3, [r3, #20]
 8008690:	431a      	orrs	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	68d2      	ldr	r2, [r2, #12]
 80086a2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6919      	ldr	r1, [r3, #16]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	041a      	lsls	r2, r3, #16
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	430a      	orrs	r2, r1
 80086b6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68da      	ldr	r2, [r3, #12]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086c6:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f003 0320 	and.w	r3, r3, #32
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10e      	bne.n	80086f4 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 faaa 	bl	8008c30 <HAL_RTC_WaitForSynchro>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d008      	beq.n	80086f4 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	22ff      	movs	r2, #255	; 0xff
 80086e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2204      	movs	r2, #4
 80086ee:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e018      	b.n	8008726 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f022 0208 	bic.w	r2, r2, #8
 8008702:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	699a      	ldr	r2, [r3, #24]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	430a      	orrs	r2, r1
 8008714:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	22ff      	movs	r2, #255	; 0xff
 800871c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008724:	2300      	movs	r3, #0
  }
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	ff8fffbf 	.word	0xff8fffbf

08008734 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008734:	b590      	push	{r4, r7, lr}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008740:	2300      	movs	r3, #0
 8008742:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	7f1b      	ldrb	r3, [r3, #28]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d101      	bne.n	8008750 <HAL_RTC_SetTime+0x1c>
 800874c:	2302      	movs	r3, #2
 800874e:	e0a8      	b.n	80088a2 <HAL_RTC_SetTime+0x16e>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2201      	movs	r2, #1
 8008754:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2202      	movs	r2, #2
 800875a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d126      	bne.n	80087b0 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800876c:	2b00      	cmp	r3, #0
 800876e:	d102      	bne.n	8008776 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2200      	movs	r2, #0
 8008774:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	4618      	mov	r0, r3
 800877c:	f000 faac 	bl	8008cd8 <RTC_ByteToBcd2>
 8008780:	4603      	mov	r3, r0
 8008782:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	785b      	ldrb	r3, [r3, #1]
 8008788:	4618      	mov	r0, r3
 800878a:	f000 faa5 	bl	8008cd8 <RTC_ByteToBcd2>
 800878e:	4603      	mov	r3, r0
 8008790:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008792:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	789b      	ldrb	r3, [r3, #2]
 8008798:	4618      	mov	r0, r3
 800879a:	f000 fa9d 	bl	8008cd8 <RTC_ByteToBcd2>
 800879e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80087a0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	7b1b      	ldrb	r3, [r3, #12]
 80087a8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80087aa:	4313      	orrs	r3, r2
 80087ac:	617b      	str	r3, [r7, #20]
 80087ae:	e018      	b.n	80087e2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d102      	bne.n	80087c4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	2200      	movs	r2, #0
 80087c2:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	785b      	ldrb	r3, [r3, #1]
 80087ce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80087d0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80087d6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	7b1b      	ldrb	r3, [r3, #12]
 80087dc:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80087de:	4313      	orrs	r3, r2
 80087e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	22ca      	movs	r2, #202	; 0xca
 80087e8:	625a      	str	r2, [r3, #36]	; 0x24
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2253      	movs	r2, #83	; 0x53
 80087f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f000 fa44 	bl	8008c80 <RTC_EnterInitMode>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00b      	beq.n	8008816 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	22ff      	movs	r2, #255	; 0xff
 8008804:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2204      	movs	r2, #4
 800880a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e045      	b.n	80088a2 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	6979      	ldr	r1, [r7, #20]
 800881c:	4b23      	ldr	r3, [pc, #140]	; (80088ac <HAL_RTC_SetTime+0x178>)
 800881e:	400b      	ands	r3, r1
 8008820:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	689a      	ldr	r2, [r3, #8]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008830:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	6899      	ldr	r1, [r3, #8]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	691a      	ldr	r2, [r3, #16]
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	695b      	ldr	r3, [r3, #20]
 8008840:	431a      	orrs	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68da      	ldr	r2, [r3, #12]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008858:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f003 0320 	and.w	r3, r3, #32
 8008864:	2b00      	cmp	r3, #0
 8008866:	d111      	bne.n	800888c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 f9e1 	bl	8008c30 <HAL_RTC_WaitForSynchro>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00b      	beq.n	800888c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	22ff      	movs	r2, #255	; 0xff
 800887a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2204      	movs	r2, #4
 8008880:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e00a      	b.n	80088a2 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	22ff      	movs	r2, #255	; 0xff
 8008892:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2201      	movs	r2, #1
 8008898:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80088a0:	2300      	movs	r3, #0
  }
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	371c      	adds	r7, #28
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd90      	pop	{r4, r7, pc}
 80088aa:	bf00      	nop
 80088ac:	007f7f7f 	.word	0x007f7f7f

080088b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80088b0:	b590      	push	{r4, r7, lr}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80088bc:	2300      	movs	r3, #0
 80088be:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	7f1b      	ldrb	r3, [r3, #28]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d101      	bne.n	80088cc <HAL_RTC_SetDate+0x1c>
 80088c8:	2302      	movs	r3, #2
 80088ca:	e092      	b.n	80089f2 <HAL_RTC_SetDate+0x142>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2201      	movs	r2, #1
 80088d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2202      	movs	r2, #2
 80088d6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10e      	bne.n	80088fc <HAL_RTC_SetDate+0x4c>
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	785b      	ldrb	r3, [r3, #1]
 80088e2:	f003 0310 	and.w	r3, r3, #16
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d008      	beq.n	80088fc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	785b      	ldrb	r3, [r3, #1]
 80088ee:	f023 0310 	bic.w	r3, r3, #16
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	330a      	adds	r3, #10
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d11c      	bne.n	800893c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	78db      	ldrb	r3, [r3, #3]
 8008906:	4618      	mov	r0, r3
 8008908:	f000 f9e6 	bl	8008cd8 <RTC_ByteToBcd2>
 800890c:	4603      	mov	r3, r0
 800890e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	785b      	ldrb	r3, [r3, #1]
 8008914:	4618      	mov	r0, r3
 8008916:	f000 f9df 	bl	8008cd8 <RTC_ByteToBcd2>
 800891a:	4603      	mov	r3, r0
 800891c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800891e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	789b      	ldrb	r3, [r3, #2]
 8008924:	4618      	mov	r0, r3
 8008926:	f000 f9d7 	bl	8008cd8 <RTC_ByteToBcd2>
 800892a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800892c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008936:	4313      	orrs	r3, r2
 8008938:	617b      	str	r3, [r7, #20]
 800893a:	e00e      	b.n	800895a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	78db      	ldrb	r3, [r3, #3]
 8008940:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	785b      	ldrb	r3, [r3, #1]
 8008946:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008948:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800894e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008956:	4313      	orrs	r3, r2
 8008958:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	22ca      	movs	r2, #202	; 0xca
 8008960:	625a      	str	r2, [r3, #36]	; 0x24
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2253      	movs	r2, #83	; 0x53
 8008968:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f000 f988 	bl	8008c80 <RTC_EnterInitMode>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00b      	beq.n	800898e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	22ff      	movs	r2, #255	; 0xff
 800897c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2204      	movs	r2, #4
 8008982:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e031      	b.n	80089f2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	6979      	ldr	r1, [r7, #20]
 8008994:	4b19      	ldr	r3, [pc, #100]	; (80089fc <HAL_RTC_SetDate+0x14c>)
 8008996:	400b      	ands	r3, r1
 8008998:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68da      	ldr	r2, [r3, #12]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089a8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f003 0320 	and.w	r3, r3, #32
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d111      	bne.n	80089dc <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 f939 	bl	8008c30 <HAL_RTC_WaitForSynchro>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00b      	beq.n	80089dc <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	22ff      	movs	r2, #255	; 0xff
 80089ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2204      	movs	r2, #4
 80089d0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e00a      	b.n	80089f2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	22ff      	movs	r2, #255	; 0xff
 80089e2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2201      	movs	r2, #1
 80089e8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80089f0:	2300      	movs	r3, #0
  }
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	371c      	adds	r7, #28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd90      	pop	{r4, r7, pc}
 80089fa:	bf00      	nop
 80089fc:	00ffff3f 	.word	0x00ffff3f

08008a00 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008a00:	b590      	push	{r4, r7, lr}
 8008a02:	b089      	sub	sp, #36	; 0x24
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008a10:	2300      	movs	r3, #0
 8008a12:	61fb      	str	r3, [r7, #28]
 8008a14:	2300      	movs	r3, #0
 8008a16:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	7f1b      	ldrb	r3, [r3, #28]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d101      	bne.n	8008a24 <HAL_RTC_SetAlarm+0x24>
 8008a20:	2302      	movs	r3, #2
 8008a22:	e101      	b.n	8008c28 <HAL_RTC_SetAlarm+0x228>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2201      	movs	r2, #1
 8008a28:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d137      	bne.n	8008aa6 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d102      	bne.n	8008a4a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2200      	movs	r2, #0
 8008a48:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 f942 	bl	8008cd8 <RTC_ByteToBcd2>
 8008a54:	4603      	mov	r3, r0
 8008a56:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	785b      	ldrb	r3, [r3, #1]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f000 f93b 	bl	8008cd8 <RTC_ByteToBcd2>
 8008a62:	4603      	mov	r3, r0
 8008a64:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008a66:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	789b      	ldrb	r3, [r3, #2]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 f933 	bl	8008cd8 <RTC_ByteToBcd2>
 8008a72:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008a74:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	7b1b      	ldrb	r3, [r3, #12]
 8008a7c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008a7e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f000 f925 	bl	8008cd8 <RTC_ByteToBcd2>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008a92:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008a9a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	61fb      	str	r3, [r7, #28]
 8008aa4:	e023      	b.n	8008aee <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d102      	bne.n	8008aba <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	785b      	ldrb	r3, [r3, #1]
 8008ac4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008ac6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008acc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	7b1b      	ldrb	r3, [r3, #12]
 8008ad2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008ad4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008adc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008ade:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008ae4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008aea:	4313      	orrs	r3, r2
 8008aec:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	22ca      	movs	r2, #202	; 0xca
 8008b00:	625a      	str	r2, [r3, #36]	; 0x24
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2253      	movs	r2, #83	; 0x53
 8008b08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b12:	d13f      	bne.n	8008b94 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689a      	ldr	r2, [r3, #8]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b22:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689a      	ldr	r2, [r3, #8]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b32:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b34:	f7fb fc66 	bl	8004404 <HAL_GetTick>
 8008b38:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008b3a:	e013      	b.n	8008b64 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008b3c:	f7fb fc62 	bl	8004404 <HAL_GetTick>
 8008b40:	4602      	mov	r2, r0
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b4a:	d90b      	bls.n	8008b64 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	22ff      	movs	r2, #255	; 0xff
 8008b52:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2203      	movs	r2, #3
 8008b58:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e061      	b.n	8008c28 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d0e4      	beq.n	8008b3c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	69fa      	ldr	r2, [r7, #28]
 8008b78:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	697a      	ldr	r2, [r7, #20]
 8008b80:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	689a      	ldr	r2, [r3, #8]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b90:	609a      	str	r2, [r3, #8]
 8008b92:	e03e      	b.n	8008c12 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	689a      	ldr	r2, [r3, #8]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008ba2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689a      	ldr	r2, [r3, #8]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bb2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008bb4:	f7fb fc26 	bl	8004404 <HAL_GetTick>
 8008bb8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008bba:	e013      	b.n	8008be4 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008bbc:	f7fb fc22 	bl	8004404 <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bca:	d90b      	bls.n	8008be4 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	22ff      	movs	r2, #255	; 0xff
 8008bd2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2203      	movs	r2, #3
 8008bd8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e021      	b.n	8008c28 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	f003 0302 	and.w	r3, r3, #2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0e4      	beq.n	8008bbc <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	69fa      	ldr	r2, [r7, #28]
 8008bf8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	689a      	ldr	r2, [r3, #8]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c10:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	22ff      	movs	r2, #255	; 0xff
 8008c18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3724      	adds	r7, #36	; 0x24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd90      	pop	{r4, r7, pc}

08008c30 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008c4a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c4c:	f7fb fbda 	bl	8004404 <HAL_GetTick>
 8008c50:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008c52:	e009      	b.n	8008c68 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008c54:	f7fb fbd6 	bl	8004404 <HAL_GetTick>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c62:	d901      	bls.n	8008c68 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e007      	b.n	8008c78 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	f003 0320 	and.w	r3, r3, #32
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d0ee      	beq.n	8008c54 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d119      	bne.n	8008cce <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ca4:	f7fb fbae 	bl	8004404 <HAL_GetTick>
 8008ca8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008caa:	e009      	b.n	8008cc0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008cac:	f7fb fbaa 	bl	8004404 <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cba:	d901      	bls.n	8008cc0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e007      	b.n	8008cd0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d0ee      	beq.n	8008cac <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008ce6:	e005      	b.n	8008cf4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3301      	adds	r3, #1
 8008cec:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008cee:	79fb      	ldrb	r3, [r7, #7]
 8008cf0:	3b0a      	subs	r3, #10
 8008cf2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008cf4:	79fb      	ldrb	r3, [r7, #7]
 8008cf6:	2b09      	cmp	r3, #9
 8008cf8:	d8f6      	bhi.n	8008ce8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	011b      	lsls	r3, r3, #4
 8008d00:	b2da      	uxtb	r2, r3
 8008d02:	79fb      	ldrb	r3, [r7, #7]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	b2db      	uxtb	r3, r3
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3714      	adds	r7, #20
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b087      	sub	sp, #28
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008d20:	2300      	movs	r3, #0
 8008d22:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	7f1b      	ldrb	r3, [r3, #28]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d101      	bne.n	8008d30 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	e03e      	b.n	8008dae <HAL_RTCEx_SetTimeStamp+0x9a>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2201      	movs	r2, #1
 8008d34:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2202      	movs	r2, #2
 8008d3a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	689a      	ldr	r2, [r3, #8]
 8008d42:	4b1e      	ldr	r3, [pc, #120]	; (8008dbc <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008d44:	4013      	ands	r3, r2
 8008d46:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	22ca      	movs	r2, #202	; 0xca
 8008d56:	625a      	str	r2, [r3, #36]	; 0x24
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2253      	movs	r2, #83	; 0x53
 8008d5e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f022 0206 	bic.w	r2, r2, #6
 8008d6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	430a      	orrs	r2, r1
 8008d7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	689a      	ldr	r2, [r3, #8]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d96:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	22ff      	movs	r2, #255	; 0xff
 8008d9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2201      	movs	r2, #1
 8008da4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	371c      	adds	r7, #28
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	fffff7f7 	.word	0xfffff7f7

08008dc0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e025      	b.n	8008e20 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d106      	bne.n	8008dee <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f7fb f9d1 	bl	8004190 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2202      	movs	r2, #2
 8008df2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	4619      	mov	r1, r3
 8008e00:	4610      	mov	r0, r2
 8008e02:	f001 fa2d 	bl	800a260 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6818      	ldr	r0, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	f001 fa81 	bl	800a318 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e3a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d101      	bne.n	8008e46 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008e42:	2302      	movs	r3, #2
 8008e44:	e021      	b.n	8008e8a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008e46:	7dfb      	ldrb	r3, [r7, #23]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d002      	beq.n	8008e52 <HAL_SDRAM_SendCommand+0x2a>
 8008e4c:	7dfb      	ldrb	r3, [r7, #23]
 8008e4e:	2b05      	cmp	r3, #5
 8008e50:	d118      	bne.n	8008e84 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2202      	movs	r2, #2
 8008e56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	68b9      	ldr	r1, [r7, #8]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f001 fac2 	bl	800a3ec <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d104      	bne.n	8008e7a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2205      	movs	r2, #5
 8008e74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008e78:	e006      	b.n	8008e88 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008e82:	e001      	b.n	8008e88 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e000      	b.n	8008e8a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3718      	adds	r7, #24
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b082      	sub	sp, #8
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d101      	bne.n	8008eac <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	e016      	b.n	8008eda <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d10f      	bne.n	8008ed8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2202      	movs	r2, #2
 8008ebc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f001 fab4 	bl	800a434 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	e000      	b.n	8008eda <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d101      	bne.n	8008ef4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e09d      	b.n	8009030 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d108      	bne.n	8008f0e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f04:	d009      	beq.n	8008f1a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	61da      	str	r2, [r3, #28]
 8008f0c:	e005      	b.n	8008f1a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d106      	bne.n	8008f3a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7fa fe97 	bl	8003c68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f50:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f5a:	d902      	bls.n	8008f62 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	60fb      	str	r3, [r7, #12]
 8008f60:	e002      	b.n	8008f68 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f66:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008f70:	d007      	beq.n	8008f82 <HAL_SPI_Init+0xa0>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f7a:	d002      	beq.n	8008f82 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008f92:	431a      	orrs	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	f003 0302 	and.w	r3, r3, #2
 8008f9c:	431a      	orrs	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	f003 0301 	and.w	r3, r3, #1
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fba:	431a      	orrs	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
 8008fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc4:	ea42 0103 	orr.w	r1, r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fcc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	430a      	orrs	r2, r1
 8008fd6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	0c1b      	lsrs	r3, r3, #16
 8008fde:	f003 0204 	and.w	r2, r3, #4
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe6:	f003 0310 	and.w	r3, r3, #16
 8008fea:	431a      	orrs	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff0:	f003 0308 	and.w	r3, r3, #8
 8008ff4:	431a      	orrs	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008ffe:	ea42 0103 	orr.w	r1, r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	430a      	orrs	r2, r1
 800900e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	69da      	ldr	r2, [r3, #28]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800901e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e049      	b.n	80090de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b00      	cmp	r3, #0
 8009054:	d106      	bne.n	8009064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f7fa fe64 	bl	8003d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2202      	movs	r2, #2
 8009068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	3304      	adds	r3, #4
 8009074:	4619      	mov	r1, r3
 8009076:	4610      	mov	r0, r2
 8009078:	f000 fac0 	bl	80095fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
	...

080090e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d001      	beq.n	8009100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e054      	b.n	80091aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2202      	movs	r2, #2
 8009104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68da      	ldr	r2, [r3, #12]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f042 0201 	orr.w	r2, r2, #1
 8009116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a26      	ldr	r2, [pc, #152]	; (80091b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d022      	beq.n	8009168 <HAL_TIM_Base_Start_IT+0x80>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800912a:	d01d      	beq.n	8009168 <HAL_TIM_Base_Start_IT+0x80>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a22      	ldr	r2, [pc, #136]	; (80091bc <HAL_TIM_Base_Start_IT+0xd4>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d018      	beq.n	8009168 <HAL_TIM_Base_Start_IT+0x80>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a21      	ldr	r2, [pc, #132]	; (80091c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d013      	beq.n	8009168 <HAL_TIM_Base_Start_IT+0x80>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a1f      	ldr	r2, [pc, #124]	; (80091c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d00e      	beq.n	8009168 <HAL_TIM_Base_Start_IT+0x80>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a1e      	ldr	r2, [pc, #120]	; (80091c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d009      	beq.n	8009168 <HAL_TIM_Base_Start_IT+0x80>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a1c      	ldr	r2, [pc, #112]	; (80091cc <HAL_TIM_Base_Start_IT+0xe4>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d004      	beq.n	8009168 <HAL_TIM_Base_Start_IT+0x80>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a1b      	ldr	r2, [pc, #108]	; (80091d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d115      	bne.n	8009194 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	689a      	ldr	r2, [r3, #8]
 800916e:	4b19      	ldr	r3, [pc, #100]	; (80091d4 <HAL_TIM_Base_Start_IT+0xec>)
 8009170:	4013      	ands	r3, r2
 8009172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2b06      	cmp	r3, #6
 8009178:	d015      	beq.n	80091a6 <HAL_TIM_Base_Start_IT+0xbe>
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009180:	d011      	beq.n	80091a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f042 0201 	orr.w	r2, r2, #1
 8009190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009192:	e008      	b.n	80091a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f042 0201 	orr.w	r2, r2, #1
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	e000      	b.n	80091a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3714      	adds	r7, #20
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	40010000 	.word	0x40010000
 80091bc:	40000400 	.word	0x40000400
 80091c0:	40000800 	.word	0x40000800
 80091c4:	40000c00 	.word	0x40000c00
 80091c8:	40010400 	.word	0x40010400
 80091cc:	40014000 	.word	0x40014000
 80091d0:	40001800 	.word	0x40001800
 80091d4:	00010007 	.word	0x00010007

080091d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	f003 0302 	and.w	r3, r3, #2
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d122      	bne.n	8009234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	f003 0302 	and.w	r3, r3, #2
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d11b      	bne.n	8009234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f06f 0202 	mvn.w	r2, #2
 8009204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	f003 0303 	and.w	r3, r3, #3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d003      	beq.n	8009222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f9d0 	bl	80095c0 <HAL_TIM_IC_CaptureCallback>
 8009220:	e005      	b.n	800922e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 f9c2 	bl	80095ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f9d3 	bl	80095d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	f003 0304 	and.w	r3, r3, #4
 800923e:	2b04      	cmp	r3, #4
 8009240:	d122      	bne.n	8009288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	f003 0304 	and.w	r3, r3, #4
 800924c:	2b04      	cmp	r3, #4
 800924e:	d11b      	bne.n	8009288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f06f 0204 	mvn.w	r2, #4
 8009258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2202      	movs	r2, #2
 800925e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	699b      	ldr	r3, [r3, #24]
 8009266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f9a6 	bl	80095c0 <HAL_TIM_IC_CaptureCallback>
 8009274:	e005      	b.n	8009282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f998 	bl	80095ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 f9a9 	bl	80095d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	f003 0308 	and.w	r3, r3, #8
 8009292:	2b08      	cmp	r3, #8
 8009294:	d122      	bne.n	80092dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	f003 0308 	and.w	r3, r3, #8
 80092a0:	2b08      	cmp	r3, #8
 80092a2:	d11b      	bne.n	80092dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f06f 0208 	mvn.w	r2, #8
 80092ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2204      	movs	r2, #4
 80092b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	69db      	ldr	r3, [r3, #28]
 80092ba:	f003 0303 	and.w	r3, r3, #3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f97c 	bl	80095c0 <HAL_TIM_IC_CaptureCallback>
 80092c8:	e005      	b.n	80092d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f96e 	bl	80095ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f97f 	bl	80095d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	f003 0310 	and.w	r3, r3, #16
 80092e6:	2b10      	cmp	r3, #16
 80092e8:	d122      	bne.n	8009330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	f003 0310 	and.w	r3, r3, #16
 80092f4:	2b10      	cmp	r3, #16
 80092f6:	d11b      	bne.n	8009330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f06f 0210 	mvn.w	r2, #16
 8009300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2208      	movs	r2, #8
 8009306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	69db      	ldr	r3, [r3, #28]
 800930e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009312:	2b00      	cmp	r3, #0
 8009314:	d003      	beq.n	800931e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f952 	bl	80095c0 <HAL_TIM_IC_CaptureCallback>
 800931c:	e005      	b.n	800932a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f944 	bl	80095ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f955 	bl	80095d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	2b01      	cmp	r3, #1
 800933c:	d10e      	bne.n	800935c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	2b01      	cmp	r3, #1
 800934a:	d107      	bne.n	800935c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f06f 0201 	mvn.w	r2, #1
 8009354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7f8 ffde 	bl	8002318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009366:	2b80      	cmp	r3, #128	; 0x80
 8009368:	d10e      	bne.n	8009388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009374:	2b80      	cmp	r3, #128	; 0x80
 8009376:	d107      	bne.n	8009388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fb0c 	bl	80099a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009396:	d10e      	bne.n	80093b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093a2:	2b80      	cmp	r3, #128	; 0x80
 80093a4:	d107      	bne.n	80093b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80093ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 faff 	bl	80099b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c0:	2b40      	cmp	r3, #64	; 0x40
 80093c2:	d10e      	bne.n	80093e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ce:	2b40      	cmp	r3, #64	; 0x40
 80093d0:	d107      	bne.n	80093e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f903 	bl	80095e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	f003 0320 	and.w	r3, r3, #32
 80093ec:	2b20      	cmp	r3, #32
 80093ee:	d10e      	bne.n	800940e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	f003 0320 	and.w	r3, r3, #32
 80093fa:	2b20      	cmp	r3, #32
 80093fc:	d107      	bne.n	800940e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f06f 0220 	mvn.w	r2, #32
 8009406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fabf 	bl	800998c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800940e:	bf00      	nop
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
	...

08009418 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800942c:	2b01      	cmp	r3, #1
 800942e:	d101      	bne.n	8009434 <HAL_TIM_ConfigClockSource+0x1c>
 8009430:	2302      	movs	r3, #2
 8009432:	e0b4      	b.n	800959e <HAL_TIM_ConfigClockSource+0x186>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2202      	movs	r2, #2
 8009440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800944c:	68ba      	ldr	r2, [r7, #8]
 800944e:	4b56      	ldr	r3, [pc, #344]	; (80095a8 <HAL_TIM_ConfigClockSource+0x190>)
 8009450:	4013      	ands	r3, r2
 8009452:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800945a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800946c:	d03e      	beq.n	80094ec <HAL_TIM_ConfigClockSource+0xd4>
 800946e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009472:	f200 8087 	bhi.w	8009584 <HAL_TIM_ConfigClockSource+0x16c>
 8009476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800947a:	f000 8086 	beq.w	800958a <HAL_TIM_ConfigClockSource+0x172>
 800947e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009482:	d87f      	bhi.n	8009584 <HAL_TIM_ConfigClockSource+0x16c>
 8009484:	2b70      	cmp	r3, #112	; 0x70
 8009486:	d01a      	beq.n	80094be <HAL_TIM_ConfigClockSource+0xa6>
 8009488:	2b70      	cmp	r3, #112	; 0x70
 800948a:	d87b      	bhi.n	8009584 <HAL_TIM_ConfigClockSource+0x16c>
 800948c:	2b60      	cmp	r3, #96	; 0x60
 800948e:	d050      	beq.n	8009532 <HAL_TIM_ConfigClockSource+0x11a>
 8009490:	2b60      	cmp	r3, #96	; 0x60
 8009492:	d877      	bhi.n	8009584 <HAL_TIM_ConfigClockSource+0x16c>
 8009494:	2b50      	cmp	r3, #80	; 0x50
 8009496:	d03c      	beq.n	8009512 <HAL_TIM_ConfigClockSource+0xfa>
 8009498:	2b50      	cmp	r3, #80	; 0x50
 800949a:	d873      	bhi.n	8009584 <HAL_TIM_ConfigClockSource+0x16c>
 800949c:	2b40      	cmp	r3, #64	; 0x40
 800949e:	d058      	beq.n	8009552 <HAL_TIM_ConfigClockSource+0x13a>
 80094a0:	2b40      	cmp	r3, #64	; 0x40
 80094a2:	d86f      	bhi.n	8009584 <HAL_TIM_ConfigClockSource+0x16c>
 80094a4:	2b30      	cmp	r3, #48	; 0x30
 80094a6:	d064      	beq.n	8009572 <HAL_TIM_ConfigClockSource+0x15a>
 80094a8:	2b30      	cmp	r3, #48	; 0x30
 80094aa:	d86b      	bhi.n	8009584 <HAL_TIM_ConfigClockSource+0x16c>
 80094ac:	2b20      	cmp	r3, #32
 80094ae:	d060      	beq.n	8009572 <HAL_TIM_ConfigClockSource+0x15a>
 80094b0:	2b20      	cmp	r3, #32
 80094b2:	d867      	bhi.n	8009584 <HAL_TIM_ConfigClockSource+0x16c>
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d05c      	beq.n	8009572 <HAL_TIM_ConfigClockSource+0x15a>
 80094b8:	2b10      	cmp	r3, #16
 80094ba:	d05a      	beq.n	8009572 <HAL_TIM_ConfigClockSource+0x15a>
 80094bc:	e062      	b.n	8009584 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6818      	ldr	r0, [r3, #0]
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	6899      	ldr	r1, [r3, #8]
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	685a      	ldr	r2, [r3, #4]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	f000 f9af 	bl	8009830 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80094e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	609a      	str	r2, [r3, #8]
      break;
 80094ea:	e04f      	b.n	800958c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6818      	ldr	r0, [r3, #0]
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	6899      	ldr	r1, [r3, #8]
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	f000 f998 	bl	8009830 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	689a      	ldr	r2, [r3, #8]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800950e:	609a      	str	r2, [r3, #8]
      break;
 8009510:	e03c      	b.n	800958c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6818      	ldr	r0, [r3, #0]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	6859      	ldr	r1, [r3, #4]
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	461a      	mov	r2, r3
 8009520:	f000 f90c 	bl	800973c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2150      	movs	r1, #80	; 0x50
 800952a:	4618      	mov	r0, r3
 800952c:	f000 f965 	bl	80097fa <TIM_ITRx_SetConfig>
      break;
 8009530:	e02c      	b.n	800958c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6818      	ldr	r0, [r3, #0]
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	6859      	ldr	r1, [r3, #4]
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	461a      	mov	r2, r3
 8009540:	f000 f92b 	bl	800979a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2160      	movs	r1, #96	; 0x60
 800954a:	4618      	mov	r0, r3
 800954c:	f000 f955 	bl	80097fa <TIM_ITRx_SetConfig>
      break;
 8009550:	e01c      	b.n	800958c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6818      	ldr	r0, [r3, #0]
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	6859      	ldr	r1, [r3, #4]
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	461a      	mov	r2, r3
 8009560:	f000 f8ec 	bl	800973c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2140      	movs	r1, #64	; 0x40
 800956a:	4618      	mov	r0, r3
 800956c:	f000 f945 	bl	80097fa <TIM_ITRx_SetConfig>
      break;
 8009570:	e00c      	b.n	800958c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4619      	mov	r1, r3
 800957c:	4610      	mov	r0, r2
 800957e:	f000 f93c 	bl	80097fa <TIM_ITRx_SetConfig>
      break;
 8009582:	e003      	b.n	800958c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	73fb      	strb	r3, [r7, #15]
      break;
 8009588:	e000      	b.n	800958c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800958a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800959c:	7bfb      	ldrb	r3, [r7, #15]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	fffeff88 	.word	0xfffeff88

080095ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a40      	ldr	r2, [pc, #256]	; (8009710 <TIM_Base_SetConfig+0x114>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d013      	beq.n	800963c <TIM_Base_SetConfig+0x40>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800961a:	d00f      	beq.n	800963c <TIM_Base_SetConfig+0x40>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a3d      	ldr	r2, [pc, #244]	; (8009714 <TIM_Base_SetConfig+0x118>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d00b      	beq.n	800963c <TIM_Base_SetConfig+0x40>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a3c      	ldr	r2, [pc, #240]	; (8009718 <TIM_Base_SetConfig+0x11c>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d007      	beq.n	800963c <TIM_Base_SetConfig+0x40>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a3b      	ldr	r2, [pc, #236]	; (800971c <TIM_Base_SetConfig+0x120>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d003      	beq.n	800963c <TIM_Base_SetConfig+0x40>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a3a      	ldr	r2, [pc, #232]	; (8009720 <TIM_Base_SetConfig+0x124>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d108      	bne.n	800964e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	4313      	orrs	r3, r2
 800964c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a2f      	ldr	r2, [pc, #188]	; (8009710 <TIM_Base_SetConfig+0x114>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d02b      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800965c:	d027      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a2c      	ldr	r2, [pc, #176]	; (8009714 <TIM_Base_SetConfig+0x118>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d023      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a2b      	ldr	r2, [pc, #172]	; (8009718 <TIM_Base_SetConfig+0x11c>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d01f      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a2a      	ldr	r2, [pc, #168]	; (800971c <TIM_Base_SetConfig+0x120>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d01b      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a29      	ldr	r2, [pc, #164]	; (8009720 <TIM_Base_SetConfig+0x124>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d017      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a28      	ldr	r2, [pc, #160]	; (8009724 <TIM_Base_SetConfig+0x128>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d013      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a27      	ldr	r2, [pc, #156]	; (8009728 <TIM_Base_SetConfig+0x12c>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d00f      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a26      	ldr	r2, [pc, #152]	; (800972c <TIM_Base_SetConfig+0x130>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d00b      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a25      	ldr	r2, [pc, #148]	; (8009730 <TIM_Base_SetConfig+0x134>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d007      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a24      	ldr	r2, [pc, #144]	; (8009734 <TIM_Base_SetConfig+0x138>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d003      	beq.n	80096ae <TIM_Base_SetConfig+0xb2>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a23      	ldr	r2, [pc, #140]	; (8009738 <TIM_Base_SetConfig+0x13c>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d108      	bne.n	80096c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	4313      	orrs	r3, r2
 80096be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	689a      	ldr	r2, [r3, #8]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a0a      	ldr	r2, [pc, #40]	; (8009710 <TIM_Base_SetConfig+0x114>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d003      	beq.n	80096f4 <TIM_Base_SetConfig+0xf8>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a0c      	ldr	r2, [pc, #48]	; (8009720 <TIM_Base_SetConfig+0x124>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d103      	bne.n	80096fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	691a      	ldr	r2, [r3, #16]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	615a      	str	r2, [r3, #20]
}
 8009702:	bf00      	nop
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	40010000 	.word	0x40010000
 8009714:	40000400 	.word	0x40000400
 8009718:	40000800 	.word	0x40000800
 800971c:	40000c00 	.word	0x40000c00
 8009720:	40010400 	.word	0x40010400
 8009724:	40014000 	.word	0x40014000
 8009728:	40014400 	.word	0x40014400
 800972c:	40014800 	.word	0x40014800
 8009730:	40001800 	.word	0x40001800
 8009734:	40001c00 	.word	0x40001c00
 8009738:	40002000 	.word	0x40002000

0800973c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6a1b      	ldr	r3, [r3, #32]
 800974c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	f023 0201 	bic.w	r2, r3, #1
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	699b      	ldr	r3, [r3, #24]
 800975e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	011b      	lsls	r3, r3, #4
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	4313      	orrs	r3, r2
 8009770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f023 030a 	bic.w	r3, r3, #10
 8009778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800977a:	697a      	ldr	r2, [r7, #20]
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	4313      	orrs	r3, r2
 8009780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	621a      	str	r2, [r3, #32]
}
 800978e:	bf00      	nop
 8009790:	371c      	adds	r7, #28
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800979a:	b480      	push	{r7}
 800979c:	b087      	sub	sp, #28
 800979e:	af00      	add	r7, sp, #0
 80097a0:	60f8      	str	r0, [r7, #12]
 80097a2:	60b9      	str	r1, [r7, #8]
 80097a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6a1b      	ldr	r3, [r3, #32]
 80097aa:	f023 0210 	bic.w	r2, r3, #16
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6a1b      	ldr	r3, [r3, #32]
 80097bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	031b      	lsls	r3, r3, #12
 80097ca:	697a      	ldr	r2, [r7, #20]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80097d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	011b      	lsls	r3, r3, #4
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	4313      	orrs	r3, r2
 80097e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	693a      	ldr	r2, [r7, #16]
 80097ec:	621a      	str	r2, [r3, #32]
}
 80097ee:	bf00      	nop
 80097f0:	371c      	adds	r7, #28
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b085      	sub	sp, #20
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009810:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4313      	orrs	r3, r2
 8009818:	f043 0307 	orr.w	r3, r3, #7
 800981c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	609a      	str	r2, [r3, #8]
}
 8009824:	bf00      	nop
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009830:	b480      	push	{r7}
 8009832:	b087      	sub	sp, #28
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
 800983c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800984a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	021a      	lsls	r2, r3, #8
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	431a      	orrs	r2, r3
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	4313      	orrs	r3, r2
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	4313      	orrs	r3, r2
 800985c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	609a      	str	r2, [r3, #8]
}
 8009864:	bf00      	nop
 8009866:	371c      	adds	r7, #28
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009880:	2b01      	cmp	r3, #1
 8009882:	d101      	bne.n	8009888 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009884:	2302      	movs	r3, #2
 8009886:	e06d      	b.n	8009964 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2202      	movs	r2, #2
 8009894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a30      	ldr	r2, [pc, #192]	; (8009970 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d004      	beq.n	80098bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a2f      	ldr	r2, [pc, #188]	; (8009974 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d108      	bne.n	80098ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80098c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	4313      	orrs	r3, r2
 80098de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a20      	ldr	r2, [pc, #128]	; (8009970 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d022      	beq.n	8009938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098fa:	d01d      	beq.n	8009938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a1d      	ldr	r2, [pc, #116]	; (8009978 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d018      	beq.n	8009938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a1c      	ldr	r2, [pc, #112]	; (800997c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d013      	beq.n	8009938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a1a      	ldr	r2, [pc, #104]	; (8009980 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d00e      	beq.n	8009938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a15      	ldr	r2, [pc, #84]	; (8009974 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d009      	beq.n	8009938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a16      	ldr	r2, [pc, #88]	; (8009984 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d004      	beq.n	8009938 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a15      	ldr	r2, [pc, #84]	; (8009988 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d10c      	bne.n	8009952 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800993e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	4313      	orrs	r3, r2
 8009948:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3714      	adds	r7, #20
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr
 8009970:	40010000 	.word	0x40010000
 8009974:	40010400 	.word	0x40010400
 8009978:	40000400 	.word	0x40000400
 800997c:	40000800 	.word	0x40000800
 8009980:	40000c00 	.word	0x40000c00
 8009984:	40014000 	.word	0x40014000
 8009988:	40001800 	.word	0x40001800

0800998c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d101      	bne.n	80099da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e040      	b.n	8009a5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d106      	bne.n	80099f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7fa fa30 	bl	8003e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2224      	movs	r2, #36	; 0x24
 80099f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f022 0201 	bic.w	r2, r2, #1
 8009a04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f82c 	bl	8009a64 <UART_SetConfig>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d101      	bne.n	8009a16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	e022      	b.n	8009a5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d002      	beq.n	8009a24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fa84 	bl	8009f2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	685a      	ldr	r2, [r3, #4]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	689a      	ldr	r2, [r3, #8]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f042 0201 	orr.w	r2, r2, #1
 8009a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fb0b 	bl	800a070 <UART_CheckIdleState>
 8009a5a:	4603      	mov	r3, r0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b088      	sub	sp, #32
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	689a      	ldr	r2, [r3, #8]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	431a      	orrs	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	695b      	ldr	r3, [r3, #20]
 8009a7e:	431a      	orrs	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	69db      	ldr	r3, [r3, #28]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	4ba6      	ldr	r3, [pc, #664]	; (8009d28 <UART_SetConfig+0x2c4>)
 8009a90:	4013      	ands	r3, r2
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	6812      	ldr	r2, [r2, #0]
 8009a96:	6979      	ldr	r1, [r7, #20]
 8009a98:	430b      	orrs	r3, r1
 8009a9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	68da      	ldr	r2, [r3, #12]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	699b      	ldr	r3, [r3, #24]
 8009ab6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a1b      	ldr	r3, [r3, #32]
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	697a      	ldr	r2, [r7, #20]
 8009ad2:	430a      	orrs	r2, r1
 8009ad4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a94      	ldr	r2, [pc, #592]	; (8009d2c <UART_SetConfig+0x2c8>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d120      	bne.n	8009b22 <UART_SetConfig+0xbe>
 8009ae0:	4b93      	ldr	r3, [pc, #588]	; (8009d30 <UART_SetConfig+0x2cc>)
 8009ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ae6:	f003 0303 	and.w	r3, r3, #3
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d816      	bhi.n	8009b1c <UART_SetConfig+0xb8>
 8009aee:	a201      	add	r2, pc, #4	; (adr r2, 8009af4 <UART_SetConfig+0x90>)
 8009af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af4:	08009b05 	.word	0x08009b05
 8009af8:	08009b11 	.word	0x08009b11
 8009afc:	08009b0b 	.word	0x08009b0b
 8009b00:	08009b17 	.word	0x08009b17
 8009b04:	2301      	movs	r3, #1
 8009b06:	77fb      	strb	r3, [r7, #31]
 8009b08:	e150      	b.n	8009dac <UART_SetConfig+0x348>
 8009b0a:	2302      	movs	r3, #2
 8009b0c:	77fb      	strb	r3, [r7, #31]
 8009b0e:	e14d      	b.n	8009dac <UART_SetConfig+0x348>
 8009b10:	2304      	movs	r3, #4
 8009b12:	77fb      	strb	r3, [r7, #31]
 8009b14:	e14a      	b.n	8009dac <UART_SetConfig+0x348>
 8009b16:	2308      	movs	r3, #8
 8009b18:	77fb      	strb	r3, [r7, #31]
 8009b1a:	e147      	b.n	8009dac <UART_SetConfig+0x348>
 8009b1c:	2310      	movs	r3, #16
 8009b1e:	77fb      	strb	r3, [r7, #31]
 8009b20:	e144      	b.n	8009dac <UART_SetConfig+0x348>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a83      	ldr	r2, [pc, #524]	; (8009d34 <UART_SetConfig+0x2d0>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d132      	bne.n	8009b92 <UART_SetConfig+0x12e>
 8009b2c:	4b80      	ldr	r3, [pc, #512]	; (8009d30 <UART_SetConfig+0x2cc>)
 8009b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b32:	f003 030c 	and.w	r3, r3, #12
 8009b36:	2b0c      	cmp	r3, #12
 8009b38:	d828      	bhi.n	8009b8c <UART_SetConfig+0x128>
 8009b3a:	a201      	add	r2, pc, #4	; (adr r2, 8009b40 <UART_SetConfig+0xdc>)
 8009b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b40:	08009b75 	.word	0x08009b75
 8009b44:	08009b8d 	.word	0x08009b8d
 8009b48:	08009b8d 	.word	0x08009b8d
 8009b4c:	08009b8d 	.word	0x08009b8d
 8009b50:	08009b81 	.word	0x08009b81
 8009b54:	08009b8d 	.word	0x08009b8d
 8009b58:	08009b8d 	.word	0x08009b8d
 8009b5c:	08009b8d 	.word	0x08009b8d
 8009b60:	08009b7b 	.word	0x08009b7b
 8009b64:	08009b8d 	.word	0x08009b8d
 8009b68:	08009b8d 	.word	0x08009b8d
 8009b6c:	08009b8d 	.word	0x08009b8d
 8009b70:	08009b87 	.word	0x08009b87
 8009b74:	2300      	movs	r3, #0
 8009b76:	77fb      	strb	r3, [r7, #31]
 8009b78:	e118      	b.n	8009dac <UART_SetConfig+0x348>
 8009b7a:	2302      	movs	r3, #2
 8009b7c:	77fb      	strb	r3, [r7, #31]
 8009b7e:	e115      	b.n	8009dac <UART_SetConfig+0x348>
 8009b80:	2304      	movs	r3, #4
 8009b82:	77fb      	strb	r3, [r7, #31]
 8009b84:	e112      	b.n	8009dac <UART_SetConfig+0x348>
 8009b86:	2308      	movs	r3, #8
 8009b88:	77fb      	strb	r3, [r7, #31]
 8009b8a:	e10f      	b.n	8009dac <UART_SetConfig+0x348>
 8009b8c:	2310      	movs	r3, #16
 8009b8e:	77fb      	strb	r3, [r7, #31]
 8009b90:	e10c      	b.n	8009dac <UART_SetConfig+0x348>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a68      	ldr	r2, [pc, #416]	; (8009d38 <UART_SetConfig+0x2d4>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d120      	bne.n	8009bde <UART_SetConfig+0x17a>
 8009b9c:	4b64      	ldr	r3, [pc, #400]	; (8009d30 <UART_SetConfig+0x2cc>)
 8009b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ba2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009ba6:	2b30      	cmp	r3, #48	; 0x30
 8009ba8:	d013      	beq.n	8009bd2 <UART_SetConfig+0x16e>
 8009baa:	2b30      	cmp	r3, #48	; 0x30
 8009bac:	d814      	bhi.n	8009bd8 <UART_SetConfig+0x174>
 8009bae:	2b20      	cmp	r3, #32
 8009bb0:	d009      	beq.n	8009bc6 <UART_SetConfig+0x162>
 8009bb2:	2b20      	cmp	r3, #32
 8009bb4:	d810      	bhi.n	8009bd8 <UART_SetConfig+0x174>
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d002      	beq.n	8009bc0 <UART_SetConfig+0x15c>
 8009bba:	2b10      	cmp	r3, #16
 8009bbc:	d006      	beq.n	8009bcc <UART_SetConfig+0x168>
 8009bbe:	e00b      	b.n	8009bd8 <UART_SetConfig+0x174>
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	77fb      	strb	r3, [r7, #31]
 8009bc4:	e0f2      	b.n	8009dac <UART_SetConfig+0x348>
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	77fb      	strb	r3, [r7, #31]
 8009bca:	e0ef      	b.n	8009dac <UART_SetConfig+0x348>
 8009bcc:	2304      	movs	r3, #4
 8009bce:	77fb      	strb	r3, [r7, #31]
 8009bd0:	e0ec      	b.n	8009dac <UART_SetConfig+0x348>
 8009bd2:	2308      	movs	r3, #8
 8009bd4:	77fb      	strb	r3, [r7, #31]
 8009bd6:	e0e9      	b.n	8009dac <UART_SetConfig+0x348>
 8009bd8:	2310      	movs	r3, #16
 8009bda:	77fb      	strb	r3, [r7, #31]
 8009bdc:	e0e6      	b.n	8009dac <UART_SetConfig+0x348>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a56      	ldr	r2, [pc, #344]	; (8009d3c <UART_SetConfig+0x2d8>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d120      	bne.n	8009c2a <UART_SetConfig+0x1c6>
 8009be8:	4b51      	ldr	r3, [pc, #324]	; (8009d30 <UART_SetConfig+0x2cc>)
 8009bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009bf2:	2bc0      	cmp	r3, #192	; 0xc0
 8009bf4:	d013      	beq.n	8009c1e <UART_SetConfig+0x1ba>
 8009bf6:	2bc0      	cmp	r3, #192	; 0xc0
 8009bf8:	d814      	bhi.n	8009c24 <UART_SetConfig+0x1c0>
 8009bfa:	2b80      	cmp	r3, #128	; 0x80
 8009bfc:	d009      	beq.n	8009c12 <UART_SetConfig+0x1ae>
 8009bfe:	2b80      	cmp	r3, #128	; 0x80
 8009c00:	d810      	bhi.n	8009c24 <UART_SetConfig+0x1c0>
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d002      	beq.n	8009c0c <UART_SetConfig+0x1a8>
 8009c06:	2b40      	cmp	r3, #64	; 0x40
 8009c08:	d006      	beq.n	8009c18 <UART_SetConfig+0x1b4>
 8009c0a:	e00b      	b.n	8009c24 <UART_SetConfig+0x1c0>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	77fb      	strb	r3, [r7, #31]
 8009c10:	e0cc      	b.n	8009dac <UART_SetConfig+0x348>
 8009c12:	2302      	movs	r3, #2
 8009c14:	77fb      	strb	r3, [r7, #31]
 8009c16:	e0c9      	b.n	8009dac <UART_SetConfig+0x348>
 8009c18:	2304      	movs	r3, #4
 8009c1a:	77fb      	strb	r3, [r7, #31]
 8009c1c:	e0c6      	b.n	8009dac <UART_SetConfig+0x348>
 8009c1e:	2308      	movs	r3, #8
 8009c20:	77fb      	strb	r3, [r7, #31]
 8009c22:	e0c3      	b.n	8009dac <UART_SetConfig+0x348>
 8009c24:	2310      	movs	r3, #16
 8009c26:	77fb      	strb	r3, [r7, #31]
 8009c28:	e0c0      	b.n	8009dac <UART_SetConfig+0x348>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a44      	ldr	r2, [pc, #272]	; (8009d40 <UART_SetConfig+0x2dc>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d125      	bne.n	8009c80 <UART_SetConfig+0x21c>
 8009c34:	4b3e      	ldr	r3, [pc, #248]	; (8009d30 <UART_SetConfig+0x2cc>)
 8009c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c42:	d017      	beq.n	8009c74 <UART_SetConfig+0x210>
 8009c44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c48:	d817      	bhi.n	8009c7a <UART_SetConfig+0x216>
 8009c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c4e:	d00b      	beq.n	8009c68 <UART_SetConfig+0x204>
 8009c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c54:	d811      	bhi.n	8009c7a <UART_SetConfig+0x216>
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <UART_SetConfig+0x1fe>
 8009c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c5e:	d006      	beq.n	8009c6e <UART_SetConfig+0x20a>
 8009c60:	e00b      	b.n	8009c7a <UART_SetConfig+0x216>
 8009c62:	2300      	movs	r3, #0
 8009c64:	77fb      	strb	r3, [r7, #31]
 8009c66:	e0a1      	b.n	8009dac <UART_SetConfig+0x348>
 8009c68:	2302      	movs	r3, #2
 8009c6a:	77fb      	strb	r3, [r7, #31]
 8009c6c:	e09e      	b.n	8009dac <UART_SetConfig+0x348>
 8009c6e:	2304      	movs	r3, #4
 8009c70:	77fb      	strb	r3, [r7, #31]
 8009c72:	e09b      	b.n	8009dac <UART_SetConfig+0x348>
 8009c74:	2308      	movs	r3, #8
 8009c76:	77fb      	strb	r3, [r7, #31]
 8009c78:	e098      	b.n	8009dac <UART_SetConfig+0x348>
 8009c7a:	2310      	movs	r3, #16
 8009c7c:	77fb      	strb	r3, [r7, #31]
 8009c7e:	e095      	b.n	8009dac <UART_SetConfig+0x348>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a2f      	ldr	r2, [pc, #188]	; (8009d44 <UART_SetConfig+0x2e0>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d125      	bne.n	8009cd6 <UART_SetConfig+0x272>
 8009c8a:	4b29      	ldr	r3, [pc, #164]	; (8009d30 <UART_SetConfig+0x2cc>)
 8009c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c98:	d017      	beq.n	8009cca <UART_SetConfig+0x266>
 8009c9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c9e:	d817      	bhi.n	8009cd0 <UART_SetConfig+0x26c>
 8009ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ca4:	d00b      	beq.n	8009cbe <UART_SetConfig+0x25a>
 8009ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009caa:	d811      	bhi.n	8009cd0 <UART_SetConfig+0x26c>
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d003      	beq.n	8009cb8 <UART_SetConfig+0x254>
 8009cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cb4:	d006      	beq.n	8009cc4 <UART_SetConfig+0x260>
 8009cb6:	e00b      	b.n	8009cd0 <UART_SetConfig+0x26c>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	77fb      	strb	r3, [r7, #31]
 8009cbc:	e076      	b.n	8009dac <UART_SetConfig+0x348>
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	77fb      	strb	r3, [r7, #31]
 8009cc2:	e073      	b.n	8009dac <UART_SetConfig+0x348>
 8009cc4:	2304      	movs	r3, #4
 8009cc6:	77fb      	strb	r3, [r7, #31]
 8009cc8:	e070      	b.n	8009dac <UART_SetConfig+0x348>
 8009cca:	2308      	movs	r3, #8
 8009ccc:	77fb      	strb	r3, [r7, #31]
 8009cce:	e06d      	b.n	8009dac <UART_SetConfig+0x348>
 8009cd0:	2310      	movs	r3, #16
 8009cd2:	77fb      	strb	r3, [r7, #31]
 8009cd4:	e06a      	b.n	8009dac <UART_SetConfig+0x348>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a1b      	ldr	r2, [pc, #108]	; (8009d48 <UART_SetConfig+0x2e4>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d138      	bne.n	8009d52 <UART_SetConfig+0x2ee>
 8009ce0:	4b13      	ldr	r3, [pc, #76]	; (8009d30 <UART_SetConfig+0x2cc>)
 8009ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ce6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009cea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009cee:	d017      	beq.n	8009d20 <UART_SetConfig+0x2bc>
 8009cf0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009cf4:	d82a      	bhi.n	8009d4c <UART_SetConfig+0x2e8>
 8009cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cfa:	d00b      	beq.n	8009d14 <UART_SetConfig+0x2b0>
 8009cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d00:	d824      	bhi.n	8009d4c <UART_SetConfig+0x2e8>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d003      	beq.n	8009d0e <UART_SetConfig+0x2aa>
 8009d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d0a:	d006      	beq.n	8009d1a <UART_SetConfig+0x2b6>
 8009d0c:	e01e      	b.n	8009d4c <UART_SetConfig+0x2e8>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	77fb      	strb	r3, [r7, #31]
 8009d12:	e04b      	b.n	8009dac <UART_SetConfig+0x348>
 8009d14:	2302      	movs	r3, #2
 8009d16:	77fb      	strb	r3, [r7, #31]
 8009d18:	e048      	b.n	8009dac <UART_SetConfig+0x348>
 8009d1a:	2304      	movs	r3, #4
 8009d1c:	77fb      	strb	r3, [r7, #31]
 8009d1e:	e045      	b.n	8009dac <UART_SetConfig+0x348>
 8009d20:	2308      	movs	r3, #8
 8009d22:	77fb      	strb	r3, [r7, #31]
 8009d24:	e042      	b.n	8009dac <UART_SetConfig+0x348>
 8009d26:	bf00      	nop
 8009d28:	efff69f3 	.word	0xefff69f3
 8009d2c:	40011000 	.word	0x40011000
 8009d30:	40023800 	.word	0x40023800
 8009d34:	40004400 	.word	0x40004400
 8009d38:	40004800 	.word	0x40004800
 8009d3c:	40004c00 	.word	0x40004c00
 8009d40:	40005000 	.word	0x40005000
 8009d44:	40011400 	.word	0x40011400
 8009d48:	40007800 	.word	0x40007800
 8009d4c:	2310      	movs	r3, #16
 8009d4e:	77fb      	strb	r3, [r7, #31]
 8009d50:	e02c      	b.n	8009dac <UART_SetConfig+0x348>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a72      	ldr	r2, [pc, #456]	; (8009f20 <UART_SetConfig+0x4bc>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d125      	bne.n	8009da8 <UART_SetConfig+0x344>
 8009d5c:	4b71      	ldr	r3, [pc, #452]	; (8009f24 <UART_SetConfig+0x4c0>)
 8009d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009d66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009d6a:	d017      	beq.n	8009d9c <UART_SetConfig+0x338>
 8009d6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009d70:	d817      	bhi.n	8009da2 <UART_SetConfig+0x33e>
 8009d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d76:	d00b      	beq.n	8009d90 <UART_SetConfig+0x32c>
 8009d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d7c:	d811      	bhi.n	8009da2 <UART_SetConfig+0x33e>
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d003      	beq.n	8009d8a <UART_SetConfig+0x326>
 8009d82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d86:	d006      	beq.n	8009d96 <UART_SetConfig+0x332>
 8009d88:	e00b      	b.n	8009da2 <UART_SetConfig+0x33e>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	77fb      	strb	r3, [r7, #31]
 8009d8e:	e00d      	b.n	8009dac <UART_SetConfig+0x348>
 8009d90:	2302      	movs	r3, #2
 8009d92:	77fb      	strb	r3, [r7, #31]
 8009d94:	e00a      	b.n	8009dac <UART_SetConfig+0x348>
 8009d96:	2304      	movs	r3, #4
 8009d98:	77fb      	strb	r3, [r7, #31]
 8009d9a:	e007      	b.n	8009dac <UART_SetConfig+0x348>
 8009d9c:	2308      	movs	r3, #8
 8009d9e:	77fb      	strb	r3, [r7, #31]
 8009da0:	e004      	b.n	8009dac <UART_SetConfig+0x348>
 8009da2:	2310      	movs	r3, #16
 8009da4:	77fb      	strb	r3, [r7, #31]
 8009da6:	e001      	b.n	8009dac <UART_SetConfig+0x348>
 8009da8:	2310      	movs	r3, #16
 8009daa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	69db      	ldr	r3, [r3, #28]
 8009db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009db4:	d15b      	bne.n	8009e6e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009db6:	7ffb      	ldrb	r3, [r7, #31]
 8009db8:	2b08      	cmp	r3, #8
 8009dba:	d828      	bhi.n	8009e0e <UART_SetConfig+0x3aa>
 8009dbc:	a201      	add	r2, pc, #4	; (adr r2, 8009dc4 <UART_SetConfig+0x360>)
 8009dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc2:	bf00      	nop
 8009dc4:	08009de9 	.word	0x08009de9
 8009dc8:	08009df1 	.word	0x08009df1
 8009dcc:	08009df9 	.word	0x08009df9
 8009dd0:	08009e0f 	.word	0x08009e0f
 8009dd4:	08009dff 	.word	0x08009dff
 8009dd8:	08009e0f 	.word	0x08009e0f
 8009ddc:	08009e0f 	.word	0x08009e0f
 8009de0:	08009e0f 	.word	0x08009e0f
 8009de4:	08009e07 	.word	0x08009e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009de8:	f7fd ffc8 	bl	8007d7c <HAL_RCC_GetPCLK1Freq>
 8009dec:	61b8      	str	r0, [r7, #24]
        break;
 8009dee:	e013      	b.n	8009e18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009df0:	f7fd ffd8 	bl	8007da4 <HAL_RCC_GetPCLK2Freq>
 8009df4:	61b8      	str	r0, [r7, #24]
        break;
 8009df6:	e00f      	b.n	8009e18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009df8:	4b4b      	ldr	r3, [pc, #300]	; (8009f28 <UART_SetConfig+0x4c4>)
 8009dfa:	61bb      	str	r3, [r7, #24]
        break;
 8009dfc:	e00c      	b.n	8009e18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dfe:	f7fd feeb 	bl	8007bd8 <HAL_RCC_GetSysClockFreq>
 8009e02:	61b8      	str	r0, [r7, #24]
        break;
 8009e04:	e008      	b.n	8009e18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e0a:	61bb      	str	r3, [r7, #24]
        break;
 8009e0c:	e004      	b.n	8009e18 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	77bb      	strb	r3, [r7, #30]
        break;
 8009e16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d074      	beq.n	8009f08 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	005a      	lsls	r2, r3, #1
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	085b      	lsrs	r3, r3, #1
 8009e28:	441a      	add	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	2b0f      	cmp	r3, #15
 8009e38:	d916      	bls.n	8009e68 <UART_SetConfig+0x404>
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e40:	d212      	bcs.n	8009e68 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	f023 030f 	bic.w	r3, r3, #15
 8009e4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	085b      	lsrs	r3, r3, #1
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	f003 0307 	and.w	r3, r3, #7
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	89fb      	ldrh	r3, [r7, #14]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	89fa      	ldrh	r2, [r7, #14]
 8009e64:	60da      	str	r2, [r3, #12]
 8009e66:	e04f      	b.n	8009f08 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	77bb      	strb	r3, [r7, #30]
 8009e6c:	e04c      	b.n	8009f08 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e6e:	7ffb      	ldrb	r3, [r7, #31]
 8009e70:	2b08      	cmp	r3, #8
 8009e72:	d828      	bhi.n	8009ec6 <UART_SetConfig+0x462>
 8009e74:	a201      	add	r2, pc, #4	; (adr r2, 8009e7c <UART_SetConfig+0x418>)
 8009e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7a:	bf00      	nop
 8009e7c:	08009ea1 	.word	0x08009ea1
 8009e80:	08009ea9 	.word	0x08009ea9
 8009e84:	08009eb1 	.word	0x08009eb1
 8009e88:	08009ec7 	.word	0x08009ec7
 8009e8c:	08009eb7 	.word	0x08009eb7
 8009e90:	08009ec7 	.word	0x08009ec7
 8009e94:	08009ec7 	.word	0x08009ec7
 8009e98:	08009ec7 	.word	0x08009ec7
 8009e9c:	08009ebf 	.word	0x08009ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ea0:	f7fd ff6c 	bl	8007d7c <HAL_RCC_GetPCLK1Freq>
 8009ea4:	61b8      	str	r0, [r7, #24]
        break;
 8009ea6:	e013      	b.n	8009ed0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ea8:	f7fd ff7c 	bl	8007da4 <HAL_RCC_GetPCLK2Freq>
 8009eac:	61b8      	str	r0, [r7, #24]
        break;
 8009eae:	e00f      	b.n	8009ed0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009eb0:	4b1d      	ldr	r3, [pc, #116]	; (8009f28 <UART_SetConfig+0x4c4>)
 8009eb2:	61bb      	str	r3, [r7, #24]
        break;
 8009eb4:	e00c      	b.n	8009ed0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009eb6:	f7fd fe8f 	bl	8007bd8 <HAL_RCC_GetSysClockFreq>
 8009eba:	61b8      	str	r0, [r7, #24]
        break;
 8009ebc:	e008      	b.n	8009ed0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ec2:	61bb      	str	r3, [r7, #24]
        break;
 8009ec4:	e004      	b.n	8009ed0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	77bb      	strb	r3, [r7, #30]
        break;
 8009ece:	bf00      	nop
    }

    if (pclk != 0U)
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d018      	beq.n	8009f08 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	085a      	lsrs	r2, r3, #1
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	441a      	add	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ee8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	2b0f      	cmp	r3, #15
 8009eee:	d909      	bls.n	8009f04 <UART_SetConfig+0x4a0>
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ef6:	d205      	bcs.n	8009f04 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	60da      	str	r2, [r3, #12]
 8009f02:	e001      	b.n	8009f08 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009f14:	7fbb      	ldrb	r3, [r7, #30]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3720      	adds	r7, #32
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	40007c00 	.word	0x40007c00
 8009f24:	40023800 	.word	0x40023800
 8009f28:	00f42400 	.word	0x00f42400

08009f2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f38:	f003 0301 	and.w	r3, r3, #1
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00a      	beq.n	8009f56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	430a      	orrs	r2, r1
 8009f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5a:	f003 0302 	and.w	r3, r3, #2
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00a      	beq.n	8009f78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	430a      	orrs	r2, r1
 8009f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7c:	f003 0304 	and.w	r3, r3, #4
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00a      	beq.n	8009f9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	430a      	orrs	r2, r1
 8009f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9e:	f003 0308 	and.w	r3, r3, #8
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00a      	beq.n	8009fbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	430a      	orrs	r2, r1
 8009fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc0:	f003 0310 	and.w	r3, r3, #16
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00a      	beq.n	8009fde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	430a      	orrs	r2, r1
 8009fdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe2:	f003 0320 	and.w	r3, r3, #32
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00a      	beq.n	800a000 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	430a      	orrs	r2, r1
 8009ffe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d01a      	beq.n	800a042 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	430a      	orrs	r2, r1
 800a020:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a02a:	d10a      	bne.n	800a042 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	430a      	orrs	r2, r1
 800a040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00a      	beq.n	800a064 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	430a      	orrs	r2, r1
 800a062:	605a      	str	r2, [r3, #4]
  }
}
 800a064:	bf00      	nop
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af02      	add	r7, sp, #8
 800a076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a080:	f7fa f9c0 	bl	8004404 <HAL_GetTick>
 800a084:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 0308 	and.w	r3, r3, #8
 800a090:	2b08      	cmp	r3, #8
 800a092:	d10e      	bne.n	800a0b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a094:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f817 	bl	800a0d6 <UART_WaitOnFlagUntilTimeout>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	e00d      	b.n	800a0ce <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2220      	movs	r2, #32
 800a0b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2220      	movs	r2, #32
 800a0bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b09c      	sub	sp, #112	; 0x70
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	60f8      	str	r0, [r7, #12]
 800a0de:	60b9      	str	r1, [r7, #8]
 800a0e0:	603b      	str	r3, [r7, #0]
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0e6:	e0a5      	b.n	800a234 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ee:	f000 80a1 	beq.w	800a234 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0f2:	f7fa f987 	bl	8004404 <HAL_GetTick>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d302      	bcc.n	800a108 <UART_WaitOnFlagUntilTimeout+0x32>
 800a102:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a104:	2b00      	cmp	r3, #0
 800a106:	d13e      	bne.n	800a186 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a110:	e853 3f00 	ldrex	r3, [r3]
 800a114:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a118:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a11c:	667b      	str	r3, [r7, #100]	; 0x64
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	461a      	mov	r2, r3
 800a124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a126:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a128:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a12c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a12e:	e841 2300 	strex	r3, r2, [r1]
 800a132:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1e6      	bne.n	800a108 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	3308      	adds	r3, #8
 800a140:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a144:	e853 3f00 	ldrex	r3, [r3]
 800a148:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14c:	f023 0301 	bic.w	r3, r3, #1
 800a150:	663b      	str	r3, [r7, #96]	; 0x60
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3308      	adds	r3, #8
 800a158:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a15a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a15c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a160:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a162:	e841 2300 	strex	r3, r2, [r1]
 800a166:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d1e5      	bne.n	800a13a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2220      	movs	r2, #32
 800a172:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2220      	movs	r2, #32
 800a178:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a182:	2303      	movs	r3, #3
 800a184:	e067      	b.n	800a256 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f003 0304 	and.w	r3, r3, #4
 800a190:	2b00      	cmp	r3, #0
 800a192:	d04f      	beq.n	800a234 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	69db      	ldr	r3, [r3, #28]
 800a19a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a19e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1a2:	d147      	bne.n	800a234 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a1ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b6:	e853 3f00 	ldrex	r3, [r3]
 800a1ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a1c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a1ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a1d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1d4:	e841 2300 	strex	r3, r2, [r1]
 800a1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1e6      	bne.n	800a1ae <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3308      	adds	r3, #8
 800a1e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	e853 3f00 	ldrex	r3, [r3]
 800a1ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	f023 0301 	bic.w	r3, r3, #1
 800a1f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	3308      	adds	r3, #8
 800a1fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a200:	623a      	str	r2, [r7, #32]
 800a202:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a204:	69f9      	ldr	r1, [r7, #28]
 800a206:	6a3a      	ldr	r2, [r7, #32]
 800a208:	e841 2300 	strex	r3, r2, [r1]
 800a20c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1e5      	bne.n	800a1e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2220      	movs	r2, #32
 800a218:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2220      	movs	r2, #32
 800a21e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2220      	movs	r2, #32
 800a224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a230:	2303      	movs	r3, #3
 800a232:	e010      	b.n	800a256 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	69da      	ldr	r2, [r3, #28]
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	4013      	ands	r3, r2
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	429a      	cmp	r2, r3
 800a242:	bf0c      	ite	eq
 800a244:	2301      	moveq	r3, #1
 800a246:	2300      	movne	r3, #0
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	461a      	mov	r2, r3
 800a24c:	79fb      	ldrb	r3, [r7, #7]
 800a24e:	429a      	cmp	r2, r3
 800a250:	f43f af4a 	beq.w	800a0e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3770      	adds	r7, #112	; 0x70
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
	...

0800a260 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d121      	bne.n	800a2b6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	4b27      	ldr	r3, [pc, #156]	; (800a314 <FMC_SDRAM_Init+0xb4>)
 800a278:	4013      	ands	r3, r2
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	6851      	ldr	r1, [r2, #4]
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	6892      	ldr	r2, [r2, #8]
 800a282:	4311      	orrs	r1, r2
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	68d2      	ldr	r2, [r2, #12]
 800a288:	4311      	orrs	r1, r2
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	6912      	ldr	r2, [r2, #16]
 800a28e:	4311      	orrs	r1, r2
 800a290:	683a      	ldr	r2, [r7, #0]
 800a292:	6952      	ldr	r2, [r2, #20]
 800a294:	4311      	orrs	r1, r2
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	6992      	ldr	r2, [r2, #24]
 800a29a:	4311      	orrs	r1, r2
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	69d2      	ldr	r2, [r2, #28]
 800a2a0:	4311      	orrs	r1, r2
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	6a12      	ldr	r2, [r2, #32]
 800a2a6:	4311      	orrs	r1, r2
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a2ac:	430a      	orrs	r2, r1
 800a2ae:	431a      	orrs	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	601a      	str	r2, [r3, #0]
 800a2b4:	e026      	b.n	800a304 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	69d9      	ldr	r1, [r3, #28]
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	6a1b      	ldr	r3, [r3, #32]
 800a2c6:	4319      	orrs	r1, r3
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2cc:	430b      	orrs	r3, r1
 800a2ce:	431a      	orrs	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685a      	ldr	r2, [r3, #4]
 800a2d8:	4b0e      	ldr	r3, [pc, #56]	; (800a314 <FMC_SDRAM_Init+0xb4>)
 800a2da:	4013      	ands	r3, r2
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	6851      	ldr	r1, [r2, #4]
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	6892      	ldr	r2, [r2, #8]
 800a2e4:	4311      	orrs	r1, r2
 800a2e6:	683a      	ldr	r2, [r7, #0]
 800a2e8:	68d2      	ldr	r2, [r2, #12]
 800a2ea:	4311      	orrs	r1, r2
 800a2ec:	683a      	ldr	r2, [r7, #0]
 800a2ee:	6912      	ldr	r2, [r2, #16]
 800a2f0:	4311      	orrs	r1, r2
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	6952      	ldr	r2, [r2, #20]
 800a2f6:	4311      	orrs	r1, r2
 800a2f8:	683a      	ldr	r2, [r7, #0]
 800a2fa:	6992      	ldr	r2, [r2, #24]
 800a2fc:	430a      	orrs	r2, r1
 800a2fe:	431a      	orrs	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	370c      	adds	r7, #12
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	ffff8000 	.word	0xffff8000

0800a318 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d128      	bne.n	800a37c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	1e59      	subs	r1, r3, #1
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	3b01      	subs	r3, #1
 800a33e:	011b      	lsls	r3, r3, #4
 800a340:	4319      	orrs	r1, r3
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	3b01      	subs	r3, #1
 800a348:	021b      	lsls	r3, r3, #8
 800a34a:	4319      	orrs	r1, r3
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	3b01      	subs	r3, #1
 800a352:	031b      	lsls	r3, r3, #12
 800a354:	4319      	orrs	r1, r3
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	691b      	ldr	r3, [r3, #16]
 800a35a:	3b01      	subs	r3, #1
 800a35c:	041b      	lsls	r3, r3, #16
 800a35e:	4319      	orrs	r1, r3
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	3b01      	subs	r3, #1
 800a366:	051b      	lsls	r3, r3, #20
 800a368:	4319      	orrs	r1, r3
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	699b      	ldr	r3, [r3, #24]
 800a36e:	3b01      	subs	r3, #1
 800a370:	061b      	lsls	r3, r3, #24
 800a372:	430b      	orrs	r3, r1
 800a374:	431a      	orrs	r2, r3
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	609a      	str	r2, [r3, #8]
 800a37a:	e02d      	b.n	800a3d8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	689a      	ldr	r2, [r3, #8]
 800a380:	4b19      	ldr	r3, [pc, #100]	; (800a3e8 <FMC_SDRAM_Timing_Init+0xd0>)
 800a382:	4013      	ands	r3, r2
 800a384:	68ba      	ldr	r2, [r7, #8]
 800a386:	68d2      	ldr	r2, [r2, #12]
 800a388:	3a01      	subs	r2, #1
 800a38a:	0311      	lsls	r1, r2, #12
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	6952      	ldr	r2, [r2, #20]
 800a390:	3a01      	subs	r2, #1
 800a392:	0512      	lsls	r2, r2, #20
 800a394:	430a      	orrs	r2, r1
 800a396:	431a      	orrs	r2, r3
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	1e59      	subs	r1, r3, #1
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	011b      	lsls	r3, r3, #4
 800a3b2:	4319      	orrs	r1, r3
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	021b      	lsls	r3, r3, #8
 800a3bc:	4319      	orrs	r1, r3
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	041b      	lsls	r3, r3, #16
 800a3c6:	4319      	orrs	r1, r3
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	061b      	lsls	r3, r3, #24
 800a3d0:	430b      	orrs	r3, r1
 800a3d2:	431a      	orrs	r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	ff0f0fff 	.word	0xff0f0fff

0800a3ec <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	691a      	ldr	r2, [r3, #16]
 800a3fc:	4b0c      	ldr	r3, [pc, #48]	; (800a430 <FMC_SDRAM_SendCommand+0x44>)
 800a3fe:	4013      	ands	r3, r2
 800a400:	68ba      	ldr	r2, [r7, #8]
 800a402:	6811      	ldr	r1, [r2, #0]
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	6852      	ldr	r2, [r2, #4]
 800a408:	4311      	orrs	r1, r2
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	6892      	ldr	r2, [r2, #8]
 800a40e:	3a01      	subs	r2, #1
 800a410:	0152      	lsls	r2, r2, #5
 800a412:	4311      	orrs	r1, r2
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	68d2      	ldr	r2, [r2, #12]
 800a418:	0252      	lsls	r2, r2, #9
 800a41a:	430a      	orrs	r2, r1
 800a41c:	431a      	orrs	r2, r3
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	ffc00000 	.word	0xffc00000

0800a434 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	695a      	ldr	r2, [r3, #20]
 800a442:	4b07      	ldr	r3, [pc, #28]	; (800a460 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800a444:	4013      	ands	r3, r2
 800a446:	683a      	ldr	r2, [r7, #0]
 800a448:	0052      	lsls	r2, r2, #1
 800a44a:	431a      	orrs	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a450:	2300      	movs	r3, #0
}
 800a452:	4618      	mov	r0, r3
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	ffffc001 	.word	0xffffc001

0800a464 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	4603      	mov	r3, r0
 800a46c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a46e:	2300      	movs	r3, #0
 800a470:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a476:	2b84      	cmp	r3, #132	; 0x84
 800a478:	d005      	beq.n	800a486 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a47a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	4413      	add	r3, r2
 800a482:	3303      	adds	r3, #3
 800a484:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a486:	68fb      	ldr	r3, [r7, #12]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3714      	adds	r7, #20
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a498:	f001 fa18 	bl	800b8cc <vTaskStartScheduler>
  
  return osOK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a4a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4a4:	b089      	sub	sp, #36	; 0x24
 800a4a6:	af04      	add	r7, sp, #16
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	695b      	ldr	r3, [r3, #20]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d020      	beq.n	800a4f6 <osThreadCreate+0x54>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	699b      	ldr	r3, [r3, #24]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d01c      	beq.n	800a4f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	685c      	ldr	r4, [r3, #4]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681d      	ldr	r5, [r3, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	691e      	ldr	r6, [r3, #16]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7ff ffc8 	bl	800a464 <makeFreeRtosPriority>
 800a4d4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	695b      	ldr	r3, [r3, #20]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4de:	9202      	str	r2, [sp, #8]
 800a4e0:	9301      	str	r3, [sp, #4]
 800a4e2:	9100      	str	r1, [sp, #0]
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	4632      	mov	r2, r6
 800a4e8:	4629      	mov	r1, r5
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f000 fef0 	bl	800b2d0 <xTaskCreateStatic>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	60fb      	str	r3, [r7, #12]
 800a4f4:	e01c      	b.n	800a530 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	685c      	ldr	r4, [r3, #4]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a502:	b29e      	uxth	r6, r3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7ff ffaa 	bl	800a464 <makeFreeRtosPriority>
 800a510:	4602      	mov	r2, r0
 800a512:	f107 030c 	add.w	r3, r7, #12
 800a516:	9301      	str	r3, [sp, #4]
 800a518:	9200      	str	r2, [sp, #0]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	4632      	mov	r2, r6
 800a51e:	4629      	mov	r1, r5
 800a520:	4620      	mov	r0, r4
 800a522:	f000 ff38 	bl	800b396 <xTaskCreate>
 800a526:	4603      	mov	r3, r0
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d001      	beq.n	800a530 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a52c:	2300      	movs	r3, #0
 800a52e:	e000      	b.n	800a532 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a530:	68fb      	ldr	r3, [r7, #12]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a53a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b084      	sub	sp, #16
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d001      	beq.n	800a550 <osDelay+0x16>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	e000      	b.n	800a552 <osDelay+0x18>
 800a550:	2301      	movs	r3, #1
 800a552:	4618      	mov	r0, r3
 800a554:	f001 f984 	bl	800b860 <vTaskDelay>
  
  return osOK;
 800a558:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b082      	sub	sp, #8
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d007      	beq.n	800a582 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	4619      	mov	r1, r3
 800a578:	2001      	movs	r0, #1
 800a57a:	f000 fa66 	bl	800aa4a <xQueueCreateMutexStatic>
 800a57e:	4603      	mov	r3, r0
 800a580:	e003      	b.n	800a58a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a582:	2001      	movs	r0, #1
 800a584:	f000 fa49 	bl	800aa1a <xQueueCreateMutex>
 800a588:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a592:	b590      	push	{r4, r7, lr}
 800a594:	b085      	sub	sp, #20
 800a596:	af02      	add	r7, sp, #8
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d011      	beq.n	800a5c8 <osMessageCreate+0x36>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00d      	beq.n	800a5c8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6818      	ldr	r0, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6859      	ldr	r1, [r3, #4]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	689a      	ldr	r2, [r3, #8]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	2400      	movs	r4, #0
 800a5be:	9400      	str	r4, [sp, #0]
 800a5c0:	f000 f92e 	bl	800a820 <xQueueGenericCreateStatic>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	e008      	b.n	800a5da <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6818      	ldr	r0, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	f000 f9a6 	bl	800a924 <xQueueGenericCreate>
 800a5d8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd90      	pop	{r4, r7, pc}

0800a5e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b083      	sub	sp, #12
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f103 0208 	add.w	r2, r3, #8
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a5fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f103 0208 	add.w	r2, r3, #8
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f103 0208 	add.w	r2, r3, #8
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a616:	bf00      	nop
 800a618:	370c      	adds	r7, #12
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr

0800a622 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a622:	b480      	push	{r7}
 800a624:	b083      	sub	sp, #12
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	68fa      	ldr	r2, [r7, #12]
 800a650:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	689a      	ldr	r2, [r3, #8]
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	1c5a      	adds	r2, r3, #1
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	601a      	str	r2, [r3, #0]
}
 800a678:	bf00      	nop
 800a67a:	3714      	adds	r7, #20
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a69a:	d103      	bne.n	800a6a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	60fb      	str	r3, [r7, #12]
 800a6a2:	e00c      	b.n	800a6be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	3308      	adds	r3, #8
 800a6a8:	60fb      	str	r3, [r7, #12]
 800a6aa:	e002      	b.n	800a6b2 <vListInsert+0x2e>
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	60fb      	str	r3, [r7, #12]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68ba      	ldr	r2, [r7, #8]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d2f6      	bcs.n	800a6ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	685a      	ldr	r2, [r3, #4]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	683a      	ldr	r2, [r7, #0]
 800a6cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	683a      	ldr	r2, [r7, #0]
 800a6d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	1c5a      	adds	r2, r3, #1
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	601a      	str	r2, [r3, #0]
}
 800a6ea:	bf00      	nop
 800a6ec:	3714      	adds	r7, #20
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr

0800a6f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a6f6:	b480      	push	{r7}
 800a6f8:	b085      	sub	sp, #20
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	691b      	ldr	r3, [r3, #16]
 800a702:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	6892      	ldr	r2, [r2, #8]
 800a70c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	6852      	ldr	r2, [r2, #4]
 800a716:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d103      	bne.n	800a72a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	689a      	ldr	r2, [r3, #8]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	1e5a      	subs	r2, r3, #1
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3714      	adds	r7, #20
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr
	...

0800a74c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d10c      	bne.n	800a77a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a764:	b672      	cpsid	i
 800a766:	f383 8811 	msr	BASEPRI, r3
 800a76a:	f3bf 8f6f 	isb	sy
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	b662      	cpsie	i
 800a774:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a776:	bf00      	nop
 800a778:	e7fe      	b.n	800a778 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a77a:	f002 f817 	bl	800c7ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a786:	68f9      	ldr	r1, [r7, #12]
 800a788:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a78a:	fb01 f303 	mul.w	r3, r1, r3
 800a78e:	441a      	add	r2, r3
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	68f9      	ldr	r1, [r7, #12]
 800a7ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a7b0:	fb01 f303 	mul.w	r3, r1, r3
 800a7b4:	441a      	add	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	22ff      	movs	r2, #255	; 0xff
 800a7be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	22ff      	movs	r2, #255	; 0xff
 800a7c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d114      	bne.n	800a7fa <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d01a      	beq.n	800a80e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	3310      	adds	r3, #16
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f001 fad3 	bl	800bd88 <xTaskRemoveFromEventList>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d012      	beq.n	800a80e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a7e8:	4b0c      	ldr	r3, [pc, #48]	; (800a81c <xQueueGenericReset+0xd0>)
 800a7ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ee:	601a      	str	r2, [r3, #0]
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	e009      	b.n	800a80e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	3310      	adds	r3, #16
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7ff feef 	bl	800a5e2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	3324      	adds	r3, #36	; 0x24
 800a808:	4618      	mov	r0, r3
 800a80a:	f7ff feea 	bl	800a5e2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a80e:	f002 f801 	bl	800c814 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a812:	2301      	movs	r3, #1
}
 800a814:	4618      	mov	r0, r3
 800a816:	3710      	adds	r7, #16
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	e000ed04 	.word	0xe000ed04

0800a820 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a820:	b580      	push	{r7, lr}
 800a822:	b08e      	sub	sp, #56	; 0x38
 800a824:	af02      	add	r7, sp, #8
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
 800a82c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10c      	bne.n	800a84e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a838:	b672      	cpsid	i
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	b662      	cpsie	i
 800a848:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a84a:	bf00      	nop
 800a84c:	e7fe      	b.n	800a84c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10c      	bne.n	800a86e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a858:	b672      	cpsid	i
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	b662      	cpsie	i
 800a868:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a86a:	bf00      	nop
 800a86c:	e7fe      	b.n	800a86c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d002      	beq.n	800a87a <xQueueGenericCreateStatic+0x5a>
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d001      	beq.n	800a87e <xQueueGenericCreateStatic+0x5e>
 800a87a:	2301      	movs	r3, #1
 800a87c:	e000      	b.n	800a880 <xQueueGenericCreateStatic+0x60>
 800a87e:	2300      	movs	r3, #0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10c      	bne.n	800a89e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a888:	b672      	cpsid	i
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	b662      	cpsie	i
 800a898:	623b      	str	r3, [r7, #32]
}
 800a89a:	bf00      	nop
 800a89c:	e7fe      	b.n	800a89c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d102      	bne.n	800a8aa <xQueueGenericCreateStatic+0x8a>
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d101      	bne.n	800a8ae <xQueueGenericCreateStatic+0x8e>
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e000      	b.n	800a8b0 <xQueueGenericCreateStatic+0x90>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10c      	bne.n	800a8ce <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b8:	b672      	cpsid	i
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	b662      	cpsie	i
 800a8c8:	61fb      	str	r3, [r7, #28]
}
 800a8ca:	bf00      	nop
 800a8cc:	e7fe      	b.n	800a8cc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a8ce:	2348      	movs	r3, #72	; 0x48
 800a8d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	2b48      	cmp	r3, #72	; 0x48
 800a8d6:	d00c      	beq.n	800a8f2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8dc:	b672      	cpsid	i
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	b662      	cpsie	i
 800a8ec:	61bb      	str	r3, [r7, #24]
}
 800a8ee:	bf00      	nop
 800a8f0:	e7fe      	b.n	800a8f0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a8f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00d      	beq.n	800a91a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a900:	2201      	movs	r2, #1
 800a902:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a906:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a90c:	9300      	str	r3, [sp, #0]
 800a90e:	4613      	mov	r3, r2
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	68b9      	ldr	r1, [r7, #8]
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f000 f847 	bl	800a9a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3730      	adds	r7, #48	; 0x30
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a924:	b580      	push	{r7, lr}
 800a926:	b08a      	sub	sp, #40	; 0x28
 800a928:	af02      	add	r7, sp, #8
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	4613      	mov	r3, r2
 800a930:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d10c      	bne.n	800a952 <xQueueGenericCreate+0x2e>
	__asm volatile
 800a938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93c:	b672      	cpsid	i
 800a93e:	f383 8811 	msr	BASEPRI, r3
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	b662      	cpsie	i
 800a94c:	613b      	str	r3, [r7, #16]
}
 800a94e:	bf00      	nop
 800a950:	e7fe      	b.n	800a950 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d102      	bne.n	800a95e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a958:	2300      	movs	r3, #0
 800a95a:	61fb      	str	r3, [r7, #28]
 800a95c:	e004      	b.n	800a968 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	fb02 f303 	mul.w	r3, r2, r3
 800a966:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	3348      	adds	r3, #72	; 0x48
 800a96c:	4618      	mov	r0, r3
 800a96e:	f002 f805 	bl	800c97c <pvPortMalloc>
 800a972:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d011      	beq.n	800a99e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	3348      	adds	r3, #72	; 0x48
 800a982:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	2200      	movs	r2, #0
 800a988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a98c:	79fa      	ldrb	r2, [r7, #7]
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	4613      	mov	r3, r2
 800a994:	697a      	ldr	r2, [r7, #20]
 800a996:	68b9      	ldr	r1, [r7, #8]
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f000 f805 	bl	800a9a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a99e:	69bb      	ldr	r3, [r7, #24]
	}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3720      	adds	r7, #32
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
 800a9b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d103      	bne.n	800a9c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	69ba      	ldr	r2, [r7, #24]
 800a9c0:	601a      	str	r2, [r3, #0]
 800a9c2:	e002      	b.n	800a9ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	68ba      	ldr	r2, [r7, #8]
 800a9d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a9d6:	2101      	movs	r1, #1
 800a9d8:	69b8      	ldr	r0, [r7, #24]
 800a9da:	f7ff feb7 	bl	800a74c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a9de:	bf00      	nop
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b082      	sub	sp, #8
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00e      	beq.n	800aa12 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800aa06:	2300      	movs	r3, #0
 800aa08:	2200      	movs	r2, #0
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 f837 	bl	800aa80 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800aa12:	bf00      	nop
 800aa14:	3708      	adds	r7, #8
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b086      	sub	sp, #24
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	4603      	mov	r3, r0
 800aa22:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800aa24:	2301      	movs	r3, #1
 800aa26:	617b      	str	r3, [r7, #20]
 800aa28:	2300      	movs	r3, #0
 800aa2a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800aa2c:	79fb      	ldrb	r3, [r7, #7]
 800aa2e:	461a      	mov	r2, r3
 800aa30:	6939      	ldr	r1, [r7, #16]
 800aa32:	6978      	ldr	r0, [r7, #20]
 800aa34:	f7ff ff76 	bl	800a924 <xQueueGenericCreate>
 800aa38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f7ff ffd3 	bl	800a9e6 <prvInitialiseMutex>

		return xNewQueue;
 800aa40:	68fb      	ldr	r3, [r7, #12]
	}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3718      	adds	r7, #24
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b088      	sub	sp, #32
 800aa4e:	af02      	add	r7, sp, #8
 800aa50:	4603      	mov	r3, r0
 800aa52:	6039      	str	r1, [r7, #0]
 800aa54:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800aa56:	2301      	movs	r3, #1
 800aa58:	617b      	str	r3, [r7, #20]
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800aa5e:	79fb      	ldrb	r3, [r7, #7]
 800aa60:	9300      	str	r3, [sp, #0]
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	2200      	movs	r2, #0
 800aa66:	6939      	ldr	r1, [r7, #16]
 800aa68:	6978      	ldr	r0, [r7, #20]
 800aa6a:	f7ff fed9 	bl	800a820 <xQueueGenericCreateStatic>
 800aa6e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800aa70:	68f8      	ldr	r0, [r7, #12]
 800aa72:	f7ff ffb8 	bl	800a9e6 <prvInitialiseMutex>

		return xNewQueue;
 800aa76:	68fb      	ldr	r3, [r7, #12]
	}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3718      	adds	r7, #24
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b08e      	sub	sp, #56	; 0x38
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
 800aa8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d10c      	bne.n	800aab6 <xQueueGenericSend+0x36>
	__asm volatile
 800aa9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa0:	b672      	cpsid	i
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	b662      	cpsie	i
 800aab0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aab2:	bf00      	nop
 800aab4:	e7fe      	b.n	800aab4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d103      	bne.n	800aac4 <xQueueGenericSend+0x44>
 800aabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d101      	bne.n	800aac8 <xQueueGenericSend+0x48>
 800aac4:	2301      	movs	r3, #1
 800aac6:	e000      	b.n	800aaca <xQueueGenericSend+0x4a>
 800aac8:	2300      	movs	r3, #0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10c      	bne.n	800aae8 <xQueueGenericSend+0x68>
	__asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad2:	b672      	cpsid	i
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	b662      	cpsie	i
 800aae2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aae4:	bf00      	nop
 800aae6:	e7fe      	b.n	800aae6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d103      	bne.n	800aaf6 <xQueueGenericSend+0x76>
 800aaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d101      	bne.n	800aafa <xQueueGenericSend+0x7a>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e000      	b.n	800aafc <xQueueGenericSend+0x7c>
 800aafa:	2300      	movs	r3, #0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10c      	bne.n	800ab1a <xQueueGenericSend+0x9a>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	b672      	cpsid	i
 800ab06:	f383 8811 	msr	BASEPRI, r3
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	b662      	cpsie	i
 800ab14:	623b      	str	r3, [r7, #32]
}
 800ab16:	bf00      	nop
 800ab18:	e7fe      	b.n	800ab18 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab1a:	f001 fafd 	bl	800c118 <xTaskGetSchedulerState>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d102      	bne.n	800ab2a <xQueueGenericSend+0xaa>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d101      	bne.n	800ab2e <xQueueGenericSend+0xae>
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e000      	b.n	800ab30 <xQueueGenericSend+0xb0>
 800ab2e:	2300      	movs	r3, #0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10c      	bne.n	800ab4e <xQueueGenericSend+0xce>
	__asm volatile
 800ab34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab38:	b672      	cpsid	i
 800ab3a:	f383 8811 	msr	BASEPRI, r3
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	b662      	cpsie	i
 800ab48:	61fb      	str	r3, [r7, #28]
}
 800ab4a:	bf00      	nop
 800ab4c:	e7fe      	b.n	800ab4c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab4e:	f001 fe2d 	bl	800c7ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d302      	bcc.n	800ab64 <xQueueGenericSend+0xe4>
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d129      	bne.n	800abb8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab64:	683a      	ldr	r2, [r7, #0]
 800ab66:	68b9      	ldr	r1, [r7, #8]
 800ab68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab6a:	f000 faa1 	bl	800b0b0 <prvCopyDataToQueue>
 800ab6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d010      	beq.n	800ab9a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7a:	3324      	adds	r3, #36	; 0x24
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f001 f903 	bl	800bd88 <xTaskRemoveFromEventList>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d013      	beq.n	800abb0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab88:	4b3f      	ldr	r3, [pc, #252]	; (800ac88 <xQueueGenericSend+0x208>)
 800ab8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab8e:	601a      	str	r2, [r3, #0]
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	e00a      	b.n	800abb0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ab9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d007      	beq.n	800abb0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aba0:	4b39      	ldr	r3, [pc, #228]	; (800ac88 <xQueueGenericSend+0x208>)
 800aba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aba6:	601a      	str	r2, [r3, #0]
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800abb0:	f001 fe30 	bl	800c814 <vPortExitCritical>
				return pdPASS;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e063      	b.n	800ac80 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d103      	bne.n	800abc6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800abbe:	f001 fe29 	bl	800c814 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800abc2:	2300      	movs	r3, #0
 800abc4:	e05c      	b.n	800ac80 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d106      	bne.n	800abda <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abcc:	f107 0314 	add.w	r3, r7, #20
 800abd0:	4618      	mov	r0, r3
 800abd2:	f001 f93d 	bl	800be50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abd6:	2301      	movs	r3, #1
 800abd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abda:	f001 fe1b 	bl	800c814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abde:	f000 fee3 	bl	800b9a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abe2:	f001 fde3 	bl	800c7ac <vPortEnterCritical>
 800abe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abec:	b25b      	sxtb	r3, r3
 800abee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf2:	d103      	bne.n	800abfc <xQueueGenericSend+0x17c>
 800abf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf6:	2200      	movs	r2, #0
 800abf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac02:	b25b      	sxtb	r3, r3
 800ac04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac08:	d103      	bne.n	800ac12 <xQueueGenericSend+0x192>
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac12:	f001 fdff 	bl	800c814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac16:	1d3a      	adds	r2, r7, #4
 800ac18:	f107 0314 	add.w	r3, r7, #20
 800ac1c:	4611      	mov	r1, r2
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f001 f92c 	bl	800be7c <xTaskCheckForTimeOut>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d124      	bne.n	800ac74 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac2c:	f000 fb38 	bl	800b2a0 <prvIsQueueFull>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d018      	beq.n	800ac68 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac38:	3310      	adds	r3, #16
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f001 f87c 	bl	800bd3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac46:	f000 fac3 	bl	800b1d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac4a:	f000 febb 	bl	800b9c4 <xTaskResumeAll>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f47f af7c 	bne.w	800ab4e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800ac56:	4b0c      	ldr	r3, [pc, #48]	; (800ac88 <xQueueGenericSend+0x208>)
 800ac58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac5c:	601a      	str	r2, [r3, #0]
 800ac5e:	f3bf 8f4f 	dsb	sy
 800ac62:	f3bf 8f6f 	isb	sy
 800ac66:	e772      	b.n	800ab4e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac6a:	f000 fab1 	bl	800b1d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac6e:	f000 fea9 	bl	800b9c4 <xTaskResumeAll>
 800ac72:	e76c      	b.n	800ab4e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac76:	f000 faab 	bl	800b1d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac7a:	f000 fea3 	bl	800b9c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3738      	adds	r7, #56	; 0x38
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	e000ed04 	.word	0xe000ed04

0800ac8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b08c      	sub	sp, #48	; 0x30
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d10c      	bne.n	800acc0 <xQueueReceive+0x34>
	__asm volatile
 800aca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acaa:	b672      	cpsid	i
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	b662      	cpsie	i
 800acba:	623b      	str	r3, [r7, #32]
}
 800acbc:	bf00      	nop
 800acbe:	e7fe      	b.n	800acbe <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d103      	bne.n	800acce <xQueueReceive+0x42>
 800acc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acca:	2b00      	cmp	r3, #0
 800accc:	d101      	bne.n	800acd2 <xQueueReceive+0x46>
 800acce:	2301      	movs	r3, #1
 800acd0:	e000      	b.n	800acd4 <xQueueReceive+0x48>
 800acd2:	2300      	movs	r3, #0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10c      	bne.n	800acf2 <xQueueReceive+0x66>
	__asm volatile
 800acd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acdc:	b672      	cpsid	i
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	b662      	cpsie	i
 800acec:	61fb      	str	r3, [r7, #28]
}
 800acee:	bf00      	nop
 800acf0:	e7fe      	b.n	800acf0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acf2:	f001 fa11 	bl	800c118 <xTaskGetSchedulerState>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d102      	bne.n	800ad02 <xQueueReceive+0x76>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d101      	bne.n	800ad06 <xQueueReceive+0x7a>
 800ad02:	2301      	movs	r3, #1
 800ad04:	e000      	b.n	800ad08 <xQueueReceive+0x7c>
 800ad06:	2300      	movs	r3, #0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10c      	bne.n	800ad26 <xQueueReceive+0x9a>
	__asm volatile
 800ad0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad10:	b672      	cpsid	i
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	b662      	cpsie	i
 800ad20:	61bb      	str	r3, [r7, #24]
}
 800ad22:	bf00      	nop
 800ad24:	e7fe      	b.n	800ad24 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad26:	f001 fd41 	bl	800c7ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d01f      	beq.n	800ad76 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad36:	68b9      	ldr	r1, [r7, #8]
 800ad38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad3a:	f000 fa23 	bl	800b184 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad40:	1e5a      	subs	r2, r3, #1
 800ad42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00f      	beq.n	800ad6e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad50:	3310      	adds	r3, #16
 800ad52:	4618      	mov	r0, r3
 800ad54:	f001 f818 	bl	800bd88 <xTaskRemoveFromEventList>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d007      	beq.n	800ad6e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad5e:	4b3d      	ldr	r3, [pc, #244]	; (800ae54 <xQueueReceive+0x1c8>)
 800ad60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad64:	601a      	str	r2, [r3, #0]
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad6e:	f001 fd51 	bl	800c814 <vPortExitCritical>
				return pdPASS;
 800ad72:	2301      	movs	r3, #1
 800ad74:	e069      	b.n	800ae4a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d103      	bne.n	800ad84 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad7c:	f001 fd4a 	bl	800c814 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad80:	2300      	movs	r3, #0
 800ad82:	e062      	b.n	800ae4a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d106      	bne.n	800ad98 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad8a:	f107 0310 	add.w	r3, r7, #16
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f001 f85e 	bl	800be50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad94:	2301      	movs	r3, #1
 800ad96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad98:	f001 fd3c 	bl	800c814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad9c:	f000 fe04 	bl	800b9a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ada0:	f001 fd04 	bl	800c7ac <vPortEnterCritical>
 800ada4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adaa:	b25b      	sxtb	r3, r3
 800adac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb0:	d103      	bne.n	800adba <xQueueReceive+0x12e>
 800adb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb4:	2200      	movs	r2, #0
 800adb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adc0:	b25b      	sxtb	r3, r3
 800adc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc6:	d103      	bne.n	800add0 <xQueueReceive+0x144>
 800adc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adca:	2200      	movs	r2, #0
 800adcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800add0:	f001 fd20 	bl	800c814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800add4:	1d3a      	adds	r2, r7, #4
 800add6:	f107 0310 	add.w	r3, r7, #16
 800adda:	4611      	mov	r1, r2
 800addc:	4618      	mov	r0, r3
 800adde:	f001 f84d 	bl	800be7c <xTaskCheckForTimeOut>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d123      	bne.n	800ae30 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ade8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adea:	f000 fa43 	bl	800b274 <prvIsQueueEmpty>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d017      	beq.n	800ae24 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800adf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf6:	3324      	adds	r3, #36	; 0x24
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	4611      	mov	r1, r2
 800adfc:	4618      	mov	r0, r3
 800adfe:	f000 ff9d 	bl	800bd3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae04:	f000 f9e4 	bl	800b1d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae08:	f000 fddc 	bl	800b9c4 <xTaskResumeAll>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d189      	bne.n	800ad26 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800ae12:	4b10      	ldr	r3, [pc, #64]	; (800ae54 <xQueueReceive+0x1c8>)
 800ae14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae18:	601a      	str	r2, [r3, #0]
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	f3bf 8f6f 	isb	sy
 800ae22:	e780      	b.n	800ad26 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae26:	f000 f9d3 	bl	800b1d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae2a:	f000 fdcb 	bl	800b9c4 <xTaskResumeAll>
 800ae2e:	e77a      	b.n	800ad26 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae32:	f000 f9cd 	bl	800b1d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae36:	f000 fdc5 	bl	800b9c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae3c:	f000 fa1a 	bl	800b274 <prvIsQueueEmpty>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f43f af6f 	beq.w	800ad26 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3730      	adds	r7, #48	; 0x30
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	e000ed04 	.word	0xe000ed04

0800ae58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b08e      	sub	sp, #56	; 0x38
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ae62:	2300      	movs	r3, #0
 800ae64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ae6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10c      	bne.n	800ae8e <xQueueSemaphoreTake+0x36>
	__asm volatile
 800ae74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae78:	b672      	cpsid	i
 800ae7a:	f383 8811 	msr	BASEPRI, r3
 800ae7e:	f3bf 8f6f 	isb	sy
 800ae82:	f3bf 8f4f 	dsb	sy
 800ae86:	b662      	cpsie	i
 800ae88:	623b      	str	r3, [r7, #32]
}
 800ae8a:	bf00      	nop
 800ae8c:	e7fe      	b.n	800ae8c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ae8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00c      	beq.n	800aeb0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800ae96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9a:	b672      	cpsid	i
 800ae9c:	f383 8811 	msr	BASEPRI, r3
 800aea0:	f3bf 8f6f 	isb	sy
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	b662      	cpsie	i
 800aeaa:	61fb      	str	r3, [r7, #28]
}
 800aeac:	bf00      	nop
 800aeae:	e7fe      	b.n	800aeae <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aeb0:	f001 f932 	bl	800c118 <xTaskGetSchedulerState>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d102      	bne.n	800aec0 <xQueueSemaphoreTake+0x68>
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d101      	bne.n	800aec4 <xQueueSemaphoreTake+0x6c>
 800aec0:	2301      	movs	r3, #1
 800aec2:	e000      	b.n	800aec6 <xQueueSemaphoreTake+0x6e>
 800aec4:	2300      	movs	r3, #0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d10c      	bne.n	800aee4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800aeca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aece:	b672      	cpsid	i
 800aed0:	f383 8811 	msr	BASEPRI, r3
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	f3bf 8f4f 	dsb	sy
 800aedc:	b662      	cpsie	i
 800aede:	61bb      	str	r3, [r7, #24]
}
 800aee0:	bf00      	nop
 800aee2:	e7fe      	b.n	800aee2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aee4:	f001 fc62 	bl	800c7ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aeee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d024      	beq.n	800af3e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef6:	1e5a      	subs	r2, r3, #1
 800aef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d104      	bne.n	800af0e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800af04:	f001 face 	bl	800c4a4 <pvTaskIncrementMutexHeldCount>
 800af08:	4602      	mov	r2, r0
 800af0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00f      	beq.n	800af36 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af18:	3310      	adds	r3, #16
 800af1a:	4618      	mov	r0, r3
 800af1c:	f000 ff34 	bl	800bd88 <xTaskRemoveFromEventList>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d007      	beq.n	800af36 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800af26:	4b55      	ldr	r3, [pc, #340]	; (800b07c <xQueueSemaphoreTake+0x224>)
 800af28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af2c:	601a      	str	r2, [r3, #0]
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800af36:	f001 fc6d 	bl	800c814 <vPortExitCritical>
				return pdPASS;
 800af3a:	2301      	movs	r3, #1
 800af3c:	e099      	b.n	800b072 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d113      	bne.n	800af6c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800af44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00c      	beq.n	800af64 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4e:	b672      	cpsid	i
 800af50:	f383 8811 	msr	BASEPRI, r3
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	f3bf 8f4f 	dsb	sy
 800af5c:	b662      	cpsie	i
 800af5e:	617b      	str	r3, [r7, #20]
}
 800af60:	bf00      	nop
 800af62:	e7fe      	b.n	800af62 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800af64:	f001 fc56 	bl	800c814 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800af68:	2300      	movs	r3, #0
 800af6a:	e082      	b.n	800b072 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d106      	bne.n	800af80 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af72:	f107 030c 	add.w	r3, r7, #12
 800af76:	4618      	mov	r0, r3
 800af78:	f000 ff6a 	bl	800be50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af7c:	2301      	movs	r3, #1
 800af7e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af80:	f001 fc48 	bl	800c814 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af84:	f000 fd10 	bl	800b9a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af88:	f001 fc10 	bl	800c7ac <vPortEnterCritical>
 800af8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af92:	b25b      	sxtb	r3, r3
 800af94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af98:	d103      	bne.n	800afa2 <xQueueSemaphoreTake+0x14a>
 800af9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9c:	2200      	movs	r2, #0
 800af9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afa8:	b25b      	sxtb	r3, r3
 800afaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afae:	d103      	bne.n	800afb8 <xQueueSemaphoreTake+0x160>
 800afb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afb8:	f001 fc2c 	bl	800c814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afbc:	463a      	mov	r2, r7
 800afbe:	f107 030c 	add.w	r3, r7, #12
 800afc2:	4611      	mov	r1, r2
 800afc4:	4618      	mov	r0, r3
 800afc6:	f000 ff59 	bl	800be7c <xTaskCheckForTimeOut>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d132      	bne.n	800b036 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afd2:	f000 f94f 	bl	800b274 <prvIsQueueEmpty>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d026      	beq.n	800b02a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800afdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d109      	bne.n	800aff8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800afe4:	f001 fbe2 	bl	800c7ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800afe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	4618      	mov	r0, r3
 800afee:	f001 f8b1 	bl	800c154 <xTaskPriorityInherit>
 800aff2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aff4:	f001 fc0e 	bl	800c814 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affa:	3324      	adds	r3, #36	; 0x24
 800affc:	683a      	ldr	r2, [r7, #0]
 800affe:	4611      	mov	r1, r2
 800b000:	4618      	mov	r0, r3
 800b002:	f000 fe9b 	bl	800bd3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b006:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b008:	f000 f8e2 	bl	800b1d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b00c:	f000 fcda 	bl	800b9c4 <xTaskResumeAll>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	f47f af66 	bne.w	800aee4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800b018:	4b18      	ldr	r3, [pc, #96]	; (800b07c <xQueueSemaphoreTake+0x224>)
 800b01a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b01e:	601a      	str	r2, [r3, #0]
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	f3bf 8f6f 	isb	sy
 800b028:	e75c      	b.n	800aee4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b02a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b02c:	f000 f8d0 	bl	800b1d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b030:	f000 fcc8 	bl	800b9c4 <xTaskResumeAll>
 800b034:	e756      	b.n	800aee4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b038:	f000 f8ca 	bl	800b1d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b03c:	f000 fcc2 	bl	800b9c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b040:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b042:	f000 f917 	bl	800b274 <prvIsQueueEmpty>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	f43f af4b 	beq.w	800aee4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00d      	beq.n	800b070 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800b054:	f001 fbaa 	bl	800c7ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b058:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b05a:	f000 f811 	bl	800b080 <prvGetDisinheritPriorityAfterTimeout>
 800b05e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b066:	4618      	mov	r0, r3
 800b068:	f001 f97e 	bl	800c368 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b06c:	f001 fbd2 	bl	800c814 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b070:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b072:	4618      	mov	r0, r3
 800b074:	3738      	adds	r7, #56	; 0x38
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	e000ed04 	.word	0xe000ed04

0800b080 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d006      	beq.n	800b09e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f1c3 0307 	rsb	r3, r3, #7
 800b09a:	60fb      	str	r3, [r7, #12]
 800b09c:	e001      	b.n	800b0a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
	}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b086      	sub	sp, #24
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10d      	bne.n	800b0ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d14d      	bne.n	800b172 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f001 f8ba 	bl	800c254 <xTaskPriorityDisinherit>
 800b0e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	609a      	str	r2, [r3, #8]
 800b0e8:	e043      	b.n	800b172 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d119      	bne.n	800b124 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6858      	ldr	r0, [r3, #4]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	68b9      	ldr	r1, [r7, #8]
 800b0fc:	f001 fe4e 	bl	800cd9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	685a      	ldr	r2, [r3, #4]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b108:	441a      	add	r2, r3
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	685a      	ldr	r2, [r3, #4]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	429a      	cmp	r2, r3
 800b118:	d32b      	bcc.n	800b172 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	605a      	str	r2, [r3, #4]
 800b122:	e026      	b.n	800b172 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	68d8      	ldr	r0, [r3, #12]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12c:	461a      	mov	r2, r3
 800b12e:	68b9      	ldr	r1, [r7, #8]
 800b130:	f001 fe34 	bl	800cd9c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	68da      	ldr	r2, [r3, #12]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13c:	425b      	negs	r3, r3
 800b13e:	441a      	add	r2, r3
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	68da      	ldr	r2, [r3, #12]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d207      	bcs.n	800b160 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	689a      	ldr	r2, [r3, #8]
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b158:	425b      	negs	r3, r3
 800b15a:	441a      	add	r2, r3
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2b02      	cmp	r3, #2
 800b164:	d105      	bne.n	800b172 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	3b01      	subs	r3, #1
 800b170:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	1c5a      	adds	r2, r3, #1
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b17a:	697b      	ldr	r3, [r7, #20]
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3718      	adds	r7, #24
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b192:	2b00      	cmp	r3, #0
 800b194:	d018      	beq.n	800b1c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	68da      	ldr	r2, [r3, #12]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19e:	441a      	add	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	68da      	ldr	r2, [r3, #12]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d303      	bcc.n	800b1b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	68d9      	ldr	r1, [r3, #12]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	6838      	ldr	r0, [r7, #0]
 800b1c4:	f001 fdea 	bl	800cd9c <memcpy>
	}
}
 800b1c8:	bf00      	nop
 800b1ca:	3708      	adds	r7, #8
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b1d8:	f001 fae8 	bl	800c7ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b1e4:	e011      	b.n	800b20a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d012      	beq.n	800b214 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	3324      	adds	r3, #36	; 0x24
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f000 fdc8 	bl	800bd88 <xTaskRemoveFromEventList>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d001      	beq.n	800b202 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b1fe:	f000 fea3 	bl	800bf48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b202:	7bfb      	ldrb	r3, [r7, #15]
 800b204:	3b01      	subs	r3, #1
 800b206:	b2db      	uxtb	r3, r3
 800b208:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b20a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	dce9      	bgt.n	800b1e6 <prvUnlockQueue+0x16>
 800b212:	e000      	b.n	800b216 <prvUnlockQueue+0x46>
					break;
 800b214:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	22ff      	movs	r2, #255	; 0xff
 800b21a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b21e:	f001 faf9 	bl	800c814 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b222:	f001 fac3 	bl	800c7ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b22c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b22e:	e011      	b.n	800b254 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	691b      	ldr	r3, [r3, #16]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d012      	beq.n	800b25e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	3310      	adds	r3, #16
 800b23c:	4618      	mov	r0, r3
 800b23e:	f000 fda3 	bl	800bd88 <xTaskRemoveFromEventList>
 800b242:	4603      	mov	r3, r0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d001      	beq.n	800b24c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b248:	f000 fe7e 	bl	800bf48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b24c:	7bbb      	ldrb	r3, [r7, #14]
 800b24e:	3b01      	subs	r3, #1
 800b250:	b2db      	uxtb	r3, r3
 800b252:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b254:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	dce9      	bgt.n	800b230 <prvUnlockQueue+0x60>
 800b25c:	e000      	b.n	800b260 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b25e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	22ff      	movs	r2, #255	; 0xff
 800b264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b268:	f001 fad4 	bl	800c814 <vPortExitCritical>
}
 800b26c:	bf00      	nop
 800b26e:	3710      	adds	r7, #16
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b27c:	f001 fa96 	bl	800c7ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b284:	2b00      	cmp	r3, #0
 800b286:	d102      	bne.n	800b28e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b288:	2301      	movs	r3, #1
 800b28a:	60fb      	str	r3, [r7, #12]
 800b28c:	e001      	b.n	800b292 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b28e:	2300      	movs	r3, #0
 800b290:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b292:	f001 fabf 	bl	800c814 <vPortExitCritical>

	return xReturn;
 800b296:	68fb      	ldr	r3, [r7, #12]
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b2a8:	f001 fa80 	bl	800c7ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d102      	bne.n	800b2be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	60fb      	str	r3, [r7, #12]
 800b2bc:	e001      	b.n	800b2c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b2c2:	f001 faa7 	bl	800c814 <vPortExitCritical>

	return xReturn;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3710      	adds	r7, #16
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b08e      	sub	sp, #56	; 0x38
 800b2d4:	af04      	add	r7, sp, #16
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	607a      	str	r2, [r7, #4]
 800b2dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d10c      	bne.n	800b2fe <xTaskCreateStatic+0x2e>
	__asm volatile
 800b2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e8:	b672      	cpsid	i
 800b2ea:	f383 8811 	msr	BASEPRI, r3
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	f3bf 8f4f 	dsb	sy
 800b2f6:	b662      	cpsie	i
 800b2f8:	623b      	str	r3, [r7, #32]
}
 800b2fa:	bf00      	nop
 800b2fc:	e7fe      	b.n	800b2fc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b300:	2b00      	cmp	r3, #0
 800b302:	d10c      	bne.n	800b31e <xTaskCreateStatic+0x4e>
	__asm volatile
 800b304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b308:	b672      	cpsid	i
 800b30a:	f383 8811 	msr	BASEPRI, r3
 800b30e:	f3bf 8f6f 	isb	sy
 800b312:	f3bf 8f4f 	dsb	sy
 800b316:	b662      	cpsie	i
 800b318:	61fb      	str	r3, [r7, #28]
}
 800b31a:	bf00      	nop
 800b31c:	e7fe      	b.n	800b31c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b31e:	23b4      	movs	r3, #180	; 0xb4
 800b320:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	2bb4      	cmp	r3, #180	; 0xb4
 800b326:	d00c      	beq.n	800b342 <xTaskCreateStatic+0x72>
	__asm volatile
 800b328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32c:	b672      	cpsid	i
 800b32e:	f383 8811 	msr	BASEPRI, r3
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	f3bf 8f4f 	dsb	sy
 800b33a:	b662      	cpsie	i
 800b33c:	61bb      	str	r3, [r7, #24]
}
 800b33e:	bf00      	nop
 800b340:	e7fe      	b.n	800b340 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b342:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b346:	2b00      	cmp	r3, #0
 800b348:	d01e      	beq.n	800b388 <xTaskCreateStatic+0xb8>
 800b34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d01b      	beq.n	800b388 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b352:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b358:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35c:	2202      	movs	r2, #2
 800b35e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b362:	2300      	movs	r3, #0
 800b364:	9303      	str	r3, [sp, #12]
 800b366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b368:	9302      	str	r3, [sp, #8]
 800b36a:	f107 0314 	add.w	r3, r7, #20
 800b36e:	9301      	str	r3, [sp, #4]
 800b370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	68b9      	ldr	r1, [r7, #8]
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	f000 f850 	bl	800b420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b382:	f000 f8ed 	bl	800b560 <prvAddNewTaskToReadyList>
 800b386:	e001      	b.n	800b38c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b388:	2300      	movs	r3, #0
 800b38a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b38c:	697b      	ldr	r3, [r7, #20]
	}
 800b38e:	4618      	mov	r0, r3
 800b390:	3728      	adds	r7, #40	; 0x28
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b396:	b580      	push	{r7, lr}
 800b398:	b08c      	sub	sp, #48	; 0x30
 800b39a:	af04      	add	r7, sp, #16
 800b39c:	60f8      	str	r0, [r7, #12]
 800b39e:	60b9      	str	r1, [r7, #8]
 800b3a0:	603b      	str	r3, [r7, #0]
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b3a6:	88fb      	ldrh	r3, [r7, #6]
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f001 fae6 	bl	800c97c <pvPortMalloc>
 800b3b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00e      	beq.n	800b3d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b3b8:	20b4      	movs	r0, #180	; 0xb4
 800b3ba:	f001 fadf 	bl	800c97c <pvPortMalloc>
 800b3be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d003      	beq.n	800b3ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	697a      	ldr	r2, [r7, #20]
 800b3ca:	631a      	str	r2, [r3, #48]	; 0x30
 800b3cc:	e005      	b.n	800b3da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b3ce:	6978      	ldr	r0, [r7, #20]
 800b3d0:	f001 fb9e 	bl	800cb10 <vPortFree>
 800b3d4:	e001      	b.n	800b3da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d017      	beq.n	800b410 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3e8:	88fa      	ldrh	r2, [r7, #6]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	9303      	str	r3, [sp, #12]
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	9302      	str	r3, [sp, #8]
 800b3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f4:	9301      	str	r3, [sp, #4]
 800b3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f8:	9300      	str	r3, [sp, #0]
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	68b9      	ldr	r1, [r7, #8]
 800b3fe:	68f8      	ldr	r0, [r7, #12]
 800b400:	f000 f80e 	bl	800b420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b404:	69f8      	ldr	r0, [r7, #28]
 800b406:	f000 f8ab 	bl	800b560 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b40a:	2301      	movs	r3, #1
 800b40c:	61bb      	str	r3, [r7, #24]
 800b40e:	e002      	b.n	800b416 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b410:	f04f 33ff 	mov.w	r3, #4294967295
 800b414:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b416:	69bb      	ldr	r3, [r7, #24]
	}
 800b418:	4618      	mov	r0, r3
 800b41a:	3720      	adds	r7, #32
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b088      	sub	sp, #32
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
 800b42c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b432:	6879      	ldr	r1, [r7, #4]
 800b434:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b438:	440b      	add	r3, r1
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4413      	add	r3, r2
 800b43e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	f023 0307 	bic.w	r3, r3, #7
 800b446:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	f003 0307 	and.w	r3, r3, #7
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00c      	beq.n	800b46c <prvInitialiseNewTask+0x4c>
	__asm volatile
 800b452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b456:	b672      	cpsid	i
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	b662      	cpsie	i
 800b466:	617b      	str	r3, [r7, #20]
}
 800b468:	bf00      	nop
 800b46a:	e7fe      	b.n	800b46a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d01f      	beq.n	800b4b2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b472:	2300      	movs	r3, #0
 800b474:	61fb      	str	r3, [r7, #28]
 800b476:	e012      	b.n	800b49e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b478:	68ba      	ldr	r2, [r7, #8]
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	4413      	add	r3, r2
 800b47e:	7819      	ldrb	r1, [r3, #0]
 800b480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	4413      	add	r3, r2
 800b486:	3334      	adds	r3, #52	; 0x34
 800b488:	460a      	mov	r2, r1
 800b48a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b48c:	68ba      	ldr	r2, [r7, #8]
 800b48e:	69fb      	ldr	r3, [r7, #28]
 800b490:	4413      	add	r3, r2
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d006      	beq.n	800b4a6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	3301      	adds	r3, #1
 800b49c:	61fb      	str	r3, [r7, #28]
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	2b0f      	cmp	r3, #15
 800b4a2:	d9e9      	bls.n	800b478 <prvInitialiseNewTask+0x58>
 800b4a4:	e000      	b.n	800b4a8 <prvInitialiseNewTask+0x88>
			{
				break;
 800b4a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b4b0:	e003      	b.n	800b4ba <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4bc:	2b06      	cmp	r3, #6
 800b4be:	d901      	bls.n	800b4c4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b4c0:	2306      	movs	r3, #6
 800b4c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d8:	3304      	adds	r3, #4
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7ff f8a1 	bl	800a622 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e2:	3318      	adds	r3, #24
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7ff f89c 	bl	800a622 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f2:	f1c3 0207 	rsb	r2, r3, #7
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b502:	2200      	movs	r2, #0
 800b504:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50a:	2200      	movs	r2, #0
 800b50c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b512:	334c      	adds	r3, #76	; 0x4c
 800b514:	2260      	movs	r2, #96	; 0x60
 800b516:	2100      	movs	r1, #0
 800b518:	4618      	mov	r0, r3
 800b51a:	f001 fc4d 	bl	800cdb8 <memset>
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	4a0c      	ldr	r2, [pc, #48]	; (800b554 <prvInitialiseNewTask+0x134>)
 800b522:	651a      	str	r2, [r3, #80]	; 0x50
 800b524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b526:	4a0c      	ldr	r2, [pc, #48]	; (800b558 <prvInitialiseNewTask+0x138>)
 800b528:	655a      	str	r2, [r3, #84]	; 0x54
 800b52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52c:	4a0b      	ldr	r2, [pc, #44]	; (800b55c <prvInitialiseNewTask+0x13c>)
 800b52e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	68f9      	ldr	r1, [r7, #12]
 800b534:	69b8      	ldr	r0, [r7, #24]
 800b536:	f001 f82f 	bl	800c598 <pxPortInitialiseStack>
 800b53a:	4602      	mov	r2, r0
 800b53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b542:	2b00      	cmp	r3, #0
 800b544:	d002      	beq.n	800b54c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b54a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b54c:	bf00      	nop
 800b54e:	3720      	adds	r7, #32
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	080123c0 	.word	0x080123c0
 800b558:	080123e0 	.word	0x080123e0
 800b55c:	080123a0 	.word	0x080123a0

0800b560 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b568:	f001 f920 	bl	800c7ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b56c:	4b2a      	ldr	r3, [pc, #168]	; (800b618 <prvAddNewTaskToReadyList+0xb8>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	3301      	adds	r3, #1
 800b572:	4a29      	ldr	r2, [pc, #164]	; (800b618 <prvAddNewTaskToReadyList+0xb8>)
 800b574:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b576:	4b29      	ldr	r3, [pc, #164]	; (800b61c <prvAddNewTaskToReadyList+0xbc>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d109      	bne.n	800b592 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b57e:	4a27      	ldr	r2, [pc, #156]	; (800b61c <prvAddNewTaskToReadyList+0xbc>)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b584:	4b24      	ldr	r3, [pc, #144]	; (800b618 <prvAddNewTaskToReadyList+0xb8>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d110      	bne.n	800b5ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b58c:	f000 fd00 	bl	800bf90 <prvInitialiseTaskLists>
 800b590:	e00d      	b.n	800b5ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b592:	4b23      	ldr	r3, [pc, #140]	; (800b620 <prvAddNewTaskToReadyList+0xc0>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d109      	bne.n	800b5ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b59a:	4b20      	ldr	r3, [pc, #128]	; (800b61c <prvAddNewTaskToReadyList+0xbc>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d802      	bhi.n	800b5ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b5a8:	4a1c      	ldr	r2, [pc, #112]	; (800b61c <prvAddNewTaskToReadyList+0xbc>)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b5ae:	4b1d      	ldr	r3, [pc, #116]	; (800b624 <prvAddNewTaskToReadyList+0xc4>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	4a1b      	ldr	r2, [pc, #108]	; (800b624 <prvAddNewTaskToReadyList+0xc4>)
 800b5b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5bc:	2201      	movs	r2, #1
 800b5be:	409a      	lsls	r2, r3
 800b5c0:	4b19      	ldr	r3, [pc, #100]	; (800b628 <prvAddNewTaskToReadyList+0xc8>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	4a18      	ldr	r2, [pc, #96]	; (800b628 <prvAddNewTaskToReadyList+0xc8>)
 800b5c8:	6013      	str	r3, [r2, #0]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4413      	add	r3, r2
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	4a15      	ldr	r2, [pc, #84]	; (800b62c <prvAddNewTaskToReadyList+0xcc>)
 800b5d8:	441a      	add	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	3304      	adds	r3, #4
 800b5de:	4619      	mov	r1, r3
 800b5e0:	4610      	mov	r0, r2
 800b5e2:	f7ff f82b 	bl	800a63c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b5e6:	f001 f915 	bl	800c814 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b5ea:	4b0d      	ldr	r3, [pc, #52]	; (800b620 <prvAddNewTaskToReadyList+0xc0>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d00e      	beq.n	800b610 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b5f2:	4b0a      	ldr	r3, [pc, #40]	; (800b61c <prvAddNewTaskToReadyList+0xbc>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d207      	bcs.n	800b610 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b600:	4b0b      	ldr	r3, [pc, #44]	; (800b630 <prvAddNewTaskToReadyList+0xd0>)
 800b602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b606:	601a      	str	r2, [r3, #0]
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b610:	bf00      	nop
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	20000d94 	.word	0x20000d94
 800b61c:	20000c94 	.word	0x20000c94
 800b620:	20000da0 	.word	0x20000da0
 800b624:	20000db0 	.word	0x20000db0
 800b628:	20000d9c 	.word	0x20000d9c
 800b62c:	20000c98 	.word	0x20000c98
 800b630:	e000ed04 	.word	0xe000ed04

0800b634 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b63c:	f001 f8b6 	bl	800c7ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d102      	bne.n	800b64c <vTaskDelete+0x18>
 800b646:	4b3a      	ldr	r3, [pc, #232]	; (800b730 <vTaskDelete+0xfc>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	e000      	b.n	800b64e <vTaskDelete+0x1a>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	3304      	adds	r3, #4
 800b654:	4618      	mov	r0, r3
 800b656:	f7ff f84e 	bl	800a6f6 <uxListRemove>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d115      	bne.n	800b68c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b664:	4933      	ldr	r1, [pc, #204]	; (800b734 <vTaskDelete+0x100>)
 800b666:	4613      	mov	r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	4413      	add	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	440b      	add	r3, r1
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d10a      	bne.n	800b68c <vTaskDelete+0x58>
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b67a:	2201      	movs	r2, #1
 800b67c:	fa02 f303 	lsl.w	r3, r2, r3
 800b680:	43da      	mvns	r2, r3
 800b682:	4b2d      	ldr	r3, [pc, #180]	; (800b738 <vTaskDelete+0x104>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4013      	ands	r3, r2
 800b688:	4a2b      	ldr	r2, [pc, #172]	; (800b738 <vTaskDelete+0x104>)
 800b68a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b690:	2b00      	cmp	r3, #0
 800b692:	d004      	beq.n	800b69e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	3318      	adds	r3, #24
 800b698:	4618      	mov	r0, r3
 800b69a:	f7ff f82c 	bl	800a6f6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b69e:	4b27      	ldr	r3, [pc, #156]	; (800b73c <vTaskDelete+0x108>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	4a25      	ldr	r2, [pc, #148]	; (800b73c <vTaskDelete+0x108>)
 800b6a6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b6a8:	4b21      	ldr	r3, [pc, #132]	; (800b730 <vTaskDelete+0xfc>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d10b      	bne.n	800b6ca <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	3304      	adds	r3, #4
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	4821      	ldr	r0, [pc, #132]	; (800b740 <vTaskDelete+0x10c>)
 800b6ba:	f7fe ffbf 	bl	800a63c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b6be:	4b21      	ldr	r3, [pc, #132]	; (800b744 <vTaskDelete+0x110>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	4a1f      	ldr	r2, [pc, #124]	; (800b744 <vTaskDelete+0x110>)
 800b6c6:	6013      	str	r3, [r2, #0]
 800b6c8:	e009      	b.n	800b6de <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b6ca:	4b1f      	ldr	r3, [pc, #124]	; (800b748 <vTaskDelete+0x114>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	4a1d      	ldr	r2, [pc, #116]	; (800b748 <vTaskDelete+0x114>)
 800b6d2:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f000 fcc9 	bl	800c06c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b6da:	f000 fcfd 	bl	800c0d8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800b6de:	f001 f899 	bl	800c814 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b6e2:	4b1a      	ldr	r3, [pc, #104]	; (800b74c <vTaskDelete+0x118>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d01d      	beq.n	800b726 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800b6ea:	4b11      	ldr	r3, [pc, #68]	; (800b730 <vTaskDelete+0xfc>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	68fa      	ldr	r2, [r7, #12]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d118      	bne.n	800b726 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b6f4:	4b16      	ldr	r3, [pc, #88]	; (800b750 <vTaskDelete+0x11c>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d00c      	beq.n	800b716 <vTaskDelete+0xe2>
	__asm volatile
 800b6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b700:	b672      	cpsid	i
 800b702:	f383 8811 	msr	BASEPRI, r3
 800b706:	f3bf 8f6f 	isb	sy
 800b70a:	f3bf 8f4f 	dsb	sy
 800b70e:	b662      	cpsie	i
 800b710:	60bb      	str	r3, [r7, #8]
}
 800b712:	bf00      	nop
 800b714:	e7fe      	b.n	800b714 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800b716:	4b0f      	ldr	r3, [pc, #60]	; (800b754 <vTaskDelete+0x120>)
 800b718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b71c:	601a      	str	r2, [r3, #0]
 800b71e:	f3bf 8f4f 	dsb	sy
 800b722:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b726:	bf00      	nop
 800b728:	3710      	adds	r7, #16
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	20000c94 	.word	0x20000c94
 800b734:	20000c98 	.word	0x20000c98
 800b738:	20000d9c 	.word	0x20000d9c
 800b73c:	20000db0 	.word	0x20000db0
 800b740:	20000d68 	.word	0x20000d68
 800b744:	20000d7c 	.word	0x20000d7c
 800b748:	20000d94 	.word	0x20000d94
 800b74c:	20000da0 	.word	0x20000da0
 800b750:	20000dbc 	.word	0x20000dbc
 800b754:	e000ed04 	.word	0xe000ed04

0800b758 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b08a      	sub	sp, #40	; 0x28
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b762:	2300      	movs	r3, #0
 800b764:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d10c      	bne.n	800b786 <vTaskDelayUntil+0x2e>
	__asm volatile
 800b76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b770:	b672      	cpsid	i
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	b662      	cpsie	i
 800b780:	617b      	str	r3, [r7, #20]
}
 800b782:	bf00      	nop
 800b784:	e7fe      	b.n	800b784 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d10c      	bne.n	800b7a6 <vTaskDelayUntil+0x4e>
	__asm volatile
 800b78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b790:	b672      	cpsid	i
 800b792:	f383 8811 	msr	BASEPRI, r3
 800b796:	f3bf 8f6f 	isb	sy
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	b662      	cpsie	i
 800b7a0:	613b      	str	r3, [r7, #16]
}
 800b7a2:	bf00      	nop
 800b7a4:	e7fe      	b.n	800b7a4 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800b7a6:	4b2b      	ldr	r3, [pc, #172]	; (800b854 <vTaskDelayUntil+0xfc>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d00c      	beq.n	800b7c8 <vTaskDelayUntil+0x70>
	__asm volatile
 800b7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b2:	b672      	cpsid	i
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	b662      	cpsie	i
 800b7c2:	60fb      	str	r3, [r7, #12]
}
 800b7c4:	bf00      	nop
 800b7c6:	e7fe      	b.n	800b7c6 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800b7c8:	f000 f8ee 	bl	800b9a8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b7cc:	4b22      	ldr	r3, [pc, #136]	; (800b858 <vTaskDelayUntil+0x100>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	683a      	ldr	r2, [r7, #0]
 800b7d8:	4413      	add	r3, r2
 800b7da:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	6a3a      	ldr	r2, [r7, #32]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d20b      	bcs.n	800b7fe <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	69fa      	ldr	r2, [r7, #28]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d211      	bcs.n	800b814 <vTaskDelayUntil+0xbc>
 800b7f0:	69fa      	ldr	r2, [r7, #28]
 800b7f2:	6a3b      	ldr	r3, [r7, #32]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d90d      	bls.n	800b814 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	627b      	str	r3, [r7, #36]	; 0x24
 800b7fc:	e00a      	b.n	800b814 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	69fa      	ldr	r2, [r7, #28]
 800b804:	429a      	cmp	r2, r3
 800b806:	d303      	bcc.n	800b810 <vTaskDelayUntil+0xb8>
 800b808:	69fa      	ldr	r2, [r7, #28]
 800b80a:	6a3b      	ldr	r3, [r7, #32]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d901      	bls.n	800b814 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800b810:	2301      	movs	r3, #1
 800b812:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	69fa      	ldr	r2, [r7, #28]
 800b818:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d006      	beq.n	800b82e <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b820:	69fa      	ldr	r2, [r7, #28]
 800b822:	6a3b      	ldr	r3, [r7, #32]
 800b824:	1ad3      	subs	r3, r2, r3
 800b826:	2100      	movs	r1, #0
 800b828:	4618      	mov	r0, r3
 800b82a:	f000 fe4f 	bl	800c4cc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b82e:	f000 f8c9 	bl	800b9c4 <xTaskResumeAll>
 800b832:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d107      	bne.n	800b84a <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800b83a:	4b08      	ldr	r3, [pc, #32]	; (800b85c <vTaskDelayUntil+0x104>)
 800b83c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b840:	601a      	str	r2, [r3, #0]
 800b842:	f3bf 8f4f 	dsb	sy
 800b846:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b84a:	bf00      	nop
 800b84c:	3728      	adds	r7, #40	; 0x28
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	20000dbc 	.word	0x20000dbc
 800b858:	20000d98 	.word	0x20000d98
 800b85c:	e000ed04 	.word	0xe000ed04

0800b860 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b868:	2300      	movs	r3, #0
 800b86a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d019      	beq.n	800b8a6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b872:	4b14      	ldr	r3, [pc, #80]	; (800b8c4 <vTaskDelay+0x64>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00c      	beq.n	800b894 <vTaskDelay+0x34>
	__asm volatile
 800b87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87e:	b672      	cpsid	i
 800b880:	f383 8811 	msr	BASEPRI, r3
 800b884:	f3bf 8f6f 	isb	sy
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	b662      	cpsie	i
 800b88e:	60bb      	str	r3, [r7, #8]
}
 800b890:	bf00      	nop
 800b892:	e7fe      	b.n	800b892 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b894:	f000 f888 	bl	800b9a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b898:	2100      	movs	r1, #0
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 fe16 	bl	800c4cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b8a0:	f000 f890 	bl	800b9c4 <xTaskResumeAll>
 800b8a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d107      	bne.n	800b8bc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800b8ac:	4b06      	ldr	r3, [pc, #24]	; (800b8c8 <vTaskDelay+0x68>)
 800b8ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8b2:	601a      	str	r2, [r3, #0]
 800b8b4:	f3bf 8f4f 	dsb	sy
 800b8b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8bc:	bf00      	nop
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	20000dbc 	.word	0x20000dbc
 800b8c8:	e000ed04 	.word	0xe000ed04

0800b8cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b08a      	sub	sp, #40	; 0x28
 800b8d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b8da:	463a      	mov	r2, r7
 800b8dc:	1d39      	adds	r1, r7, #4
 800b8de:	f107 0308 	add.w	r3, r7, #8
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7f4 fe66 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	68ba      	ldr	r2, [r7, #8]
 800b8ee:	9202      	str	r2, [sp, #8]
 800b8f0:	9301      	str	r3, [sp, #4]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	9300      	str	r3, [sp, #0]
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	460a      	mov	r2, r1
 800b8fa:	4923      	ldr	r1, [pc, #140]	; (800b988 <vTaskStartScheduler+0xbc>)
 800b8fc:	4823      	ldr	r0, [pc, #140]	; (800b98c <vTaskStartScheduler+0xc0>)
 800b8fe:	f7ff fce7 	bl	800b2d0 <xTaskCreateStatic>
 800b902:	4603      	mov	r3, r0
 800b904:	4a22      	ldr	r2, [pc, #136]	; (800b990 <vTaskStartScheduler+0xc4>)
 800b906:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b908:	4b21      	ldr	r3, [pc, #132]	; (800b990 <vTaskStartScheduler+0xc4>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d002      	beq.n	800b916 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b910:	2301      	movs	r3, #1
 800b912:	617b      	str	r3, [r7, #20]
 800b914:	e001      	b.n	800b91a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b916:	2300      	movs	r3, #0
 800b918:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d11d      	bne.n	800b95c <vTaskStartScheduler+0x90>
	__asm volatile
 800b920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b924:	b672      	cpsid	i
 800b926:	f383 8811 	msr	BASEPRI, r3
 800b92a:	f3bf 8f6f 	isb	sy
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	b662      	cpsie	i
 800b934:	613b      	str	r3, [r7, #16]
}
 800b936:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b938:	4b16      	ldr	r3, [pc, #88]	; (800b994 <vTaskStartScheduler+0xc8>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	334c      	adds	r3, #76	; 0x4c
 800b93e:	4a16      	ldr	r2, [pc, #88]	; (800b998 <vTaskStartScheduler+0xcc>)
 800b940:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b942:	4b16      	ldr	r3, [pc, #88]	; (800b99c <vTaskStartScheduler+0xd0>)
 800b944:	f04f 32ff 	mov.w	r2, #4294967295
 800b948:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b94a:	4b15      	ldr	r3, [pc, #84]	; (800b9a0 <vTaskStartScheduler+0xd4>)
 800b94c:	2201      	movs	r2, #1
 800b94e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b950:	4b14      	ldr	r3, [pc, #80]	; (800b9a4 <vTaskStartScheduler+0xd8>)
 800b952:	2200      	movs	r2, #0
 800b954:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b956:	f000 feab 	bl	800c6b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b95a:	e010      	b.n	800b97e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b962:	d10c      	bne.n	800b97e <vTaskStartScheduler+0xb2>
	__asm volatile
 800b964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b968:	b672      	cpsid	i
 800b96a:	f383 8811 	msr	BASEPRI, r3
 800b96e:	f3bf 8f6f 	isb	sy
 800b972:	f3bf 8f4f 	dsb	sy
 800b976:	b662      	cpsie	i
 800b978:	60fb      	str	r3, [r7, #12]
}
 800b97a:	bf00      	nop
 800b97c:	e7fe      	b.n	800b97c <vTaskStartScheduler+0xb0>
}
 800b97e:	bf00      	nop
 800b980:	3718      	adds	r7, #24
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	0800d884 	.word	0x0800d884
 800b98c:	0800bf61 	.word	0x0800bf61
 800b990:	20000db8 	.word	0x20000db8
 800b994:	20000c94 	.word	0x20000c94
 800b998:	2000004c 	.word	0x2000004c
 800b99c:	20000db4 	.word	0x20000db4
 800b9a0:	20000da0 	.word	0x20000da0
 800b9a4:	20000d98 	.word	0x20000d98

0800b9a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b9ac:	4b04      	ldr	r3, [pc, #16]	; (800b9c0 <vTaskSuspendAll+0x18>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	4a03      	ldr	r2, [pc, #12]	; (800b9c0 <vTaskSuspendAll+0x18>)
 800b9b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b9b6:	bf00      	nop
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr
 800b9c0:	20000dbc 	.word	0x20000dbc

0800b9c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b9d2:	4b42      	ldr	r3, [pc, #264]	; (800badc <xTaskResumeAll+0x118>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10c      	bne.n	800b9f4 <xTaskResumeAll+0x30>
	__asm volatile
 800b9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9de:	b672      	cpsid	i
 800b9e0:	f383 8811 	msr	BASEPRI, r3
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	b662      	cpsie	i
 800b9ee:	603b      	str	r3, [r7, #0]
}
 800b9f0:	bf00      	nop
 800b9f2:	e7fe      	b.n	800b9f2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b9f4:	f000 feda 	bl	800c7ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b9f8:	4b38      	ldr	r3, [pc, #224]	; (800badc <xTaskResumeAll+0x118>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	4a37      	ldr	r2, [pc, #220]	; (800badc <xTaskResumeAll+0x118>)
 800ba00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba02:	4b36      	ldr	r3, [pc, #216]	; (800badc <xTaskResumeAll+0x118>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d161      	bne.n	800bace <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba0a:	4b35      	ldr	r3, [pc, #212]	; (800bae0 <xTaskResumeAll+0x11c>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d05d      	beq.n	800bace <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba12:	e02e      	b.n	800ba72 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba14:	4b33      	ldr	r3, [pc, #204]	; (800bae4 <xTaskResumeAll+0x120>)
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	3318      	adds	r3, #24
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7fe fe68 	bl	800a6f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	3304      	adds	r3, #4
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7fe fe63 	bl	800a6f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba34:	2201      	movs	r2, #1
 800ba36:	409a      	lsls	r2, r3
 800ba38:	4b2b      	ldr	r3, [pc, #172]	; (800bae8 <xTaskResumeAll+0x124>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	4a2a      	ldr	r2, [pc, #168]	; (800bae8 <xTaskResumeAll+0x124>)
 800ba40:	6013      	str	r3, [r2, #0]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba46:	4613      	mov	r3, r2
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	4413      	add	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	4a27      	ldr	r2, [pc, #156]	; (800baec <xTaskResumeAll+0x128>)
 800ba50:	441a      	add	r2, r3
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	3304      	adds	r3, #4
 800ba56:	4619      	mov	r1, r3
 800ba58:	4610      	mov	r0, r2
 800ba5a:	f7fe fdef 	bl	800a63c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba62:	4b23      	ldr	r3, [pc, #140]	; (800baf0 <xTaskResumeAll+0x12c>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d302      	bcc.n	800ba72 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ba6c:	4b21      	ldr	r3, [pc, #132]	; (800baf4 <xTaskResumeAll+0x130>)
 800ba6e:	2201      	movs	r2, #1
 800ba70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba72:	4b1c      	ldr	r3, [pc, #112]	; (800bae4 <xTaskResumeAll+0x120>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d1cc      	bne.n	800ba14 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d001      	beq.n	800ba84 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba80:	f000 fb2a 	bl	800c0d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ba84:	4b1c      	ldr	r3, [pc, #112]	; (800baf8 <xTaskResumeAll+0x134>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d010      	beq.n	800bab2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba90:	f000 f836 	bl	800bb00 <xTaskIncrementTick>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d002      	beq.n	800baa0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ba9a:	4b16      	ldr	r3, [pc, #88]	; (800baf4 <xTaskResumeAll+0x130>)
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	3b01      	subs	r3, #1
 800baa4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d1f1      	bne.n	800ba90 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800baac:	4b12      	ldr	r3, [pc, #72]	; (800baf8 <xTaskResumeAll+0x134>)
 800baae:	2200      	movs	r2, #0
 800bab0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bab2:	4b10      	ldr	r3, [pc, #64]	; (800baf4 <xTaskResumeAll+0x130>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d009      	beq.n	800bace <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800baba:	2301      	movs	r3, #1
 800babc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800babe:	4b0f      	ldr	r3, [pc, #60]	; (800bafc <xTaskResumeAll+0x138>)
 800bac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bac4:	601a      	str	r2, [r3, #0]
 800bac6:	f3bf 8f4f 	dsb	sy
 800baca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bace:	f000 fea1 	bl	800c814 <vPortExitCritical>

	return xAlreadyYielded;
 800bad2:	68bb      	ldr	r3, [r7, #8]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3710      	adds	r7, #16
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	20000dbc 	.word	0x20000dbc
 800bae0:	20000d94 	.word	0x20000d94
 800bae4:	20000d54 	.word	0x20000d54
 800bae8:	20000d9c 	.word	0x20000d9c
 800baec:	20000c98 	.word	0x20000c98
 800baf0:	20000c94 	.word	0x20000c94
 800baf4:	20000da8 	.word	0x20000da8
 800baf8:	20000da4 	.word	0x20000da4
 800bafc:	e000ed04 	.word	0xe000ed04

0800bb00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b086      	sub	sp, #24
 800bb04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb06:	2300      	movs	r3, #0
 800bb08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb0a:	4b4f      	ldr	r3, [pc, #316]	; (800bc48 <xTaskIncrementTick+0x148>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	f040 808a 	bne.w	800bc28 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb14:	4b4d      	ldr	r3, [pc, #308]	; (800bc4c <xTaskIncrementTick+0x14c>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	3301      	adds	r3, #1
 800bb1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb1c:	4a4b      	ldr	r2, [pc, #300]	; (800bc4c <xTaskIncrementTick+0x14c>)
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d122      	bne.n	800bb6e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb28:	4b49      	ldr	r3, [pc, #292]	; (800bc50 <xTaskIncrementTick+0x150>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d00c      	beq.n	800bb4c <xTaskIncrementTick+0x4c>
	__asm volatile
 800bb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb36:	b672      	cpsid	i
 800bb38:	f383 8811 	msr	BASEPRI, r3
 800bb3c:	f3bf 8f6f 	isb	sy
 800bb40:	f3bf 8f4f 	dsb	sy
 800bb44:	b662      	cpsie	i
 800bb46:	603b      	str	r3, [r7, #0]
}
 800bb48:	bf00      	nop
 800bb4a:	e7fe      	b.n	800bb4a <xTaskIncrementTick+0x4a>
 800bb4c:	4b40      	ldr	r3, [pc, #256]	; (800bc50 <xTaskIncrementTick+0x150>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	60fb      	str	r3, [r7, #12]
 800bb52:	4b40      	ldr	r3, [pc, #256]	; (800bc54 <xTaskIncrementTick+0x154>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a3e      	ldr	r2, [pc, #248]	; (800bc50 <xTaskIncrementTick+0x150>)
 800bb58:	6013      	str	r3, [r2, #0]
 800bb5a:	4a3e      	ldr	r2, [pc, #248]	; (800bc54 <xTaskIncrementTick+0x154>)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	6013      	str	r3, [r2, #0]
 800bb60:	4b3d      	ldr	r3, [pc, #244]	; (800bc58 <xTaskIncrementTick+0x158>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	3301      	adds	r3, #1
 800bb66:	4a3c      	ldr	r2, [pc, #240]	; (800bc58 <xTaskIncrementTick+0x158>)
 800bb68:	6013      	str	r3, [r2, #0]
 800bb6a:	f000 fab5 	bl	800c0d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb6e:	4b3b      	ldr	r3, [pc, #236]	; (800bc5c <xTaskIncrementTick+0x15c>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	693a      	ldr	r2, [r7, #16]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d348      	bcc.n	800bc0a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb78:	4b35      	ldr	r3, [pc, #212]	; (800bc50 <xTaskIncrementTick+0x150>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d104      	bne.n	800bb8c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb82:	4b36      	ldr	r3, [pc, #216]	; (800bc5c <xTaskIncrementTick+0x15c>)
 800bb84:	f04f 32ff 	mov.w	r2, #4294967295
 800bb88:	601a      	str	r2, [r3, #0]
					break;
 800bb8a:	e03e      	b.n	800bc0a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb8c:	4b30      	ldr	r3, [pc, #192]	; (800bc50 <xTaskIncrementTick+0x150>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb9c:	693a      	ldr	r2, [r7, #16]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d203      	bcs.n	800bbac <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bba4:	4a2d      	ldr	r2, [pc, #180]	; (800bc5c <xTaskIncrementTick+0x15c>)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bbaa:	e02e      	b.n	800bc0a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	3304      	adds	r3, #4
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7fe fda0 	bl	800a6f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d004      	beq.n	800bbc8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	3318      	adds	r3, #24
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7fe fd97 	bl	800a6f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbcc:	2201      	movs	r2, #1
 800bbce:	409a      	lsls	r2, r3
 800bbd0:	4b23      	ldr	r3, [pc, #140]	; (800bc60 <xTaskIncrementTick+0x160>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	4a22      	ldr	r2, [pc, #136]	; (800bc60 <xTaskIncrementTick+0x160>)
 800bbd8:	6013      	str	r3, [r2, #0]
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbde:	4613      	mov	r3, r2
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4413      	add	r3, r2
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	4a1f      	ldr	r2, [pc, #124]	; (800bc64 <xTaskIncrementTick+0x164>)
 800bbe8:	441a      	add	r2, r3
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	3304      	adds	r3, #4
 800bbee:	4619      	mov	r1, r3
 800bbf0:	4610      	mov	r0, r2
 800bbf2:	f7fe fd23 	bl	800a63c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbfa:	4b1b      	ldr	r3, [pc, #108]	; (800bc68 <xTaskIncrementTick+0x168>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d3b9      	bcc.n	800bb78 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800bc04:	2301      	movs	r3, #1
 800bc06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc08:	e7b6      	b.n	800bb78 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc0a:	4b17      	ldr	r3, [pc, #92]	; (800bc68 <xTaskIncrementTick+0x168>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc10:	4914      	ldr	r1, [pc, #80]	; (800bc64 <xTaskIncrementTick+0x164>)
 800bc12:	4613      	mov	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4413      	add	r3, r2
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	440b      	add	r3, r1
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d907      	bls.n	800bc32 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800bc22:	2301      	movs	r3, #1
 800bc24:	617b      	str	r3, [r7, #20]
 800bc26:	e004      	b.n	800bc32 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bc28:	4b10      	ldr	r3, [pc, #64]	; (800bc6c <xTaskIncrementTick+0x16c>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	4a0f      	ldr	r2, [pc, #60]	; (800bc6c <xTaskIncrementTick+0x16c>)
 800bc30:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bc32:	4b0f      	ldr	r3, [pc, #60]	; (800bc70 <xTaskIncrementTick+0x170>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d001      	beq.n	800bc3e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bc3e:	697b      	ldr	r3, [r7, #20]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3718      	adds	r7, #24
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	20000dbc 	.word	0x20000dbc
 800bc4c:	20000d98 	.word	0x20000d98
 800bc50:	20000d4c 	.word	0x20000d4c
 800bc54:	20000d50 	.word	0x20000d50
 800bc58:	20000dac 	.word	0x20000dac
 800bc5c:	20000db4 	.word	0x20000db4
 800bc60:	20000d9c 	.word	0x20000d9c
 800bc64:	20000c98 	.word	0x20000c98
 800bc68:	20000c94 	.word	0x20000c94
 800bc6c:	20000da4 	.word	0x20000da4
 800bc70:	20000da8 	.word	0x20000da8

0800bc74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc74:	b480      	push	{r7}
 800bc76:	b087      	sub	sp, #28
 800bc78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc7a:	4b2a      	ldr	r3, [pc, #168]	; (800bd24 <vTaskSwitchContext+0xb0>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d003      	beq.n	800bc8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc82:	4b29      	ldr	r3, [pc, #164]	; (800bd28 <vTaskSwitchContext+0xb4>)
 800bc84:	2201      	movs	r2, #1
 800bc86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc88:	e046      	b.n	800bd18 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bc8a:	4b27      	ldr	r3, [pc, #156]	; (800bd28 <vTaskSwitchContext+0xb4>)
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc90:	4b26      	ldr	r3, [pc, #152]	; (800bd2c <vTaskSwitchContext+0xb8>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	fab3 f383 	clz	r3, r3
 800bc9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bc9e:	7afb      	ldrb	r3, [r7, #11]
 800bca0:	f1c3 031f 	rsb	r3, r3, #31
 800bca4:	617b      	str	r3, [r7, #20]
 800bca6:	4922      	ldr	r1, [pc, #136]	; (800bd30 <vTaskSwitchContext+0xbc>)
 800bca8:	697a      	ldr	r2, [r7, #20]
 800bcaa:	4613      	mov	r3, r2
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	4413      	add	r3, r2
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	440b      	add	r3, r1
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d10c      	bne.n	800bcd4 <vTaskSwitchContext+0x60>
	__asm volatile
 800bcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcbe:	b672      	cpsid	i
 800bcc0:	f383 8811 	msr	BASEPRI, r3
 800bcc4:	f3bf 8f6f 	isb	sy
 800bcc8:	f3bf 8f4f 	dsb	sy
 800bccc:	b662      	cpsie	i
 800bcce:	607b      	str	r3, [r7, #4]
}
 800bcd0:	bf00      	nop
 800bcd2:	e7fe      	b.n	800bcd2 <vTaskSwitchContext+0x5e>
 800bcd4:	697a      	ldr	r2, [r7, #20]
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	4413      	add	r3, r2
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	4a14      	ldr	r2, [pc, #80]	; (800bd30 <vTaskSwitchContext+0xbc>)
 800bce0:	4413      	add	r3, r2
 800bce2:	613b      	str	r3, [r7, #16]
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	685a      	ldr	r2, [r3, #4]
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	605a      	str	r2, [r3, #4]
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	685a      	ldr	r2, [r3, #4]
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	3308      	adds	r3, #8
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d104      	bne.n	800bd04 <vTaskSwitchContext+0x90>
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	685a      	ldr	r2, [r3, #4]
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	605a      	str	r2, [r3, #4]
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	4a0a      	ldr	r2, [pc, #40]	; (800bd34 <vTaskSwitchContext+0xc0>)
 800bd0c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd0e:	4b09      	ldr	r3, [pc, #36]	; (800bd34 <vTaskSwitchContext+0xc0>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	334c      	adds	r3, #76	; 0x4c
 800bd14:	4a08      	ldr	r2, [pc, #32]	; (800bd38 <vTaskSwitchContext+0xc4>)
 800bd16:	6013      	str	r3, [r2, #0]
}
 800bd18:	bf00      	nop
 800bd1a:	371c      	adds	r7, #28
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr
 800bd24:	20000dbc 	.word	0x20000dbc
 800bd28:	20000da8 	.word	0x20000da8
 800bd2c:	20000d9c 	.word	0x20000d9c
 800bd30:	20000c98 	.word	0x20000c98
 800bd34:	20000c94 	.word	0x20000c94
 800bd38:	2000004c 	.word	0x2000004c

0800bd3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10c      	bne.n	800bd66 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800bd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd50:	b672      	cpsid	i
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	b662      	cpsie	i
 800bd60:	60fb      	str	r3, [r7, #12]
}
 800bd62:	bf00      	nop
 800bd64:	e7fe      	b.n	800bd64 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd66:	4b07      	ldr	r3, [pc, #28]	; (800bd84 <vTaskPlaceOnEventList+0x48>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	3318      	adds	r3, #24
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f7fe fc88 	bl	800a684 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd74:	2101      	movs	r1, #1
 800bd76:	6838      	ldr	r0, [r7, #0]
 800bd78:	f000 fba8 	bl	800c4cc <prvAddCurrentTaskToDelayedList>
}
 800bd7c:	bf00      	nop
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	20000c94 	.word	0x20000c94

0800bd88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b086      	sub	sp, #24
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d10c      	bne.n	800bdb8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800bd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda2:	b672      	cpsid	i
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	b662      	cpsie	i
 800bdb2:	60fb      	str	r3, [r7, #12]
}
 800bdb4:	bf00      	nop
 800bdb6:	e7fe      	b.n	800bdb6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	3318      	adds	r3, #24
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7fe fc9a 	bl	800a6f6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdc2:	4b1d      	ldr	r3, [pc, #116]	; (800be38 <xTaskRemoveFromEventList+0xb0>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d11c      	bne.n	800be04 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	3304      	adds	r3, #4
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7fe fc91 	bl	800a6f6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd8:	2201      	movs	r2, #1
 800bdda:	409a      	lsls	r2, r3
 800bddc:	4b17      	ldr	r3, [pc, #92]	; (800be3c <xTaskRemoveFromEventList+0xb4>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4313      	orrs	r3, r2
 800bde2:	4a16      	ldr	r2, [pc, #88]	; (800be3c <xTaskRemoveFromEventList+0xb4>)
 800bde4:	6013      	str	r3, [r2, #0]
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdea:	4613      	mov	r3, r2
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	4413      	add	r3, r2
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	4a13      	ldr	r2, [pc, #76]	; (800be40 <xTaskRemoveFromEventList+0xb8>)
 800bdf4:	441a      	add	r2, r3
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	3304      	adds	r3, #4
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	4610      	mov	r0, r2
 800bdfe:	f7fe fc1d 	bl	800a63c <vListInsertEnd>
 800be02:	e005      	b.n	800be10 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	3318      	adds	r3, #24
 800be08:	4619      	mov	r1, r3
 800be0a:	480e      	ldr	r0, [pc, #56]	; (800be44 <xTaskRemoveFromEventList+0xbc>)
 800be0c:	f7fe fc16 	bl	800a63c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be14:	4b0c      	ldr	r3, [pc, #48]	; (800be48 <xTaskRemoveFromEventList+0xc0>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d905      	bls.n	800be2a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be1e:	2301      	movs	r3, #1
 800be20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be22:	4b0a      	ldr	r3, [pc, #40]	; (800be4c <xTaskRemoveFromEventList+0xc4>)
 800be24:	2201      	movs	r2, #1
 800be26:	601a      	str	r2, [r3, #0]
 800be28:	e001      	b.n	800be2e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800be2a:	2300      	movs	r3, #0
 800be2c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be2e:	697b      	ldr	r3, [r7, #20]
}
 800be30:	4618      	mov	r0, r3
 800be32:	3718      	adds	r7, #24
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}
 800be38:	20000dbc 	.word	0x20000dbc
 800be3c:	20000d9c 	.word	0x20000d9c
 800be40:	20000c98 	.word	0x20000c98
 800be44:	20000d54 	.word	0x20000d54
 800be48:	20000c94 	.word	0x20000c94
 800be4c:	20000da8 	.word	0x20000da8

0800be50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be50:	b480      	push	{r7}
 800be52:	b083      	sub	sp, #12
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be58:	4b06      	ldr	r3, [pc, #24]	; (800be74 <vTaskInternalSetTimeOutState+0x24>)
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be60:	4b05      	ldr	r3, [pc, #20]	; (800be78 <vTaskInternalSetTimeOutState+0x28>)
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	605a      	str	r2, [r3, #4]
}
 800be68:	bf00      	nop
 800be6a:	370c      	adds	r7, #12
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr
 800be74:	20000dac 	.word	0x20000dac
 800be78:	20000d98 	.word	0x20000d98

0800be7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b088      	sub	sp, #32
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d10c      	bne.n	800bea6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800be8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be90:	b672      	cpsid	i
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	b662      	cpsie	i
 800bea0:	613b      	str	r3, [r7, #16]
}
 800bea2:	bf00      	nop
 800bea4:	e7fe      	b.n	800bea4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d10c      	bne.n	800bec6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800beac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb0:	b672      	cpsid	i
 800beb2:	f383 8811 	msr	BASEPRI, r3
 800beb6:	f3bf 8f6f 	isb	sy
 800beba:	f3bf 8f4f 	dsb	sy
 800bebe:	b662      	cpsie	i
 800bec0:	60fb      	str	r3, [r7, #12]
}
 800bec2:	bf00      	nop
 800bec4:	e7fe      	b.n	800bec4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800bec6:	f000 fc71 	bl	800c7ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800beca:	4b1d      	ldr	r3, [pc, #116]	; (800bf40 <xTaskCheckForTimeOut+0xc4>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	69ba      	ldr	r2, [r7, #24]
 800bed6:	1ad3      	subs	r3, r2, r3
 800bed8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee2:	d102      	bne.n	800beea <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bee4:	2300      	movs	r3, #0
 800bee6:	61fb      	str	r3, [r7, #28]
 800bee8:	e023      	b.n	800bf32 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	4b15      	ldr	r3, [pc, #84]	; (800bf44 <xTaskCheckForTimeOut+0xc8>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d007      	beq.n	800bf06 <xTaskCheckForTimeOut+0x8a>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	69ba      	ldr	r2, [r7, #24]
 800befc:	429a      	cmp	r2, r3
 800befe:	d302      	bcc.n	800bf06 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bf00:	2301      	movs	r3, #1
 800bf02:	61fb      	str	r3, [r7, #28]
 800bf04:	e015      	b.n	800bf32 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	697a      	ldr	r2, [r7, #20]
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d20b      	bcs.n	800bf28 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	1ad2      	subs	r2, r2, r3
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f7ff ff97 	bl	800be50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bf22:	2300      	movs	r3, #0
 800bf24:	61fb      	str	r3, [r7, #28]
 800bf26:	e004      	b.n	800bf32 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf32:	f000 fc6f 	bl	800c814 <vPortExitCritical>

	return xReturn;
 800bf36:	69fb      	ldr	r3, [r7, #28]
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3720      	adds	r7, #32
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	20000d98 	.word	0x20000d98
 800bf44:	20000dac 	.word	0x20000dac

0800bf48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf48:	b480      	push	{r7}
 800bf4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf4c:	4b03      	ldr	r3, [pc, #12]	; (800bf5c <vTaskMissedYield+0x14>)
 800bf4e:	2201      	movs	r2, #1
 800bf50:	601a      	str	r2, [r3, #0]
}
 800bf52:	bf00      	nop
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr
 800bf5c:	20000da8 	.word	0x20000da8

0800bf60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf68:	f000 f852 	bl	800c010 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf6c:	4b06      	ldr	r3, [pc, #24]	; (800bf88 <prvIdleTask+0x28>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d9f9      	bls.n	800bf68 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf74:	4b05      	ldr	r3, [pc, #20]	; (800bf8c <prvIdleTask+0x2c>)
 800bf76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf7a:	601a      	str	r2, [r3, #0]
 800bf7c:	f3bf 8f4f 	dsb	sy
 800bf80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf84:	e7f0      	b.n	800bf68 <prvIdleTask+0x8>
 800bf86:	bf00      	nop
 800bf88:	20000c98 	.word	0x20000c98
 800bf8c:	e000ed04 	.word	0xe000ed04

0800bf90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf96:	2300      	movs	r3, #0
 800bf98:	607b      	str	r3, [r7, #4]
 800bf9a:	e00c      	b.n	800bfb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	4413      	add	r3, r2
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	4a12      	ldr	r2, [pc, #72]	; (800bff0 <prvInitialiseTaskLists+0x60>)
 800bfa8:	4413      	add	r3, r2
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7fe fb19 	bl	800a5e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	607b      	str	r3, [r7, #4]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2b06      	cmp	r3, #6
 800bfba:	d9ef      	bls.n	800bf9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bfbc:	480d      	ldr	r0, [pc, #52]	; (800bff4 <prvInitialiseTaskLists+0x64>)
 800bfbe:	f7fe fb10 	bl	800a5e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bfc2:	480d      	ldr	r0, [pc, #52]	; (800bff8 <prvInitialiseTaskLists+0x68>)
 800bfc4:	f7fe fb0d 	bl	800a5e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bfc8:	480c      	ldr	r0, [pc, #48]	; (800bffc <prvInitialiseTaskLists+0x6c>)
 800bfca:	f7fe fb0a 	bl	800a5e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bfce:	480c      	ldr	r0, [pc, #48]	; (800c000 <prvInitialiseTaskLists+0x70>)
 800bfd0:	f7fe fb07 	bl	800a5e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bfd4:	480b      	ldr	r0, [pc, #44]	; (800c004 <prvInitialiseTaskLists+0x74>)
 800bfd6:	f7fe fb04 	bl	800a5e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bfda:	4b0b      	ldr	r3, [pc, #44]	; (800c008 <prvInitialiseTaskLists+0x78>)
 800bfdc:	4a05      	ldr	r2, [pc, #20]	; (800bff4 <prvInitialiseTaskLists+0x64>)
 800bfde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bfe0:	4b0a      	ldr	r3, [pc, #40]	; (800c00c <prvInitialiseTaskLists+0x7c>)
 800bfe2:	4a05      	ldr	r2, [pc, #20]	; (800bff8 <prvInitialiseTaskLists+0x68>)
 800bfe4:	601a      	str	r2, [r3, #0]
}
 800bfe6:	bf00      	nop
 800bfe8:	3708      	adds	r7, #8
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop
 800bff0:	20000c98 	.word	0x20000c98
 800bff4:	20000d24 	.word	0x20000d24
 800bff8:	20000d38 	.word	0x20000d38
 800bffc:	20000d54 	.word	0x20000d54
 800c000:	20000d68 	.word	0x20000d68
 800c004:	20000d80 	.word	0x20000d80
 800c008:	20000d4c 	.word	0x20000d4c
 800c00c:	20000d50 	.word	0x20000d50

0800c010 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c016:	e019      	b.n	800c04c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c018:	f000 fbc8 	bl	800c7ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c01c:	4b10      	ldr	r3, [pc, #64]	; (800c060 <prvCheckTasksWaitingTermination+0x50>)
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3304      	adds	r3, #4
 800c028:	4618      	mov	r0, r3
 800c02a:	f7fe fb64 	bl	800a6f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c02e:	4b0d      	ldr	r3, [pc, #52]	; (800c064 <prvCheckTasksWaitingTermination+0x54>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	3b01      	subs	r3, #1
 800c034:	4a0b      	ldr	r2, [pc, #44]	; (800c064 <prvCheckTasksWaitingTermination+0x54>)
 800c036:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c038:	4b0b      	ldr	r3, [pc, #44]	; (800c068 <prvCheckTasksWaitingTermination+0x58>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	3b01      	subs	r3, #1
 800c03e:	4a0a      	ldr	r2, [pc, #40]	; (800c068 <prvCheckTasksWaitingTermination+0x58>)
 800c040:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c042:	f000 fbe7 	bl	800c814 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 f810 	bl	800c06c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c04c:	4b06      	ldr	r3, [pc, #24]	; (800c068 <prvCheckTasksWaitingTermination+0x58>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1e1      	bne.n	800c018 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c054:	bf00      	nop
 800c056:	bf00      	nop
 800c058:	3708      	adds	r7, #8
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	20000d68 	.word	0x20000d68
 800c064:	20000d94 	.word	0x20000d94
 800c068:	20000d7c 	.word	0x20000d7c

0800c06c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	334c      	adds	r3, #76	; 0x4c
 800c078:	4618      	mov	r0, r3
 800c07a:	f000 ff47 	bl	800cf0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c084:	2b00      	cmp	r3, #0
 800c086:	d108      	bne.n	800c09a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c08c:	4618      	mov	r0, r3
 800c08e:	f000 fd3f 	bl	800cb10 <vPortFree>
				vPortFree( pxTCB );
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 fd3c 	bl	800cb10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c098:	e01a      	b.n	800c0d0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d103      	bne.n	800c0ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 fd33 	bl	800cb10 <vPortFree>
	}
 800c0aa:	e011      	b.n	800c0d0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d00c      	beq.n	800c0d0 <prvDeleteTCB+0x64>
	__asm volatile
 800c0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ba:	b672      	cpsid	i
 800c0bc:	f383 8811 	msr	BASEPRI, r3
 800c0c0:	f3bf 8f6f 	isb	sy
 800c0c4:	f3bf 8f4f 	dsb	sy
 800c0c8:	b662      	cpsie	i
 800c0ca:	60fb      	str	r3, [r7, #12]
}
 800c0cc:	bf00      	nop
 800c0ce:	e7fe      	b.n	800c0ce <prvDeleteTCB+0x62>
	}
 800c0d0:	bf00      	nop
 800c0d2:	3710      	adds	r7, #16
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0de:	4b0c      	ldr	r3, [pc, #48]	; (800c110 <prvResetNextTaskUnblockTime+0x38>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d104      	bne.n	800c0f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c0e8:	4b0a      	ldr	r3, [pc, #40]	; (800c114 <prvResetNextTaskUnblockTime+0x3c>)
 800c0ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c0f0:	e008      	b.n	800c104 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0f2:	4b07      	ldr	r3, [pc, #28]	; (800c110 <prvResetNextTaskUnblockTime+0x38>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	4a04      	ldr	r2, [pc, #16]	; (800c114 <prvResetNextTaskUnblockTime+0x3c>)
 800c102:	6013      	str	r3, [r2, #0]
}
 800c104:	bf00      	nop
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr
 800c110:	20000d4c 	.word	0x20000d4c
 800c114:	20000db4 	.word	0x20000db4

0800c118 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c11e:	4b0b      	ldr	r3, [pc, #44]	; (800c14c <xTaskGetSchedulerState+0x34>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d102      	bne.n	800c12c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c126:	2301      	movs	r3, #1
 800c128:	607b      	str	r3, [r7, #4]
 800c12a:	e008      	b.n	800c13e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c12c:	4b08      	ldr	r3, [pc, #32]	; (800c150 <xTaskGetSchedulerState+0x38>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d102      	bne.n	800c13a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c134:	2302      	movs	r3, #2
 800c136:	607b      	str	r3, [r7, #4]
 800c138:	e001      	b.n	800c13e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c13a:	2300      	movs	r3, #0
 800c13c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c13e:	687b      	ldr	r3, [r7, #4]
	}
 800c140:	4618      	mov	r0, r3
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr
 800c14c:	20000da0 	.word	0x20000da0
 800c150:	20000dbc 	.word	0x20000dbc

0800c154 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c160:	2300      	movs	r3, #0
 800c162:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d069      	beq.n	800c23e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c16e:	4b36      	ldr	r3, [pc, #216]	; (800c248 <xTaskPriorityInherit+0xf4>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c174:	429a      	cmp	r2, r3
 800c176:	d259      	bcs.n	800c22c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	699b      	ldr	r3, [r3, #24]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	db06      	blt.n	800c18e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c180:	4b31      	ldr	r3, [pc, #196]	; (800c248 <xTaskPriorityInherit+0xf4>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c186:	f1c3 0207 	rsb	r2, r3, #7
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	6959      	ldr	r1, [r3, #20]
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c196:	4613      	mov	r3, r2
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	4413      	add	r3, r2
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	4a2b      	ldr	r2, [pc, #172]	; (800c24c <xTaskPriorityInherit+0xf8>)
 800c1a0:	4413      	add	r3, r2
 800c1a2:	4299      	cmp	r1, r3
 800c1a4:	d13a      	bne.n	800c21c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	3304      	adds	r3, #4
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7fe faa3 	bl	800a6f6 <uxListRemove>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d115      	bne.n	800c1e2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ba:	4924      	ldr	r1, [pc, #144]	; (800c24c <xTaskPriorityInherit+0xf8>)
 800c1bc:	4613      	mov	r3, r2
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	4413      	add	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	440b      	add	r3, r1
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10a      	bne.n	800c1e2 <xTaskPriorityInherit+0x8e>
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c1d6:	43da      	mvns	r2, r3
 800c1d8:	4b1d      	ldr	r3, [pc, #116]	; (800c250 <xTaskPriorityInherit+0xfc>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4013      	ands	r3, r2
 800c1de:	4a1c      	ldr	r2, [pc, #112]	; (800c250 <xTaskPriorityInherit+0xfc>)
 800c1e0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c1e2:	4b19      	ldr	r3, [pc, #100]	; (800c248 <xTaskPriorityInherit+0xf4>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	409a      	lsls	r2, r3
 800c1f4:	4b16      	ldr	r3, [pc, #88]	; (800c250 <xTaskPriorityInherit+0xfc>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	4a15      	ldr	r2, [pc, #84]	; (800c250 <xTaskPriorityInherit+0xfc>)
 800c1fc:	6013      	str	r3, [r2, #0]
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c202:	4613      	mov	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	4413      	add	r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4a10      	ldr	r2, [pc, #64]	; (800c24c <xTaskPriorityInherit+0xf8>)
 800c20c:	441a      	add	r2, r3
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	3304      	adds	r3, #4
 800c212:	4619      	mov	r1, r3
 800c214:	4610      	mov	r0, r2
 800c216:	f7fe fa11 	bl	800a63c <vListInsertEnd>
 800c21a:	e004      	b.n	800c226 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c21c:	4b0a      	ldr	r3, [pc, #40]	; (800c248 <xTaskPriorityInherit+0xf4>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c226:	2301      	movs	r3, #1
 800c228:	60fb      	str	r3, [r7, #12]
 800c22a:	e008      	b.n	800c23e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c230:	4b05      	ldr	r3, [pc, #20]	; (800c248 <xTaskPriorityInherit+0xf4>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c236:	429a      	cmp	r2, r3
 800c238:	d201      	bcs.n	800c23e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c23a:	2301      	movs	r3, #1
 800c23c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c23e:	68fb      	ldr	r3, [r7, #12]
	}
 800c240:	4618      	mov	r0, r3
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	20000c94 	.word	0x20000c94
 800c24c:	20000c98 	.word	0x20000c98
 800c250:	20000d9c 	.word	0x20000d9c

0800c254 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c254:	b580      	push	{r7, lr}
 800c256:	b086      	sub	sp, #24
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c260:	2300      	movs	r3, #0
 800c262:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d072      	beq.n	800c350 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c26a:	4b3c      	ldr	r3, [pc, #240]	; (800c35c <xTaskPriorityDisinherit+0x108>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	693a      	ldr	r2, [r7, #16]
 800c270:	429a      	cmp	r2, r3
 800c272:	d00c      	beq.n	800c28e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800c274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c278:	b672      	cpsid	i
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	b662      	cpsie	i
 800c288:	60fb      	str	r3, [r7, #12]
}
 800c28a:	bf00      	nop
 800c28c:	e7fe      	b.n	800c28c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c292:	2b00      	cmp	r3, #0
 800c294:	d10c      	bne.n	800c2b0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29a:	b672      	cpsid	i
 800c29c:	f383 8811 	msr	BASEPRI, r3
 800c2a0:	f3bf 8f6f 	isb	sy
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	b662      	cpsie	i
 800c2aa:	60bb      	str	r3, [r7, #8]
}
 800c2ac:	bf00      	nop
 800c2ae:	e7fe      	b.n	800c2ae <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2b4:	1e5a      	subs	r2, r3, #1
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d044      	beq.n	800c350 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d140      	bne.n	800c350 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	3304      	adds	r3, #4
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7fe fa0f 	bl	800a6f6 <uxListRemove>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d115      	bne.n	800c30a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2e2:	491f      	ldr	r1, [pc, #124]	; (800c360 <xTaskPriorityDisinherit+0x10c>)
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	4413      	add	r3, r2
 800c2ea:	009b      	lsls	r3, r3, #2
 800c2ec:	440b      	add	r3, r1
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d10a      	bne.n	800c30a <xTaskPriorityDisinherit+0xb6>
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c2fe:	43da      	mvns	r2, r3
 800c300:	4b18      	ldr	r3, [pc, #96]	; (800c364 <xTaskPriorityDisinherit+0x110>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4013      	ands	r3, r2
 800c306:	4a17      	ldr	r2, [pc, #92]	; (800c364 <xTaskPriorityDisinherit+0x110>)
 800c308:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c316:	f1c3 0207 	rsb	r2, r3, #7
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c322:	2201      	movs	r2, #1
 800c324:	409a      	lsls	r2, r3
 800c326:	4b0f      	ldr	r3, [pc, #60]	; (800c364 <xTaskPriorityDisinherit+0x110>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4313      	orrs	r3, r2
 800c32c:	4a0d      	ldr	r2, [pc, #52]	; (800c364 <xTaskPriorityDisinherit+0x110>)
 800c32e:	6013      	str	r3, [r2, #0]
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c334:	4613      	mov	r3, r2
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	4413      	add	r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	4a08      	ldr	r2, [pc, #32]	; (800c360 <xTaskPriorityDisinherit+0x10c>)
 800c33e:	441a      	add	r2, r3
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	3304      	adds	r3, #4
 800c344:	4619      	mov	r1, r3
 800c346:	4610      	mov	r0, r2
 800c348:	f7fe f978 	bl	800a63c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c34c:	2301      	movs	r3, #1
 800c34e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c350:	697b      	ldr	r3, [r7, #20]
	}
 800c352:	4618      	mov	r0, r3
 800c354:	3718      	adds	r7, #24
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	20000c94 	.word	0x20000c94
 800c360:	20000c98 	.word	0x20000c98
 800c364:	20000d9c 	.word	0x20000d9c

0800c368 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b088      	sub	sp, #32
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c376:	2301      	movs	r3, #1
 800c378:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	f000 8087 	beq.w	800c490 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c386:	2b00      	cmp	r3, #0
 800c388:	d10c      	bne.n	800c3a4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800c38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c38e:	b672      	cpsid	i
 800c390:	f383 8811 	msr	BASEPRI, r3
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	f3bf 8f4f 	dsb	sy
 800c39c:	b662      	cpsie	i
 800c39e:	60fb      	str	r3, [r7, #12]
}
 800c3a0:	bf00      	nop
 800c3a2:	e7fe      	b.n	800c3a2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3a8:	683a      	ldr	r2, [r7, #0]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d902      	bls.n	800c3b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	61fb      	str	r3, [r7, #28]
 800c3b2:	e002      	b.n	800c3ba <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c3b4:	69bb      	ldr	r3, [r7, #24]
 800c3b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3b8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3be:	69fa      	ldr	r2, [r7, #28]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d065      	beq.n	800c490 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c3c8:	697a      	ldr	r2, [r7, #20]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d160      	bne.n	800c490 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c3ce:	4b32      	ldr	r3, [pc, #200]	; (800c498 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	69ba      	ldr	r2, [r7, #24]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d10c      	bne.n	800c3f2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800c3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3dc:	b672      	cpsid	i
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
 800c3ea:	b662      	cpsie	i
 800c3ec:	60bb      	str	r3, [r7, #8]
}
 800c3ee:	bf00      	nop
 800c3f0:	e7fe      	b.n	800c3f0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c3f2:	69bb      	ldr	r3, [r7, #24]
 800c3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	69fa      	ldr	r2, [r7, #28]
 800c3fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c3fe:	69bb      	ldr	r3, [r7, #24]
 800c400:	699b      	ldr	r3, [r3, #24]
 800c402:	2b00      	cmp	r3, #0
 800c404:	db04      	blt.n	800c410 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	f1c3 0207 	rsb	r2, r3, #7
 800c40c:	69bb      	ldr	r3, [r7, #24]
 800c40e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	6959      	ldr	r1, [r3, #20]
 800c414:	693a      	ldr	r2, [r7, #16]
 800c416:	4613      	mov	r3, r2
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	4413      	add	r3, r2
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	4a1f      	ldr	r2, [pc, #124]	; (800c49c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c420:	4413      	add	r3, r2
 800c422:	4299      	cmp	r1, r3
 800c424:	d134      	bne.n	800c490 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c426:	69bb      	ldr	r3, [r7, #24]
 800c428:	3304      	adds	r3, #4
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7fe f963 	bl	800a6f6 <uxListRemove>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	d115      	bne.n	800c462 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c436:	69bb      	ldr	r3, [r7, #24]
 800c438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c43a:	4918      	ldr	r1, [pc, #96]	; (800c49c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c43c:	4613      	mov	r3, r2
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	4413      	add	r3, r2
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	440b      	add	r3, r1
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d10a      	bne.n	800c462 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800c44c:	69bb      	ldr	r3, [r7, #24]
 800c44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c450:	2201      	movs	r2, #1
 800c452:	fa02 f303 	lsl.w	r3, r2, r3
 800c456:	43da      	mvns	r2, r3
 800c458:	4b11      	ldr	r3, [pc, #68]	; (800c4a0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4013      	ands	r3, r2
 800c45e:	4a10      	ldr	r2, [pc, #64]	; (800c4a0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c460:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c462:	69bb      	ldr	r3, [r7, #24]
 800c464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c466:	2201      	movs	r2, #1
 800c468:	409a      	lsls	r2, r3
 800c46a:	4b0d      	ldr	r3, [pc, #52]	; (800c4a0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4313      	orrs	r3, r2
 800c470:	4a0b      	ldr	r2, [pc, #44]	; (800c4a0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c472:	6013      	str	r3, [r2, #0]
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c478:	4613      	mov	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	4413      	add	r3, r2
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	4a06      	ldr	r2, [pc, #24]	; (800c49c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c482:	441a      	add	r2, r3
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	3304      	adds	r3, #4
 800c488:	4619      	mov	r1, r3
 800c48a:	4610      	mov	r0, r2
 800c48c:	f7fe f8d6 	bl	800a63c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c490:	bf00      	nop
 800c492:	3720      	adds	r7, #32
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	20000c94 	.word	0x20000c94
 800c49c:	20000c98 	.word	0x20000c98
 800c4a0:	20000d9c 	.word	0x20000d9c

0800c4a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c4a4:	b480      	push	{r7}
 800c4a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c4a8:	4b07      	ldr	r3, [pc, #28]	; (800c4c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d004      	beq.n	800c4ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c4b0:	4b05      	ldr	r3, [pc, #20]	; (800c4c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c4b6:	3201      	adds	r2, #1
 800c4b8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c4ba:	4b03      	ldr	r3, [pc, #12]	; (800c4c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
	}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr
 800c4c8:	20000c94 	.word	0x20000c94

0800c4cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b084      	sub	sp, #16
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c4d6:	4b29      	ldr	r3, [pc, #164]	; (800c57c <prvAddCurrentTaskToDelayedList+0xb0>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4dc:	4b28      	ldr	r3, [pc, #160]	; (800c580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	3304      	adds	r3, #4
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7fe f907 	bl	800a6f6 <uxListRemove>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d10b      	bne.n	800c506 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c4ee:	4b24      	ldr	r3, [pc, #144]	; (800c580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4fa:	43da      	mvns	r2, r3
 800c4fc:	4b21      	ldr	r3, [pc, #132]	; (800c584 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4013      	ands	r3, r2
 800c502:	4a20      	ldr	r2, [pc, #128]	; (800c584 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c504:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c50c:	d10a      	bne.n	800c524 <prvAddCurrentTaskToDelayedList+0x58>
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d007      	beq.n	800c524 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c514:	4b1a      	ldr	r3, [pc, #104]	; (800c580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	3304      	adds	r3, #4
 800c51a:	4619      	mov	r1, r3
 800c51c:	481a      	ldr	r0, [pc, #104]	; (800c588 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c51e:	f7fe f88d 	bl	800a63c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c522:	e026      	b.n	800c572 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c524:	68fa      	ldr	r2, [r7, #12]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4413      	add	r3, r2
 800c52a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c52c:	4b14      	ldr	r3, [pc, #80]	; (800c580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	68ba      	ldr	r2, [r7, #8]
 800c532:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	429a      	cmp	r2, r3
 800c53a:	d209      	bcs.n	800c550 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c53c:	4b13      	ldr	r3, [pc, #76]	; (800c58c <prvAddCurrentTaskToDelayedList+0xc0>)
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	4b0f      	ldr	r3, [pc, #60]	; (800c580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	3304      	adds	r3, #4
 800c546:	4619      	mov	r1, r3
 800c548:	4610      	mov	r0, r2
 800c54a:	f7fe f89b 	bl	800a684 <vListInsert>
}
 800c54e:	e010      	b.n	800c572 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c550:	4b0f      	ldr	r3, [pc, #60]	; (800c590 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	4b0a      	ldr	r3, [pc, #40]	; (800c580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	3304      	adds	r3, #4
 800c55a:	4619      	mov	r1, r3
 800c55c:	4610      	mov	r0, r2
 800c55e:	f7fe f891 	bl	800a684 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c562:	4b0c      	ldr	r3, [pc, #48]	; (800c594 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	68ba      	ldr	r2, [r7, #8]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d202      	bcs.n	800c572 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c56c:	4a09      	ldr	r2, [pc, #36]	; (800c594 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	6013      	str	r3, [r2, #0]
}
 800c572:	bf00      	nop
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	20000d98 	.word	0x20000d98
 800c580:	20000c94 	.word	0x20000c94
 800c584:	20000d9c 	.word	0x20000d9c
 800c588:	20000d80 	.word	0x20000d80
 800c58c:	20000d50 	.word	0x20000d50
 800c590:	20000d4c 	.word	0x20000d4c
 800c594:	20000db4 	.word	0x20000db4

0800c598 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	3b04      	subs	r3, #4
 800c5a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c5b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	3b04      	subs	r3, #4
 800c5b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	f023 0201 	bic.w	r2, r3, #1
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	3b04      	subs	r3, #4
 800c5c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c5c8:	4a0c      	ldr	r2, [pc, #48]	; (800c5fc <pxPortInitialiseStack+0x64>)
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	3b14      	subs	r3, #20
 800c5d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	3b04      	subs	r3, #4
 800c5de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f06f 0202 	mvn.w	r2, #2
 800c5e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	3b20      	subs	r3, #32
 800c5ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3714      	adds	r7, #20
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr
 800c5fc:	0800c601 	.word	0x0800c601

0800c600 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c600:	b480      	push	{r7}
 800c602:	b085      	sub	sp, #20
 800c604:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c606:	2300      	movs	r3, #0
 800c608:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c60a:	4b14      	ldr	r3, [pc, #80]	; (800c65c <prvTaskExitError+0x5c>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c612:	d00c      	beq.n	800c62e <prvTaskExitError+0x2e>
	__asm volatile
 800c614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c618:	b672      	cpsid	i
 800c61a:	f383 8811 	msr	BASEPRI, r3
 800c61e:	f3bf 8f6f 	isb	sy
 800c622:	f3bf 8f4f 	dsb	sy
 800c626:	b662      	cpsie	i
 800c628:	60fb      	str	r3, [r7, #12]
}
 800c62a:	bf00      	nop
 800c62c:	e7fe      	b.n	800c62c <prvTaskExitError+0x2c>
	__asm volatile
 800c62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c632:	b672      	cpsid	i
 800c634:	f383 8811 	msr	BASEPRI, r3
 800c638:	f3bf 8f6f 	isb	sy
 800c63c:	f3bf 8f4f 	dsb	sy
 800c640:	b662      	cpsie	i
 800c642:	60bb      	str	r3, [r7, #8]
}
 800c644:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c646:	bf00      	nop
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d0fc      	beq.n	800c648 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c64e:	bf00      	nop
 800c650:	bf00      	nop
 800c652:	3714      	adds	r7, #20
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr
 800c65c:	20000048 	.word	0x20000048

0800c660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c660:	4b07      	ldr	r3, [pc, #28]	; (800c680 <pxCurrentTCBConst2>)
 800c662:	6819      	ldr	r1, [r3, #0]
 800c664:	6808      	ldr	r0, [r1, #0]
 800c666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66a:	f380 8809 	msr	PSP, r0
 800c66e:	f3bf 8f6f 	isb	sy
 800c672:	f04f 0000 	mov.w	r0, #0
 800c676:	f380 8811 	msr	BASEPRI, r0
 800c67a:	4770      	bx	lr
 800c67c:	f3af 8000 	nop.w

0800c680 <pxCurrentTCBConst2>:
 800c680:	20000c94 	.word	0x20000c94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c684:	bf00      	nop
 800c686:	bf00      	nop

0800c688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c688:	4808      	ldr	r0, [pc, #32]	; (800c6ac <prvPortStartFirstTask+0x24>)
 800c68a:	6800      	ldr	r0, [r0, #0]
 800c68c:	6800      	ldr	r0, [r0, #0]
 800c68e:	f380 8808 	msr	MSP, r0
 800c692:	f04f 0000 	mov.w	r0, #0
 800c696:	f380 8814 	msr	CONTROL, r0
 800c69a:	b662      	cpsie	i
 800c69c:	b661      	cpsie	f
 800c69e:	f3bf 8f4f 	dsb	sy
 800c6a2:	f3bf 8f6f 	isb	sy
 800c6a6:	df00      	svc	0
 800c6a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c6aa:	bf00      	nop
 800c6ac:	e000ed08 	.word	0xe000ed08

0800c6b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c6b6:	4b37      	ldr	r3, [pc, #220]	; (800c794 <xPortStartScheduler+0xe4>)
 800c6b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	22ff      	movs	r2, #255	; 0xff
 800c6c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c6d0:	78fb      	ldrb	r3, [r7, #3]
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c6d8:	b2da      	uxtb	r2, r3
 800c6da:	4b2f      	ldr	r3, [pc, #188]	; (800c798 <xPortStartScheduler+0xe8>)
 800c6dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c6de:	4b2f      	ldr	r3, [pc, #188]	; (800c79c <xPortStartScheduler+0xec>)
 800c6e0:	2207      	movs	r2, #7
 800c6e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6e4:	e009      	b.n	800c6fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c6e6:	4b2d      	ldr	r3, [pc, #180]	; (800c79c <xPortStartScheduler+0xec>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	3b01      	subs	r3, #1
 800c6ec:	4a2b      	ldr	r2, [pc, #172]	; (800c79c <xPortStartScheduler+0xec>)
 800c6ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c6f0:	78fb      	ldrb	r3, [r7, #3]
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	005b      	lsls	r3, r3, #1
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6fa:	78fb      	ldrb	r3, [r7, #3]
 800c6fc:	b2db      	uxtb	r3, r3
 800c6fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c702:	2b80      	cmp	r3, #128	; 0x80
 800c704:	d0ef      	beq.n	800c6e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c706:	4b25      	ldr	r3, [pc, #148]	; (800c79c <xPortStartScheduler+0xec>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f1c3 0307 	rsb	r3, r3, #7
 800c70e:	2b04      	cmp	r3, #4
 800c710:	d00c      	beq.n	800c72c <xPortStartScheduler+0x7c>
	__asm volatile
 800c712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c716:	b672      	cpsid	i
 800c718:	f383 8811 	msr	BASEPRI, r3
 800c71c:	f3bf 8f6f 	isb	sy
 800c720:	f3bf 8f4f 	dsb	sy
 800c724:	b662      	cpsie	i
 800c726:	60bb      	str	r3, [r7, #8]
}
 800c728:	bf00      	nop
 800c72a:	e7fe      	b.n	800c72a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c72c:	4b1b      	ldr	r3, [pc, #108]	; (800c79c <xPortStartScheduler+0xec>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	021b      	lsls	r3, r3, #8
 800c732:	4a1a      	ldr	r2, [pc, #104]	; (800c79c <xPortStartScheduler+0xec>)
 800c734:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c736:	4b19      	ldr	r3, [pc, #100]	; (800c79c <xPortStartScheduler+0xec>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c73e:	4a17      	ldr	r2, [pc, #92]	; (800c79c <xPortStartScheduler+0xec>)
 800c740:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	b2da      	uxtb	r2, r3
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c74a:	4b15      	ldr	r3, [pc, #84]	; (800c7a0 <xPortStartScheduler+0xf0>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a14      	ldr	r2, [pc, #80]	; (800c7a0 <xPortStartScheduler+0xf0>)
 800c750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c754:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c756:	4b12      	ldr	r3, [pc, #72]	; (800c7a0 <xPortStartScheduler+0xf0>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a11      	ldr	r2, [pc, #68]	; (800c7a0 <xPortStartScheduler+0xf0>)
 800c75c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c760:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c762:	f000 f8dd 	bl	800c920 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c766:	4b0f      	ldr	r3, [pc, #60]	; (800c7a4 <xPortStartScheduler+0xf4>)
 800c768:	2200      	movs	r2, #0
 800c76a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c76c:	f000 f8fc 	bl	800c968 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c770:	4b0d      	ldr	r3, [pc, #52]	; (800c7a8 <xPortStartScheduler+0xf8>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a0c      	ldr	r2, [pc, #48]	; (800c7a8 <xPortStartScheduler+0xf8>)
 800c776:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c77a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c77c:	f7ff ff84 	bl	800c688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c780:	f7ff fa78 	bl	800bc74 <vTaskSwitchContext>
	prvTaskExitError();
 800c784:	f7ff ff3c 	bl	800c600 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c788:	2300      	movs	r3, #0
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
 800c792:	bf00      	nop
 800c794:	e000e400 	.word	0xe000e400
 800c798:	20000dc0 	.word	0x20000dc0
 800c79c:	20000dc4 	.word	0x20000dc4
 800c7a0:	e000ed20 	.word	0xe000ed20
 800c7a4:	20000048 	.word	0x20000048
 800c7a8:	e000ef34 	.word	0xe000ef34

0800c7ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b083      	sub	sp, #12
 800c7b0:	af00      	add	r7, sp, #0
	__asm volatile
 800c7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b6:	b672      	cpsid	i
 800c7b8:	f383 8811 	msr	BASEPRI, r3
 800c7bc:	f3bf 8f6f 	isb	sy
 800c7c0:	f3bf 8f4f 	dsb	sy
 800c7c4:	b662      	cpsie	i
 800c7c6:	607b      	str	r3, [r7, #4]
}
 800c7c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c7ca:	4b10      	ldr	r3, [pc, #64]	; (800c80c <vPortEnterCritical+0x60>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	4a0e      	ldr	r2, [pc, #56]	; (800c80c <vPortEnterCritical+0x60>)
 800c7d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c7d4:	4b0d      	ldr	r3, [pc, #52]	; (800c80c <vPortEnterCritical+0x60>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d111      	bne.n	800c800 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c7dc:	4b0c      	ldr	r3, [pc, #48]	; (800c810 <vPortEnterCritical+0x64>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00c      	beq.n	800c800 <vPortEnterCritical+0x54>
	__asm volatile
 800c7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ea:	b672      	cpsid	i
 800c7ec:	f383 8811 	msr	BASEPRI, r3
 800c7f0:	f3bf 8f6f 	isb	sy
 800c7f4:	f3bf 8f4f 	dsb	sy
 800c7f8:	b662      	cpsie	i
 800c7fa:	603b      	str	r3, [r7, #0]
}
 800c7fc:	bf00      	nop
 800c7fe:	e7fe      	b.n	800c7fe <vPortEnterCritical+0x52>
	}
}
 800c800:	bf00      	nop
 800c802:	370c      	adds	r7, #12
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr
 800c80c:	20000048 	.word	0x20000048
 800c810:	e000ed04 	.word	0xe000ed04

0800c814 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c81a:	4b13      	ldr	r3, [pc, #76]	; (800c868 <vPortExitCritical+0x54>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d10c      	bne.n	800c83c <vPortExitCritical+0x28>
	__asm volatile
 800c822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c826:	b672      	cpsid	i
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	b662      	cpsie	i
 800c836:	607b      	str	r3, [r7, #4]
}
 800c838:	bf00      	nop
 800c83a:	e7fe      	b.n	800c83a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c83c:	4b0a      	ldr	r3, [pc, #40]	; (800c868 <vPortExitCritical+0x54>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	3b01      	subs	r3, #1
 800c842:	4a09      	ldr	r2, [pc, #36]	; (800c868 <vPortExitCritical+0x54>)
 800c844:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c846:	4b08      	ldr	r3, [pc, #32]	; (800c868 <vPortExitCritical+0x54>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d105      	bne.n	800c85a <vPortExitCritical+0x46>
 800c84e:	2300      	movs	r3, #0
 800c850:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c858:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c85a:	bf00      	nop
 800c85c:	370c      	adds	r7, #12
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	20000048 	.word	0x20000048
 800c86c:	00000000 	.word	0x00000000

0800c870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c870:	f3ef 8009 	mrs	r0, PSP
 800c874:	f3bf 8f6f 	isb	sy
 800c878:	4b15      	ldr	r3, [pc, #84]	; (800c8d0 <pxCurrentTCBConst>)
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	f01e 0f10 	tst.w	lr, #16
 800c880:	bf08      	it	eq
 800c882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c88a:	6010      	str	r0, [r2, #0]
 800c88c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c890:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c894:	b672      	cpsid	i
 800c896:	f380 8811 	msr	BASEPRI, r0
 800c89a:	f3bf 8f4f 	dsb	sy
 800c89e:	f3bf 8f6f 	isb	sy
 800c8a2:	b662      	cpsie	i
 800c8a4:	f7ff f9e6 	bl	800bc74 <vTaskSwitchContext>
 800c8a8:	f04f 0000 	mov.w	r0, #0
 800c8ac:	f380 8811 	msr	BASEPRI, r0
 800c8b0:	bc09      	pop	{r0, r3}
 800c8b2:	6819      	ldr	r1, [r3, #0]
 800c8b4:	6808      	ldr	r0, [r1, #0]
 800c8b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ba:	f01e 0f10 	tst.w	lr, #16
 800c8be:	bf08      	it	eq
 800c8c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c8c4:	f380 8809 	msr	PSP, r0
 800c8c8:	f3bf 8f6f 	isb	sy
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop

0800c8d0 <pxCurrentTCBConst>:
 800c8d0:	20000c94 	.word	0x20000c94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c8d4:	bf00      	nop
 800c8d6:	bf00      	nop

0800c8d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e2:	b672      	cpsid	i
 800c8e4:	f383 8811 	msr	BASEPRI, r3
 800c8e8:	f3bf 8f6f 	isb	sy
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	b662      	cpsie	i
 800c8f2:	607b      	str	r3, [r7, #4]
}
 800c8f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c8f6:	f7ff f903 	bl	800bb00 <xTaskIncrementTick>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d003      	beq.n	800c908 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c900:	4b06      	ldr	r3, [pc, #24]	; (800c91c <SysTick_Handler+0x44>)
 800c902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c906:	601a      	str	r2, [r3, #0]
 800c908:	2300      	movs	r3, #0
 800c90a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	f383 8811 	msr	BASEPRI, r3
}
 800c912:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c914:	bf00      	nop
 800c916:	3708      	adds	r7, #8
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	e000ed04 	.word	0xe000ed04

0800c920 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c920:	b480      	push	{r7}
 800c922:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c924:	4b0b      	ldr	r3, [pc, #44]	; (800c954 <vPortSetupTimerInterrupt+0x34>)
 800c926:	2200      	movs	r2, #0
 800c928:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c92a:	4b0b      	ldr	r3, [pc, #44]	; (800c958 <vPortSetupTimerInterrupt+0x38>)
 800c92c:	2200      	movs	r2, #0
 800c92e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c930:	4b0a      	ldr	r3, [pc, #40]	; (800c95c <vPortSetupTimerInterrupt+0x3c>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4a0a      	ldr	r2, [pc, #40]	; (800c960 <vPortSetupTimerInterrupt+0x40>)
 800c936:	fba2 2303 	umull	r2, r3, r2, r3
 800c93a:	099b      	lsrs	r3, r3, #6
 800c93c:	4a09      	ldr	r2, [pc, #36]	; (800c964 <vPortSetupTimerInterrupt+0x44>)
 800c93e:	3b01      	subs	r3, #1
 800c940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c942:	4b04      	ldr	r3, [pc, #16]	; (800c954 <vPortSetupTimerInterrupt+0x34>)
 800c944:	2207      	movs	r2, #7
 800c946:	601a      	str	r2, [r3, #0]
}
 800c948:	bf00      	nop
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr
 800c952:	bf00      	nop
 800c954:	e000e010 	.word	0xe000e010
 800c958:	e000e018 	.word	0xe000e018
 800c95c:	2000003c 	.word	0x2000003c
 800c960:	10624dd3 	.word	0x10624dd3
 800c964:	e000e014 	.word	0xe000e014

0800c968 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c968:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c978 <vPortEnableVFP+0x10>
 800c96c:	6801      	ldr	r1, [r0, #0]
 800c96e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c972:	6001      	str	r1, [r0, #0]
 800c974:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c976:	bf00      	nop
 800c978:	e000ed88 	.word	0xe000ed88

0800c97c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b08a      	sub	sp, #40	; 0x28
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c984:	2300      	movs	r3, #0
 800c986:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c988:	f7ff f80e 	bl	800b9a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c98c:	4b5b      	ldr	r3, [pc, #364]	; (800cafc <pvPortMalloc+0x180>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d101      	bne.n	800c998 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c994:	f000 f91a 	bl	800cbcc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c998:	4b59      	ldr	r3, [pc, #356]	; (800cb00 <pvPortMalloc+0x184>)
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4013      	ands	r3, r2
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	f040 8092 	bne.w	800caca <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d01f      	beq.n	800c9ec <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c9ac:	2208      	movs	r2, #8
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f003 0307 	and.w	r3, r3, #7
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d016      	beq.n	800c9ec <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f023 0307 	bic.w	r3, r3, #7
 800c9c4:	3308      	adds	r3, #8
 800c9c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f003 0307 	and.w	r3, r3, #7
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d00c      	beq.n	800c9ec <pvPortMalloc+0x70>
	__asm volatile
 800c9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d6:	b672      	cpsid	i
 800c9d8:	f383 8811 	msr	BASEPRI, r3
 800c9dc:	f3bf 8f6f 	isb	sy
 800c9e0:	f3bf 8f4f 	dsb	sy
 800c9e4:	b662      	cpsie	i
 800c9e6:	617b      	str	r3, [r7, #20]
}
 800c9e8:	bf00      	nop
 800c9ea:	e7fe      	b.n	800c9ea <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d06b      	beq.n	800caca <pvPortMalloc+0x14e>
 800c9f2:	4b44      	ldr	r3, [pc, #272]	; (800cb04 <pvPortMalloc+0x188>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d866      	bhi.n	800caca <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c9fc:	4b42      	ldr	r3, [pc, #264]	; (800cb08 <pvPortMalloc+0x18c>)
 800c9fe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ca00:	4b41      	ldr	r3, [pc, #260]	; (800cb08 <pvPortMalloc+0x18c>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca06:	e004      	b.n	800ca12 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ca08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ca0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d903      	bls.n	800ca24 <pvPortMalloc+0xa8>
 800ca1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d1f1      	bne.n	800ca08 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ca24:	4b35      	ldr	r3, [pc, #212]	; (800cafc <pvPortMalloc+0x180>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d04d      	beq.n	800caca <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca2e:	6a3b      	ldr	r3, [r7, #32]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2208      	movs	r2, #8
 800ca34:	4413      	add	r3, r2
 800ca36:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	6a3b      	ldr	r3, [r7, #32]
 800ca3e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca42:	685a      	ldr	r2, [r3, #4]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	1ad2      	subs	r2, r2, r3
 800ca48:	2308      	movs	r3, #8
 800ca4a:	005b      	lsls	r3, r3, #1
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d921      	bls.n	800ca94 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4413      	add	r3, r2
 800ca56:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca58:	69bb      	ldr	r3, [r7, #24]
 800ca5a:	f003 0307 	and.w	r3, r3, #7
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d00c      	beq.n	800ca7c <pvPortMalloc+0x100>
	__asm volatile
 800ca62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca66:	b672      	cpsid	i
 800ca68:	f383 8811 	msr	BASEPRI, r3
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	b662      	cpsie	i
 800ca76:	613b      	str	r3, [r7, #16]
}
 800ca78:	bf00      	nop
 800ca7a:	e7fe      	b.n	800ca7a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7e:	685a      	ldr	r2, [r3, #4]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	1ad2      	subs	r2, r2, r3
 800ca84:	69bb      	ldr	r3, [r7, #24]
 800ca86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca8e:	69b8      	ldr	r0, [r7, #24]
 800ca90:	f000 f8fe 	bl	800cc90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca94:	4b1b      	ldr	r3, [pc, #108]	; (800cb04 <pvPortMalloc+0x188>)
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	1ad3      	subs	r3, r2, r3
 800ca9e:	4a19      	ldr	r2, [pc, #100]	; (800cb04 <pvPortMalloc+0x188>)
 800caa0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800caa2:	4b18      	ldr	r3, [pc, #96]	; (800cb04 <pvPortMalloc+0x188>)
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	4b19      	ldr	r3, [pc, #100]	; (800cb0c <pvPortMalloc+0x190>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	429a      	cmp	r2, r3
 800caac:	d203      	bcs.n	800cab6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800caae:	4b15      	ldr	r3, [pc, #84]	; (800cb04 <pvPortMalloc+0x188>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4a16      	ldr	r2, [pc, #88]	; (800cb0c <pvPortMalloc+0x190>)
 800cab4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab8:	685a      	ldr	r2, [r3, #4]
 800caba:	4b11      	ldr	r3, [pc, #68]	; (800cb00 <pvPortMalloc+0x184>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	431a      	orrs	r2, r3
 800cac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac6:	2200      	movs	r2, #0
 800cac8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800caca:	f7fe ff7b 	bl	800b9c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cace:	69fb      	ldr	r3, [r7, #28]
 800cad0:	f003 0307 	and.w	r3, r3, #7
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d00c      	beq.n	800caf2 <pvPortMalloc+0x176>
	__asm volatile
 800cad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cadc:	b672      	cpsid	i
 800cade:	f383 8811 	msr	BASEPRI, r3
 800cae2:	f3bf 8f6f 	isb	sy
 800cae6:	f3bf 8f4f 	dsb	sy
 800caea:	b662      	cpsie	i
 800caec:	60fb      	str	r3, [r7, #12]
}
 800caee:	bf00      	nop
 800caf0:	e7fe      	b.n	800caf0 <pvPortMalloc+0x174>
	return pvReturn;
 800caf2:	69fb      	ldr	r3, [r7, #28]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3728      	adds	r7, #40	; 0x28
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	200049d0 	.word	0x200049d0
 800cb00:	200049dc 	.word	0x200049dc
 800cb04:	200049d4 	.word	0x200049d4
 800cb08:	200049c8 	.word	0x200049c8
 800cb0c:	200049d8 	.word	0x200049d8

0800cb10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b086      	sub	sp, #24
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d04c      	beq.n	800cbbc <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb22:	2308      	movs	r3, #8
 800cb24:	425b      	negs	r3, r3
 800cb26:	697a      	ldr	r2, [r7, #20]
 800cb28:	4413      	add	r3, r2
 800cb2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	685a      	ldr	r2, [r3, #4]
 800cb34:	4b23      	ldr	r3, [pc, #140]	; (800cbc4 <vPortFree+0xb4>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4013      	ands	r3, r2
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d10c      	bne.n	800cb58 <vPortFree+0x48>
	__asm volatile
 800cb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb42:	b672      	cpsid	i
 800cb44:	f383 8811 	msr	BASEPRI, r3
 800cb48:	f3bf 8f6f 	isb	sy
 800cb4c:	f3bf 8f4f 	dsb	sy
 800cb50:	b662      	cpsie	i
 800cb52:	60fb      	str	r3, [r7, #12]
}
 800cb54:	bf00      	nop
 800cb56:	e7fe      	b.n	800cb56 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d00c      	beq.n	800cb7a <vPortFree+0x6a>
	__asm volatile
 800cb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb64:	b672      	cpsid	i
 800cb66:	f383 8811 	msr	BASEPRI, r3
 800cb6a:	f3bf 8f6f 	isb	sy
 800cb6e:	f3bf 8f4f 	dsb	sy
 800cb72:	b662      	cpsie	i
 800cb74:	60bb      	str	r3, [r7, #8]
}
 800cb76:	bf00      	nop
 800cb78:	e7fe      	b.n	800cb78 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	685a      	ldr	r2, [r3, #4]
 800cb7e:	4b11      	ldr	r3, [pc, #68]	; (800cbc4 <vPortFree+0xb4>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4013      	ands	r3, r2
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d019      	beq.n	800cbbc <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d115      	bne.n	800cbbc <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	685a      	ldr	r2, [r3, #4]
 800cb94:	4b0b      	ldr	r3, [pc, #44]	; (800cbc4 <vPortFree+0xb4>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	43db      	mvns	r3, r3
 800cb9a:	401a      	ands	r2, r3
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cba0:	f7fe ff02 	bl	800b9a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	685a      	ldr	r2, [r3, #4]
 800cba8:	4b07      	ldr	r3, [pc, #28]	; (800cbc8 <vPortFree+0xb8>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4413      	add	r3, r2
 800cbae:	4a06      	ldr	r2, [pc, #24]	; (800cbc8 <vPortFree+0xb8>)
 800cbb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cbb2:	6938      	ldr	r0, [r7, #16]
 800cbb4:	f000 f86c 	bl	800cc90 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cbb8:	f7fe ff04 	bl	800b9c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cbbc:	bf00      	nop
 800cbbe:	3718      	adds	r7, #24
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	200049dc 	.word	0x200049dc
 800cbc8:	200049d4 	.word	0x200049d4

0800cbcc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cbd2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cbd6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cbd8:	4b27      	ldr	r3, [pc, #156]	; (800cc78 <prvHeapInit+0xac>)
 800cbda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f003 0307 	and.w	r3, r3, #7
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d00c      	beq.n	800cc00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	3307      	adds	r3, #7
 800cbea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f023 0307 	bic.w	r3, r3, #7
 800cbf2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cbf4:	68ba      	ldr	r2, [r7, #8]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	1ad3      	subs	r3, r2, r3
 800cbfa:	4a1f      	ldr	r2, [pc, #124]	; (800cc78 <prvHeapInit+0xac>)
 800cbfc:	4413      	add	r3, r2
 800cbfe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cc04:	4a1d      	ldr	r2, [pc, #116]	; (800cc7c <prvHeapInit+0xb0>)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cc0a:	4b1c      	ldr	r3, [pc, #112]	; (800cc7c <prvHeapInit+0xb0>)
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	68ba      	ldr	r2, [r7, #8]
 800cc14:	4413      	add	r3, r2
 800cc16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc18:	2208      	movs	r2, #8
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	1a9b      	subs	r3, r3, r2
 800cc1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f023 0307 	bic.w	r3, r3, #7
 800cc26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	4a15      	ldr	r2, [pc, #84]	; (800cc80 <prvHeapInit+0xb4>)
 800cc2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cc2e:	4b14      	ldr	r3, [pc, #80]	; (800cc80 <prvHeapInit+0xb4>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2200      	movs	r2, #0
 800cc34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cc36:	4b12      	ldr	r3, [pc, #72]	; (800cc80 <prvHeapInit+0xb4>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	68fa      	ldr	r2, [r7, #12]
 800cc46:	1ad2      	subs	r2, r2, r3
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cc4c:	4b0c      	ldr	r3, [pc, #48]	; (800cc80 <prvHeapInit+0xb4>)
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	4a0a      	ldr	r2, [pc, #40]	; (800cc84 <prvHeapInit+0xb8>)
 800cc5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	4a09      	ldr	r2, [pc, #36]	; (800cc88 <prvHeapInit+0xbc>)
 800cc62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cc64:	4b09      	ldr	r3, [pc, #36]	; (800cc8c <prvHeapInit+0xc0>)
 800cc66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cc6a:	601a      	str	r2, [r3, #0]
}
 800cc6c:	bf00      	nop
 800cc6e:	3714      	adds	r7, #20
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr
 800cc78:	20000dc8 	.word	0x20000dc8
 800cc7c:	200049c8 	.word	0x200049c8
 800cc80:	200049d0 	.word	0x200049d0
 800cc84:	200049d8 	.word	0x200049d8
 800cc88:	200049d4 	.word	0x200049d4
 800cc8c:	200049dc 	.word	0x200049dc

0800cc90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc90:	b480      	push	{r7}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc98:	4b28      	ldr	r3, [pc, #160]	; (800cd3c <prvInsertBlockIntoFreeList+0xac>)
 800cc9a:	60fb      	str	r3, [r7, #12]
 800cc9c:	e002      	b.n	800cca4 <prvInsertBlockIntoFreeList+0x14>
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	60fb      	str	r3, [r7, #12]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d8f7      	bhi.n	800cc9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	68ba      	ldr	r2, [r7, #8]
 800ccb8:	4413      	add	r3, r2
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d108      	bne.n	800ccd2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	685a      	ldr	r2, [r3, #4]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	441a      	add	r2, r3
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	441a      	add	r2, r3
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d118      	bne.n	800cd18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	4b15      	ldr	r3, [pc, #84]	; (800cd40 <prvInsertBlockIntoFreeList+0xb0>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d00d      	beq.n	800cd0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	685a      	ldr	r2, [r3, #4]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	441a      	add	r2, r3
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	601a      	str	r2, [r3, #0]
 800cd0c:	e008      	b.n	800cd20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd0e:	4b0c      	ldr	r3, [pc, #48]	; (800cd40 <prvInsertBlockIntoFreeList+0xb0>)
 800cd10:	681a      	ldr	r2, [r3, #0]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	601a      	str	r2, [r3, #0]
 800cd16:	e003      	b.n	800cd20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd20:	68fa      	ldr	r2, [r7, #12]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d002      	beq.n	800cd2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd2e:	bf00      	nop
 800cd30:	3714      	adds	r7, #20
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr
 800cd3a:	bf00      	nop
 800cd3c:	200049c8 	.word	0x200049c8
 800cd40:	200049d0 	.word	0x200049d0

0800cd44 <__errno>:
 800cd44:	4b01      	ldr	r3, [pc, #4]	; (800cd4c <__errno+0x8>)
 800cd46:	6818      	ldr	r0, [r3, #0]
 800cd48:	4770      	bx	lr
 800cd4a:	bf00      	nop
 800cd4c:	2000004c 	.word	0x2000004c

0800cd50 <__libc_init_array>:
 800cd50:	b570      	push	{r4, r5, r6, lr}
 800cd52:	4d0d      	ldr	r5, [pc, #52]	; (800cd88 <__libc_init_array+0x38>)
 800cd54:	4c0d      	ldr	r4, [pc, #52]	; (800cd8c <__libc_init_array+0x3c>)
 800cd56:	1b64      	subs	r4, r4, r5
 800cd58:	10a4      	asrs	r4, r4, #2
 800cd5a:	2600      	movs	r6, #0
 800cd5c:	42a6      	cmp	r6, r4
 800cd5e:	d109      	bne.n	800cd74 <__libc_init_array+0x24>
 800cd60:	4d0b      	ldr	r5, [pc, #44]	; (800cd90 <__libc_init_array+0x40>)
 800cd62:	4c0c      	ldr	r4, [pc, #48]	; (800cd94 <__libc_init_array+0x44>)
 800cd64:	f000 fcf8 	bl	800d758 <_init>
 800cd68:	1b64      	subs	r4, r4, r5
 800cd6a:	10a4      	asrs	r4, r4, #2
 800cd6c:	2600      	movs	r6, #0
 800cd6e:	42a6      	cmp	r6, r4
 800cd70:	d105      	bne.n	800cd7e <__libc_init_array+0x2e>
 800cd72:	bd70      	pop	{r4, r5, r6, pc}
 800cd74:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd78:	4798      	blx	r3
 800cd7a:	3601      	adds	r6, #1
 800cd7c:	e7ee      	b.n	800cd5c <__libc_init_array+0xc>
 800cd7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd82:	4798      	blx	r3
 800cd84:	3601      	adds	r6, #1
 800cd86:	e7f2      	b.n	800cd6e <__libc_init_array+0x1e>
 800cd88:	0801243c 	.word	0x0801243c
 800cd8c:	0801243c 	.word	0x0801243c
 800cd90:	0801243c 	.word	0x0801243c
 800cd94:	08012440 	.word	0x08012440

0800cd98 <__retarget_lock_acquire_recursive>:
 800cd98:	4770      	bx	lr

0800cd9a <__retarget_lock_release_recursive>:
 800cd9a:	4770      	bx	lr

0800cd9c <memcpy>:
 800cd9c:	440a      	add	r2, r1
 800cd9e:	4291      	cmp	r1, r2
 800cda0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cda4:	d100      	bne.n	800cda8 <memcpy+0xc>
 800cda6:	4770      	bx	lr
 800cda8:	b510      	push	{r4, lr}
 800cdaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdb2:	4291      	cmp	r1, r2
 800cdb4:	d1f9      	bne.n	800cdaa <memcpy+0xe>
 800cdb6:	bd10      	pop	{r4, pc}

0800cdb8 <memset>:
 800cdb8:	4402      	add	r2, r0
 800cdba:	4603      	mov	r3, r0
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d100      	bne.n	800cdc2 <memset+0xa>
 800cdc0:	4770      	bx	lr
 800cdc2:	f803 1b01 	strb.w	r1, [r3], #1
 800cdc6:	e7f9      	b.n	800cdbc <memset+0x4>

0800cdc8 <sbrk_aligned>:
 800cdc8:	b570      	push	{r4, r5, r6, lr}
 800cdca:	4e0e      	ldr	r6, [pc, #56]	; (800ce04 <sbrk_aligned+0x3c>)
 800cdcc:	460c      	mov	r4, r1
 800cdce:	6831      	ldr	r1, [r6, #0]
 800cdd0:	4605      	mov	r5, r0
 800cdd2:	b911      	cbnz	r1, 800cdda <sbrk_aligned+0x12>
 800cdd4:	f000 f8f6 	bl	800cfc4 <_sbrk_r>
 800cdd8:	6030      	str	r0, [r6, #0]
 800cdda:	4621      	mov	r1, r4
 800cddc:	4628      	mov	r0, r5
 800cdde:	f000 f8f1 	bl	800cfc4 <_sbrk_r>
 800cde2:	1c43      	adds	r3, r0, #1
 800cde4:	d00a      	beq.n	800cdfc <sbrk_aligned+0x34>
 800cde6:	1cc4      	adds	r4, r0, #3
 800cde8:	f024 0403 	bic.w	r4, r4, #3
 800cdec:	42a0      	cmp	r0, r4
 800cdee:	d007      	beq.n	800ce00 <sbrk_aligned+0x38>
 800cdf0:	1a21      	subs	r1, r4, r0
 800cdf2:	4628      	mov	r0, r5
 800cdf4:	f000 f8e6 	bl	800cfc4 <_sbrk_r>
 800cdf8:	3001      	adds	r0, #1
 800cdfa:	d101      	bne.n	800ce00 <sbrk_aligned+0x38>
 800cdfc:	f04f 34ff 	mov.w	r4, #4294967295
 800ce00:	4620      	mov	r0, r4
 800ce02:	bd70      	pop	{r4, r5, r6, pc}
 800ce04:	200049e8 	.word	0x200049e8

0800ce08 <_malloc_r>:
 800ce08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce0c:	1ccd      	adds	r5, r1, #3
 800ce0e:	f025 0503 	bic.w	r5, r5, #3
 800ce12:	3508      	adds	r5, #8
 800ce14:	2d0c      	cmp	r5, #12
 800ce16:	bf38      	it	cc
 800ce18:	250c      	movcc	r5, #12
 800ce1a:	2d00      	cmp	r5, #0
 800ce1c:	4607      	mov	r7, r0
 800ce1e:	db01      	blt.n	800ce24 <_malloc_r+0x1c>
 800ce20:	42a9      	cmp	r1, r5
 800ce22:	d905      	bls.n	800ce30 <_malloc_r+0x28>
 800ce24:	230c      	movs	r3, #12
 800ce26:	603b      	str	r3, [r7, #0]
 800ce28:	2600      	movs	r6, #0
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce30:	4e2e      	ldr	r6, [pc, #184]	; (800ceec <_malloc_r+0xe4>)
 800ce32:	f000 f8f7 	bl	800d024 <__malloc_lock>
 800ce36:	6833      	ldr	r3, [r6, #0]
 800ce38:	461c      	mov	r4, r3
 800ce3a:	bb34      	cbnz	r4, 800ce8a <_malloc_r+0x82>
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	4638      	mov	r0, r7
 800ce40:	f7ff ffc2 	bl	800cdc8 <sbrk_aligned>
 800ce44:	1c43      	adds	r3, r0, #1
 800ce46:	4604      	mov	r4, r0
 800ce48:	d14d      	bne.n	800cee6 <_malloc_r+0xde>
 800ce4a:	6834      	ldr	r4, [r6, #0]
 800ce4c:	4626      	mov	r6, r4
 800ce4e:	2e00      	cmp	r6, #0
 800ce50:	d140      	bne.n	800ced4 <_malloc_r+0xcc>
 800ce52:	6823      	ldr	r3, [r4, #0]
 800ce54:	4631      	mov	r1, r6
 800ce56:	4638      	mov	r0, r7
 800ce58:	eb04 0803 	add.w	r8, r4, r3
 800ce5c:	f000 f8b2 	bl	800cfc4 <_sbrk_r>
 800ce60:	4580      	cmp	r8, r0
 800ce62:	d13a      	bne.n	800ceda <_malloc_r+0xd2>
 800ce64:	6821      	ldr	r1, [r4, #0]
 800ce66:	3503      	adds	r5, #3
 800ce68:	1a6d      	subs	r5, r5, r1
 800ce6a:	f025 0503 	bic.w	r5, r5, #3
 800ce6e:	3508      	adds	r5, #8
 800ce70:	2d0c      	cmp	r5, #12
 800ce72:	bf38      	it	cc
 800ce74:	250c      	movcc	r5, #12
 800ce76:	4629      	mov	r1, r5
 800ce78:	4638      	mov	r0, r7
 800ce7a:	f7ff ffa5 	bl	800cdc8 <sbrk_aligned>
 800ce7e:	3001      	adds	r0, #1
 800ce80:	d02b      	beq.n	800ceda <_malloc_r+0xd2>
 800ce82:	6823      	ldr	r3, [r4, #0]
 800ce84:	442b      	add	r3, r5
 800ce86:	6023      	str	r3, [r4, #0]
 800ce88:	e00e      	b.n	800cea8 <_malloc_r+0xa0>
 800ce8a:	6822      	ldr	r2, [r4, #0]
 800ce8c:	1b52      	subs	r2, r2, r5
 800ce8e:	d41e      	bmi.n	800cece <_malloc_r+0xc6>
 800ce90:	2a0b      	cmp	r2, #11
 800ce92:	d916      	bls.n	800cec2 <_malloc_r+0xba>
 800ce94:	1961      	adds	r1, r4, r5
 800ce96:	42a3      	cmp	r3, r4
 800ce98:	6025      	str	r5, [r4, #0]
 800ce9a:	bf18      	it	ne
 800ce9c:	6059      	strne	r1, [r3, #4]
 800ce9e:	6863      	ldr	r3, [r4, #4]
 800cea0:	bf08      	it	eq
 800cea2:	6031      	streq	r1, [r6, #0]
 800cea4:	5162      	str	r2, [r4, r5]
 800cea6:	604b      	str	r3, [r1, #4]
 800cea8:	4638      	mov	r0, r7
 800ceaa:	f104 060b 	add.w	r6, r4, #11
 800ceae:	f000 f8bf 	bl	800d030 <__malloc_unlock>
 800ceb2:	f026 0607 	bic.w	r6, r6, #7
 800ceb6:	1d23      	adds	r3, r4, #4
 800ceb8:	1af2      	subs	r2, r6, r3
 800ceba:	d0b6      	beq.n	800ce2a <_malloc_r+0x22>
 800cebc:	1b9b      	subs	r3, r3, r6
 800cebe:	50a3      	str	r3, [r4, r2]
 800cec0:	e7b3      	b.n	800ce2a <_malloc_r+0x22>
 800cec2:	6862      	ldr	r2, [r4, #4]
 800cec4:	42a3      	cmp	r3, r4
 800cec6:	bf0c      	ite	eq
 800cec8:	6032      	streq	r2, [r6, #0]
 800ceca:	605a      	strne	r2, [r3, #4]
 800cecc:	e7ec      	b.n	800cea8 <_malloc_r+0xa0>
 800cece:	4623      	mov	r3, r4
 800ced0:	6864      	ldr	r4, [r4, #4]
 800ced2:	e7b2      	b.n	800ce3a <_malloc_r+0x32>
 800ced4:	4634      	mov	r4, r6
 800ced6:	6876      	ldr	r6, [r6, #4]
 800ced8:	e7b9      	b.n	800ce4e <_malloc_r+0x46>
 800ceda:	230c      	movs	r3, #12
 800cedc:	603b      	str	r3, [r7, #0]
 800cede:	4638      	mov	r0, r7
 800cee0:	f000 f8a6 	bl	800d030 <__malloc_unlock>
 800cee4:	e7a1      	b.n	800ce2a <_malloc_r+0x22>
 800cee6:	6025      	str	r5, [r4, #0]
 800cee8:	e7de      	b.n	800cea8 <_malloc_r+0xa0>
 800ceea:	bf00      	nop
 800ceec:	200049e4 	.word	0x200049e4

0800cef0 <cleanup_glue>:
 800cef0:	b538      	push	{r3, r4, r5, lr}
 800cef2:	460c      	mov	r4, r1
 800cef4:	6809      	ldr	r1, [r1, #0]
 800cef6:	4605      	mov	r5, r0
 800cef8:	b109      	cbz	r1, 800cefe <cleanup_glue+0xe>
 800cefa:	f7ff fff9 	bl	800cef0 <cleanup_glue>
 800cefe:	4621      	mov	r1, r4
 800cf00:	4628      	mov	r0, r5
 800cf02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf06:	f000 b899 	b.w	800d03c <_free_r>
	...

0800cf0c <_reclaim_reent>:
 800cf0c:	4b2c      	ldr	r3, [pc, #176]	; (800cfc0 <_reclaim_reent+0xb4>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4283      	cmp	r3, r0
 800cf12:	b570      	push	{r4, r5, r6, lr}
 800cf14:	4604      	mov	r4, r0
 800cf16:	d051      	beq.n	800cfbc <_reclaim_reent+0xb0>
 800cf18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cf1a:	b143      	cbz	r3, 800cf2e <_reclaim_reent+0x22>
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d14a      	bne.n	800cfb8 <_reclaim_reent+0xac>
 800cf22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf24:	6819      	ldr	r1, [r3, #0]
 800cf26:	b111      	cbz	r1, 800cf2e <_reclaim_reent+0x22>
 800cf28:	4620      	mov	r0, r4
 800cf2a:	f000 f887 	bl	800d03c <_free_r>
 800cf2e:	6961      	ldr	r1, [r4, #20]
 800cf30:	b111      	cbz	r1, 800cf38 <_reclaim_reent+0x2c>
 800cf32:	4620      	mov	r0, r4
 800cf34:	f000 f882 	bl	800d03c <_free_r>
 800cf38:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cf3a:	b111      	cbz	r1, 800cf42 <_reclaim_reent+0x36>
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	f000 f87d 	bl	800d03c <_free_r>
 800cf42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cf44:	b111      	cbz	r1, 800cf4c <_reclaim_reent+0x40>
 800cf46:	4620      	mov	r0, r4
 800cf48:	f000 f878 	bl	800d03c <_free_r>
 800cf4c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cf4e:	b111      	cbz	r1, 800cf56 <_reclaim_reent+0x4a>
 800cf50:	4620      	mov	r0, r4
 800cf52:	f000 f873 	bl	800d03c <_free_r>
 800cf56:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cf58:	b111      	cbz	r1, 800cf60 <_reclaim_reent+0x54>
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f000 f86e 	bl	800d03c <_free_r>
 800cf60:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cf62:	b111      	cbz	r1, 800cf6a <_reclaim_reent+0x5e>
 800cf64:	4620      	mov	r0, r4
 800cf66:	f000 f869 	bl	800d03c <_free_r>
 800cf6a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cf6c:	b111      	cbz	r1, 800cf74 <_reclaim_reent+0x68>
 800cf6e:	4620      	mov	r0, r4
 800cf70:	f000 f864 	bl	800d03c <_free_r>
 800cf74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf76:	b111      	cbz	r1, 800cf7e <_reclaim_reent+0x72>
 800cf78:	4620      	mov	r0, r4
 800cf7a:	f000 f85f 	bl	800d03c <_free_r>
 800cf7e:	69a3      	ldr	r3, [r4, #24]
 800cf80:	b1e3      	cbz	r3, 800cfbc <_reclaim_reent+0xb0>
 800cf82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cf84:	4620      	mov	r0, r4
 800cf86:	4798      	blx	r3
 800cf88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cf8a:	b1b9      	cbz	r1, 800cfbc <_reclaim_reent+0xb0>
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf92:	f7ff bfad 	b.w	800cef0 <cleanup_glue>
 800cf96:	5949      	ldr	r1, [r1, r5]
 800cf98:	b941      	cbnz	r1, 800cfac <_reclaim_reent+0xa0>
 800cf9a:	3504      	adds	r5, #4
 800cf9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf9e:	2d80      	cmp	r5, #128	; 0x80
 800cfa0:	68d9      	ldr	r1, [r3, #12]
 800cfa2:	d1f8      	bne.n	800cf96 <_reclaim_reent+0x8a>
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f000 f849 	bl	800d03c <_free_r>
 800cfaa:	e7ba      	b.n	800cf22 <_reclaim_reent+0x16>
 800cfac:	680e      	ldr	r6, [r1, #0]
 800cfae:	4620      	mov	r0, r4
 800cfb0:	f000 f844 	bl	800d03c <_free_r>
 800cfb4:	4631      	mov	r1, r6
 800cfb6:	e7ef      	b.n	800cf98 <_reclaim_reent+0x8c>
 800cfb8:	2500      	movs	r5, #0
 800cfba:	e7ef      	b.n	800cf9c <_reclaim_reent+0x90>
 800cfbc:	bd70      	pop	{r4, r5, r6, pc}
 800cfbe:	bf00      	nop
 800cfc0:	2000004c 	.word	0x2000004c

0800cfc4 <_sbrk_r>:
 800cfc4:	b538      	push	{r3, r4, r5, lr}
 800cfc6:	4d06      	ldr	r5, [pc, #24]	; (800cfe0 <_sbrk_r+0x1c>)
 800cfc8:	2300      	movs	r3, #0
 800cfca:	4604      	mov	r4, r0
 800cfcc:	4608      	mov	r0, r1
 800cfce:	602b      	str	r3, [r5, #0]
 800cfd0:	f7f7 f986 	bl	80042e0 <_sbrk>
 800cfd4:	1c43      	adds	r3, r0, #1
 800cfd6:	d102      	bne.n	800cfde <_sbrk_r+0x1a>
 800cfd8:	682b      	ldr	r3, [r5, #0]
 800cfda:	b103      	cbz	r3, 800cfde <_sbrk_r+0x1a>
 800cfdc:	6023      	str	r3, [r4, #0]
 800cfde:	bd38      	pop	{r3, r4, r5, pc}
 800cfe0:	200049ec 	.word	0x200049ec

0800cfe4 <siprintf>:
 800cfe4:	b40e      	push	{r1, r2, r3}
 800cfe6:	b500      	push	{lr}
 800cfe8:	b09c      	sub	sp, #112	; 0x70
 800cfea:	ab1d      	add	r3, sp, #116	; 0x74
 800cfec:	9002      	str	r0, [sp, #8]
 800cfee:	9006      	str	r0, [sp, #24]
 800cff0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cff4:	4809      	ldr	r0, [pc, #36]	; (800d01c <siprintf+0x38>)
 800cff6:	9107      	str	r1, [sp, #28]
 800cff8:	9104      	str	r1, [sp, #16]
 800cffa:	4909      	ldr	r1, [pc, #36]	; (800d020 <siprintf+0x3c>)
 800cffc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d000:	9105      	str	r1, [sp, #20]
 800d002:	6800      	ldr	r0, [r0, #0]
 800d004:	9301      	str	r3, [sp, #4]
 800d006:	a902      	add	r1, sp, #8
 800d008:	f000 f8c0 	bl	800d18c <_svfiprintf_r>
 800d00c:	9b02      	ldr	r3, [sp, #8]
 800d00e:	2200      	movs	r2, #0
 800d010:	701a      	strb	r2, [r3, #0]
 800d012:	b01c      	add	sp, #112	; 0x70
 800d014:	f85d eb04 	ldr.w	lr, [sp], #4
 800d018:	b003      	add	sp, #12
 800d01a:	4770      	bx	lr
 800d01c:	2000004c 	.word	0x2000004c
 800d020:	ffff0208 	.word	0xffff0208

0800d024 <__malloc_lock>:
 800d024:	4801      	ldr	r0, [pc, #4]	; (800d02c <__malloc_lock+0x8>)
 800d026:	f7ff beb7 	b.w	800cd98 <__retarget_lock_acquire_recursive>
 800d02a:	bf00      	nop
 800d02c:	200049e0 	.word	0x200049e0

0800d030 <__malloc_unlock>:
 800d030:	4801      	ldr	r0, [pc, #4]	; (800d038 <__malloc_unlock+0x8>)
 800d032:	f7ff beb2 	b.w	800cd9a <__retarget_lock_release_recursive>
 800d036:	bf00      	nop
 800d038:	200049e0 	.word	0x200049e0

0800d03c <_free_r>:
 800d03c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d03e:	2900      	cmp	r1, #0
 800d040:	d044      	beq.n	800d0cc <_free_r+0x90>
 800d042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d046:	9001      	str	r0, [sp, #4]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f1a1 0404 	sub.w	r4, r1, #4
 800d04e:	bfb8      	it	lt
 800d050:	18e4      	addlt	r4, r4, r3
 800d052:	f7ff ffe7 	bl	800d024 <__malloc_lock>
 800d056:	4a1e      	ldr	r2, [pc, #120]	; (800d0d0 <_free_r+0x94>)
 800d058:	9801      	ldr	r0, [sp, #4]
 800d05a:	6813      	ldr	r3, [r2, #0]
 800d05c:	b933      	cbnz	r3, 800d06c <_free_r+0x30>
 800d05e:	6063      	str	r3, [r4, #4]
 800d060:	6014      	str	r4, [r2, #0]
 800d062:	b003      	add	sp, #12
 800d064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d068:	f7ff bfe2 	b.w	800d030 <__malloc_unlock>
 800d06c:	42a3      	cmp	r3, r4
 800d06e:	d908      	bls.n	800d082 <_free_r+0x46>
 800d070:	6825      	ldr	r5, [r4, #0]
 800d072:	1961      	adds	r1, r4, r5
 800d074:	428b      	cmp	r3, r1
 800d076:	bf01      	itttt	eq
 800d078:	6819      	ldreq	r1, [r3, #0]
 800d07a:	685b      	ldreq	r3, [r3, #4]
 800d07c:	1949      	addeq	r1, r1, r5
 800d07e:	6021      	streq	r1, [r4, #0]
 800d080:	e7ed      	b.n	800d05e <_free_r+0x22>
 800d082:	461a      	mov	r2, r3
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	b10b      	cbz	r3, 800d08c <_free_r+0x50>
 800d088:	42a3      	cmp	r3, r4
 800d08a:	d9fa      	bls.n	800d082 <_free_r+0x46>
 800d08c:	6811      	ldr	r1, [r2, #0]
 800d08e:	1855      	adds	r5, r2, r1
 800d090:	42a5      	cmp	r5, r4
 800d092:	d10b      	bne.n	800d0ac <_free_r+0x70>
 800d094:	6824      	ldr	r4, [r4, #0]
 800d096:	4421      	add	r1, r4
 800d098:	1854      	adds	r4, r2, r1
 800d09a:	42a3      	cmp	r3, r4
 800d09c:	6011      	str	r1, [r2, #0]
 800d09e:	d1e0      	bne.n	800d062 <_free_r+0x26>
 800d0a0:	681c      	ldr	r4, [r3, #0]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	6053      	str	r3, [r2, #4]
 800d0a6:	4421      	add	r1, r4
 800d0a8:	6011      	str	r1, [r2, #0]
 800d0aa:	e7da      	b.n	800d062 <_free_r+0x26>
 800d0ac:	d902      	bls.n	800d0b4 <_free_r+0x78>
 800d0ae:	230c      	movs	r3, #12
 800d0b0:	6003      	str	r3, [r0, #0]
 800d0b2:	e7d6      	b.n	800d062 <_free_r+0x26>
 800d0b4:	6825      	ldr	r5, [r4, #0]
 800d0b6:	1961      	adds	r1, r4, r5
 800d0b8:	428b      	cmp	r3, r1
 800d0ba:	bf04      	itt	eq
 800d0bc:	6819      	ldreq	r1, [r3, #0]
 800d0be:	685b      	ldreq	r3, [r3, #4]
 800d0c0:	6063      	str	r3, [r4, #4]
 800d0c2:	bf04      	itt	eq
 800d0c4:	1949      	addeq	r1, r1, r5
 800d0c6:	6021      	streq	r1, [r4, #0]
 800d0c8:	6054      	str	r4, [r2, #4]
 800d0ca:	e7ca      	b.n	800d062 <_free_r+0x26>
 800d0cc:	b003      	add	sp, #12
 800d0ce:	bd30      	pop	{r4, r5, pc}
 800d0d0:	200049e4 	.word	0x200049e4

0800d0d4 <__ssputs_r>:
 800d0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0d8:	688e      	ldr	r6, [r1, #8]
 800d0da:	429e      	cmp	r6, r3
 800d0dc:	4682      	mov	sl, r0
 800d0de:	460c      	mov	r4, r1
 800d0e0:	4690      	mov	r8, r2
 800d0e2:	461f      	mov	r7, r3
 800d0e4:	d838      	bhi.n	800d158 <__ssputs_r+0x84>
 800d0e6:	898a      	ldrh	r2, [r1, #12]
 800d0e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d0ec:	d032      	beq.n	800d154 <__ssputs_r+0x80>
 800d0ee:	6825      	ldr	r5, [r4, #0]
 800d0f0:	6909      	ldr	r1, [r1, #16]
 800d0f2:	eba5 0901 	sub.w	r9, r5, r1
 800d0f6:	6965      	ldr	r5, [r4, #20]
 800d0f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d100:	3301      	adds	r3, #1
 800d102:	444b      	add	r3, r9
 800d104:	106d      	asrs	r5, r5, #1
 800d106:	429d      	cmp	r5, r3
 800d108:	bf38      	it	cc
 800d10a:	461d      	movcc	r5, r3
 800d10c:	0553      	lsls	r3, r2, #21
 800d10e:	d531      	bpl.n	800d174 <__ssputs_r+0xa0>
 800d110:	4629      	mov	r1, r5
 800d112:	f7ff fe79 	bl	800ce08 <_malloc_r>
 800d116:	4606      	mov	r6, r0
 800d118:	b950      	cbnz	r0, 800d130 <__ssputs_r+0x5c>
 800d11a:	230c      	movs	r3, #12
 800d11c:	f8ca 3000 	str.w	r3, [sl]
 800d120:	89a3      	ldrh	r3, [r4, #12]
 800d122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d126:	81a3      	strh	r3, [r4, #12]
 800d128:	f04f 30ff 	mov.w	r0, #4294967295
 800d12c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d130:	6921      	ldr	r1, [r4, #16]
 800d132:	464a      	mov	r2, r9
 800d134:	f7ff fe32 	bl	800cd9c <memcpy>
 800d138:	89a3      	ldrh	r3, [r4, #12]
 800d13a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d13e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d142:	81a3      	strh	r3, [r4, #12]
 800d144:	6126      	str	r6, [r4, #16]
 800d146:	6165      	str	r5, [r4, #20]
 800d148:	444e      	add	r6, r9
 800d14a:	eba5 0509 	sub.w	r5, r5, r9
 800d14e:	6026      	str	r6, [r4, #0]
 800d150:	60a5      	str	r5, [r4, #8]
 800d152:	463e      	mov	r6, r7
 800d154:	42be      	cmp	r6, r7
 800d156:	d900      	bls.n	800d15a <__ssputs_r+0x86>
 800d158:	463e      	mov	r6, r7
 800d15a:	6820      	ldr	r0, [r4, #0]
 800d15c:	4632      	mov	r2, r6
 800d15e:	4641      	mov	r1, r8
 800d160:	f000 faa8 	bl	800d6b4 <memmove>
 800d164:	68a3      	ldr	r3, [r4, #8]
 800d166:	1b9b      	subs	r3, r3, r6
 800d168:	60a3      	str	r3, [r4, #8]
 800d16a:	6823      	ldr	r3, [r4, #0]
 800d16c:	4433      	add	r3, r6
 800d16e:	6023      	str	r3, [r4, #0]
 800d170:	2000      	movs	r0, #0
 800d172:	e7db      	b.n	800d12c <__ssputs_r+0x58>
 800d174:	462a      	mov	r2, r5
 800d176:	f000 fab7 	bl	800d6e8 <_realloc_r>
 800d17a:	4606      	mov	r6, r0
 800d17c:	2800      	cmp	r0, #0
 800d17e:	d1e1      	bne.n	800d144 <__ssputs_r+0x70>
 800d180:	6921      	ldr	r1, [r4, #16]
 800d182:	4650      	mov	r0, sl
 800d184:	f7ff ff5a 	bl	800d03c <_free_r>
 800d188:	e7c7      	b.n	800d11a <__ssputs_r+0x46>
	...

0800d18c <_svfiprintf_r>:
 800d18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d190:	4698      	mov	r8, r3
 800d192:	898b      	ldrh	r3, [r1, #12]
 800d194:	061b      	lsls	r3, r3, #24
 800d196:	b09d      	sub	sp, #116	; 0x74
 800d198:	4607      	mov	r7, r0
 800d19a:	460d      	mov	r5, r1
 800d19c:	4614      	mov	r4, r2
 800d19e:	d50e      	bpl.n	800d1be <_svfiprintf_r+0x32>
 800d1a0:	690b      	ldr	r3, [r1, #16]
 800d1a2:	b963      	cbnz	r3, 800d1be <_svfiprintf_r+0x32>
 800d1a4:	2140      	movs	r1, #64	; 0x40
 800d1a6:	f7ff fe2f 	bl	800ce08 <_malloc_r>
 800d1aa:	6028      	str	r0, [r5, #0]
 800d1ac:	6128      	str	r0, [r5, #16]
 800d1ae:	b920      	cbnz	r0, 800d1ba <_svfiprintf_r+0x2e>
 800d1b0:	230c      	movs	r3, #12
 800d1b2:	603b      	str	r3, [r7, #0]
 800d1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b8:	e0d1      	b.n	800d35e <_svfiprintf_r+0x1d2>
 800d1ba:	2340      	movs	r3, #64	; 0x40
 800d1bc:	616b      	str	r3, [r5, #20]
 800d1be:	2300      	movs	r3, #0
 800d1c0:	9309      	str	r3, [sp, #36]	; 0x24
 800d1c2:	2320      	movs	r3, #32
 800d1c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1cc:	2330      	movs	r3, #48	; 0x30
 800d1ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d378 <_svfiprintf_r+0x1ec>
 800d1d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1d6:	f04f 0901 	mov.w	r9, #1
 800d1da:	4623      	mov	r3, r4
 800d1dc:	469a      	mov	sl, r3
 800d1de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1e2:	b10a      	cbz	r2, 800d1e8 <_svfiprintf_r+0x5c>
 800d1e4:	2a25      	cmp	r2, #37	; 0x25
 800d1e6:	d1f9      	bne.n	800d1dc <_svfiprintf_r+0x50>
 800d1e8:	ebba 0b04 	subs.w	fp, sl, r4
 800d1ec:	d00b      	beq.n	800d206 <_svfiprintf_r+0x7a>
 800d1ee:	465b      	mov	r3, fp
 800d1f0:	4622      	mov	r2, r4
 800d1f2:	4629      	mov	r1, r5
 800d1f4:	4638      	mov	r0, r7
 800d1f6:	f7ff ff6d 	bl	800d0d4 <__ssputs_r>
 800d1fa:	3001      	adds	r0, #1
 800d1fc:	f000 80aa 	beq.w	800d354 <_svfiprintf_r+0x1c8>
 800d200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d202:	445a      	add	r2, fp
 800d204:	9209      	str	r2, [sp, #36]	; 0x24
 800d206:	f89a 3000 	ldrb.w	r3, [sl]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	f000 80a2 	beq.w	800d354 <_svfiprintf_r+0x1c8>
 800d210:	2300      	movs	r3, #0
 800d212:	f04f 32ff 	mov.w	r2, #4294967295
 800d216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d21a:	f10a 0a01 	add.w	sl, sl, #1
 800d21e:	9304      	str	r3, [sp, #16]
 800d220:	9307      	str	r3, [sp, #28]
 800d222:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d226:	931a      	str	r3, [sp, #104]	; 0x68
 800d228:	4654      	mov	r4, sl
 800d22a:	2205      	movs	r2, #5
 800d22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d230:	4851      	ldr	r0, [pc, #324]	; (800d378 <_svfiprintf_r+0x1ec>)
 800d232:	f7f2 ffed 	bl	8000210 <memchr>
 800d236:	9a04      	ldr	r2, [sp, #16]
 800d238:	b9d8      	cbnz	r0, 800d272 <_svfiprintf_r+0xe6>
 800d23a:	06d0      	lsls	r0, r2, #27
 800d23c:	bf44      	itt	mi
 800d23e:	2320      	movmi	r3, #32
 800d240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d244:	0711      	lsls	r1, r2, #28
 800d246:	bf44      	itt	mi
 800d248:	232b      	movmi	r3, #43	; 0x2b
 800d24a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d24e:	f89a 3000 	ldrb.w	r3, [sl]
 800d252:	2b2a      	cmp	r3, #42	; 0x2a
 800d254:	d015      	beq.n	800d282 <_svfiprintf_r+0xf6>
 800d256:	9a07      	ldr	r2, [sp, #28]
 800d258:	4654      	mov	r4, sl
 800d25a:	2000      	movs	r0, #0
 800d25c:	f04f 0c0a 	mov.w	ip, #10
 800d260:	4621      	mov	r1, r4
 800d262:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d266:	3b30      	subs	r3, #48	; 0x30
 800d268:	2b09      	cmp	r3, #9
 800d26a:	d94e      	bls.n	800d30a <_svfiprintf_r+0x17e>
 800d26c:	b1b0      	cbz	r0, 800d29c <_svfiprintf_r+0x110>
 800d26e:	9207      	str	r2, [sp, #28]
 800d270:	e014      	b.n	800d29c <_svfiprintf_r+0x110>
 800d272:	eba0 0308 	sub.w	r3, r0, r8
 800d276:	fa09 f303 	lsl.w	r3, r9, r3
 800d27a:	4313      	orrs	r3, r2
 800d27c:	9304      	str	r3, [sp, #16]
 800d27e:	46a2      	mov	sl, r4
 800d280:	e7d2      	b.n	800d228 <_svfiprintf_r+0x9c>
 800d282:	9b03      	ldr	r3, [sp, #12]
 800d284:	1d19      	adds	r1, r3, #4
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	9103      	str	r1, [sp, #12]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	bfbb      	ittet	lt
 800d28e:	425b      	neglt	r3, r3
 800d290:	f042 0202 	orrlt.w	r2, r2, #2
 800d294:	9307      	strge	r3, [sp, #28]
 800d296:	9307      	strlt	r3, [sp, #28]
 800d298:	bfb8      	it	lt
 800d29a:	9204      	strlt	r2, [sp, #16]
 800d29c:	7823      	ldrb	r3, [r4, #0]
 800d29e:	2b2e      	cmp	r3, #46	; 0x2e
 800d2a0:	d10c      	bne.n	800d2bc <_svfiprintf_r+0x130>
 800d2a2:	7863      	ldrb	r3, [r4, #1]
 800d2a4:	2b2a      	cmp	r3, #42	; 0x2a
 800d2a6:	d135      	bne.n	800d314 <_svfiprintf_r+0x188>
 800d2a8:	9b03      	ldr	r3, [sp, #12]
 800d2aa:	1d1a      	adds	r2, r3, #4
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	9203      	str	r2, [sp, #12]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	bfb8      	it	lt
 800d2b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2b8:	3402      	adds	r4, #2
 800d2ba:	9305      	str	r3, [sp, #20]
 800d2bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d388 <_svfiprintf_r+0x1fc>
 800d2c0:	7821      	ldrb	r1, [r4, #0]
 800d2c2:	2203      	movs	r2, #3
 800d2c4:	4650      	mov	r0, sl
 800d2c6:	f7f2 ffa3 	bl	8000210 <memchr>
 800d2ca:	b140      	cbz	r0, 800d2de <_svfiprintf_r+0x152>
 800d2cc:	2340      	movs	r3, #64	; 0x40
 800d2ce:	eba0 000a 	sub.w	r0, r0, sl
 800d2d2:	fa03 f000 	lsl.w	r0, r3, r0
 800d2d6:	9b04      	ldr	r3, [sp, #16]
 800d2d8:	4303      	orrs	r3, r0
 800d2da:	3401      	adds	r4, #1
 800d2dc:	9304      	str	r3, [sp, #16]
 800d2de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2e2:	4826      	ldr	r0, [pc, #152]	; (800d37c <_svfiprintf_r+0x1f0>)
 800d2e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2e8:	2206      	movs	r2, #6
 800d2ea:	f7f2 ff91 	bl	8000210 <memchr>
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	d038      	beq.n	800d364 <_svfiprintf_r+0x1d8>
 800d2f2:	4b23      	ldr	r3, [pc, #140]	; (800d380 <_svfiprintf_r+0x1f4>)
 800d2f4:	bb1b      	cbnz	r3, 800d33e <_svfiprintf_r+0x1b2>
 800d2f6:	9b03      	ldr	r3, [sp, #12]
 800d2f8:	3307      	adds	r3, #7
 800d2fa:	f023 0307 	bic.w	r3, r3, #7
 800d2fe:	3308      	adds	r3, #8
 800d300:	9303      	str	r3, [sp, #12]
 800d302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d304:	4433      	add	r3, r6
 800d306:	9309      	str	r3, [sp, #36]	; 0x24
 800d308:	e767      	b.n	800d1da <_svfiprintf_r+0x4e>
 800d30a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d30e:	460c      	mov	r4, r1
 800d310:	2001      	movs	r0, #1
 800d312:	e7a5      	b.n	800d260 <_svfiprintf_r+0xd4>
 800d314:	2300      	movs	r3, #0
 800d316:	3401      	adds	r4, #1
 800d318:	9305      	str	r3, [sp, #20]
 800d31a:	4619      	mov	r1, r3
 800d31c:	f04f 0c0a 	mov.w	ip, #10
 800d320:	4620      	mov	r0, r4
 800d322:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d326:	3a30      	subs	r2, #48	; 0x30
 800d328:	2a09      	cmp	r2, #9
 800d32a:	d903      	bls.n	800d334 <_svfiprintf_r+0x1a8>
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d0c5      	beq.n	800d2bc <_svfiprintf_r+0x130>
 800d330:	9105      	str	r1, [sp, #20]
 800d332:	e7c3      	b.n	800d2bc <_svfiprintf_r+0x130>
 800d334:	fb0c 2101 	mla	r1, ip, r1, r2
 800d338:	4604      	mov	r4, r0
 800d33a:	2301      	movs	r3, #1
 800d33c:	e7f0      	b.n	800d320 <_svfiprintf_r+0x194>
 800d33e:	ab03      	add	r3, sp, #12
 800d340:	9300      	str	r3, [sp, #0]
 800d342:	462a      	mov	r2, r5
 800d344:	4b0f      	ldr	r3, [pc, #60]	; (800d384 <_svfiprintf_r+0x1f8>)
 800d346:	a904      	add	r1, sp, #16
 800d348:	4638      	mov	r0, r7
 800d34a:	f3af 8000 	nop.w
 800d34e:	1c42      	adds	r2, r0, #1
 800d350:	4606      	mov	r6, r0
 800d352:	d1d6      	bne.n	800d302 <_svfiprintf_r+0x176>
 800d354:	89ab      	ldrh	r3, [r5, #12]
 800d356:	065b      	lsls	r3, r3, #25
 800d358:	f53f af2c 	bmi.w	800d1b4 <_svfiprintf_r+0x28>
 800d35c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d35e:	b01d      	add	sp, #116	; 0x74
 800d360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d364:	ab03      	add	r3, sp, #12
 800d366:	9300      	str	r3, [sp, #0]
 800d368:	462a      	mov	r2, r5
 800d36a:	4b06      	ldr	r3, [pc, #24]	; (800d384 <_svfiprintf_r+0x1f8>)
 800d36c:	a904      	add	r1, sp, #16
 800d36e:	4638      	mov	r0, r7
 800d370:	f000 f87a 	bl	800d468 <_printf_i>
 800d374:	e7eb      	b.n	800d34e <_svfiprintf_r+0x1c2>
 800d376:	bf00      	nop
 800d378:	08012400 	.word	0x08012400
 800d37c:	0801240a 	.word	0x0801240a
 800d380:	00000000 	.word	0x00000000
 800d384:	0800d0d5 	.word	0x0800d0d5
 800d388:	08012406 	.word	0x08012406

0800d38c <_printf_common>:
 800d38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d390:	4616      	mov	r6, r2
 800d392:	4699      	mov	r9, r3
 800d394:	688a      	ldr	r2, [r1, #8]
 800d396:	690b      	ldr	r3, [r1, #16]
 800d398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d39c:	4293      	cmp	r3, r2
 800d39e:	bfb8      	it	lt
 800d3a0:	4613      	movlt	r3, r2
 800d3a2:	6033      	str	r3, [r6, #0]
 800d3a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d3a8:	4607      	mov	r7, r0
 800d3aa:	460c      	mov	r4, r1
 800d3ac:	b10a      	cbz	r2, 800d3b2 <_printf_common+0x26>
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	6033      	str	r3, [r6, #0]
 800d3b2:	6823      	ldr	r3, [r4, #0]
 800d3b4:	0699      	lsls	r1, r3, #26
 800d3b6:	bf42      	ittt	mi
 800d3b8:	6833      	ldrmi	r3, [r6, #0]
 800d3ba:	3302      	addmi	r3, #2
 800d3bc:	6033      	strmi	r3, [r6, #0]
 800d3be:	6825      	ldr	r5, [r4, #0]
 800d3c0:	f015 0506 	ands.w	r5, r5, #6
 800d3c4:	d106      	bne.n	800d3d4 <_printf_common+0x48>
 800d3c6:	f104 0a19 	add.w	sl, r4, #25
 800d3ca:	68e3      	ldr	r3, [r4, #12]
 800d3cc:	6832      	ldr	r2, [r6, #0]
 800d3ce:	1a9b      	subs	r3, r3, r2
 800d3d0:	42ab      	cmp	r3, r5
 800d3d2:	dc26      	bgt.n	800d422 <_printf_common+0x96>
 800d3d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d3d8:	1e13      	subs	r3, r2, #0
 800d3da:	6822      	ldr	r2, [r4, #0]
 800d3dc:	bf18      	it	ne
 800d3de:	2301      	movne	r3, #1
 800d3e0:	0692      	lsls	r2, r2, #26
 800d3e2:	d42b      	bmi.n	800d43c <_printf_common+0xb0>
 800d3e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d3e8:	4649      	mov	r1, r9
 800d3ea:	4638      	mov	r0, r7
 800d3ec:	47c0      	blx	r8
 800d3ee:	3001      	adds	r0, #1
 800d3f0:	d01e      	beq.n	800d430 <_printf_common+0xa4>
 800d3f2:	6823      	ldr	r3, [r4, #0]
 800d3f4:	68e5      	ldr	r5, [r4, #12]
 800d3f6:	6832      	ldr	r2, [r6, #0]
 800d3f8:	f003 0306 	and.w	r3, r3, #6
 800d3fc:	2b04      	cmp	r3, #4
 800d3fe:	bf08      	it	eq
 800d400:	1aad      	subeq	r5, r5, r2
 800d402:	68a3      	ldr	r3, [r4, #8]
 800d404:	6922      	ldr	r2, [r4, #16]
 800d406:	bf0c      	ite	eq
 800d408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d40c:	2500      	movne	r5, #0
 800d40e:	4293      	cmp	r3, r2
 800d410:	bfc4      	itt	gt
 800d412:	1a9b      	subgt	r3, r3, r2
 800d414:	18ed      	addgt	r5, r5, r3
 800d416:	2600      	movs	r6, #0
 800d418:	341a      	adds	r4, #26
 800d41a:	42b5      	cmp	r5, r6
 800d41c:	d11a      	bne.n	800d454 <_printf_common+0xc8>
 800d41e:	2000      	movs	r0, #0
 800d420:	e008      	b.n	800d434 <_printf_common+0xa8>
 800d422:	2301      	movs	r3, #1
 800d424:	4652      	mov	r2, sl
 800d426:	4649      	mov	r1, r9
 800d428:	4638      	mov	r0, r7
 800d42a:	47c0      	blx	r8
 800d42c:	3001      	adds	r0, #1
 800d42e:	d103      	bne.n	800d438 <_printf_common+0xac>
 800d430:	f04f 30ff 	mov.w	r0, #4294967295
 800d434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d438:	3501      	adds	r5, #1
 800d43a:	e7c6      	b.n	800d3ca <_printf_common+0x3e>
 800d43c:	18e1      	adds	r1, r4, r3
 800d43e:	1c5a      	adds	r2, r3, #1
 800d440:	2030      	movs	r0, #48	; 0x30
 800d442:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d446:	4422      	add	r2, r4
 800d448:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d44c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d450:	3302      	adds	r3, #2
 800d452:	e7c7      	b.n	800d3e4 <_printf_common+0x58>
 800d454:	2301      	movs	r3, #1
 800d456:	4622      	mov	r2, r4
 800d458:	4649      	mov	r1, r9
 800d45a:	4638      	mov	r0, r7
 800d45c:	47c0      	blx	r8
 800d45e:	3001      	adds	r0, #1
 800d460:	d0e6      	beq.n	800d430 <_printf_common+0xa4>
 800d462:	3601      	adds	r6, #1
 800d464:	e7d9      	b.n	800d41a <_printf_common+0x8e>
	...

0800d468 <_printf_i>:
 800d468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d46c:	7e0f      	ldrb	r7, [r1, #24]
 800d46e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d470:	2f78      	cmp	r7, #120	; 0x78
 800d472:	4691      	mov	r9, r2
 800d474:	4680      	mov	r8, r0
 800d476:	460c      	mov	r4, r1
 800d478:	469a      	mov	sl, r3
 800d47a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d47e:	d807      	bhi.n	800d490 <_printf_i+0x28>
 800d480:	2f62      	cmp	r7, #98	; 0x62
 800d482:	d80a      	bhi.n	800d49a <_printf_i+0x32>
 800d484:	2f00      	cmp	r7, #0
 800d486:	f000 80d8 	beq.w	800d63a <_printf_i+0x1d2>
 800d48a:	2f58      	cmp	r7, #88	; 0x58
 800d48c:	f000 80a3 	beq.w	800d5d6 <_printf_i+0x16e>
 800d490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d494:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d498:	e03a      	b.n	800d510 <_printf_i+0xa8>
 800d49a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d49e:	2b15      	cmp	r3, #21
 800d4a0:	d8f6      	bhi.n	800d490 <_printf_i+0x28>
 800d4a2:	a101      	add	r1, pc, #4	; (adr r1, 800d4a8 <_printf_i+0x40>)
 800d4a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d4a8:	0800d501 	.word	0x0800d501
 800d4ac:	0800d515 	.word	0x0800d515
 800d4b0:	0800d491 	.word	0x0800d491
 800d4b4:	0800d491 	.word	0x0800d491
 800d4b8:	0800d491 	.word	0x0800d491
 800d4bc:	0800d491 	.word	0x0800d491
 800d4c0:	0800d515 	.word	0x0800d515
 800d4c4:	0800d491 	.word	0x0800d491
 800d4c8:	0800d491 	.word	0x0800d491
 800d4cc:	0800d491 	.word	0x0800d491
 800d4d0:	0800d491 	.word	0x0800d491
 800d4d4:	0800d621 	.word	0x0800d621
 800d4d8:	0800d545 	.word	0x0800d545
 800d4dc:	0800d603 	.word	0x0800d603
 800d4e0:	0800d491 	.word	0x0800d491
 800d4e4:	0800d491 	.word	0x0800d491
 800d4e8:	0800d643 	.word	0x0800d643
 800d4ec:	0800d491 	.word	0x0800d491
 800d4f0:	0800d545 	.word	0x0800d545
 800d4f4:	0800d491 	.word	0x0800d491
 800d4f8:	0800d491 	.word	0x0800d491
 800d4fc:	0800d60b 	.word	0x0800d60b
 800d500:	682b      	ldr	r3, [r5, #0]
 800d502:	1d1a      	adds	r2, r3, #4
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	602a      	str	r2, [r5, #0]
 800d508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d50c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d510:	2301      	movs	r3, #1
 800d512:	e0a3      	b.n	800d65c <_printf_i+0x1f4>
 800d514:	6820      	ldr	r0, [r4, #0]
 800d516:	6829      	ldr	r1, [r5, #0]
 800d518:	0606      	lsls	r6, r0, #24
 800d51a:	f101 0304 	add.w	r3, r1, #4
 800d51e:	d50a      	bpl.n	800d536 <_printf_i+0xce>
 800d520:	680e      	ldr	r6, [r1, #0]
 800d522:	602b      	str	r3, [r5, #0]
 800d524:	2e00      	cmp	r6, #0
 800d526:	da03      	bge.n	800d530 <_printf_i+0xc8>
 800d528:	232d      	movs	r3, #45	; 0x2d
 800d52a:	4276      	negs	r6, r6
 800d52c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d530:	485e      	ldr	r0, [pc, #376]	; (800d6ac <_printf_i+0x244>)
 800d532:	230a      	movs	r3, #10
 800d534:	e019      	b.n	800d56a <_printf_i+0x102>
 800d536:	680e      	ldr	r6, [r1, #0]
 800d538:	602b      	str	r3, [r5, #0]
 800d53a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d53e:	bf18      	it	ne
 800d540:	b236      	sxthne	r6, r6
 800d542:	e7ef      	b.n	800d524 <_printf_i+0xbc>
 800d544:	682b      	ldr	r3, [r5, #0]
 800d546:	6820      	ldr	r0, [r4, #0]
 800d548:	1d19      	adds	r1, r3, #4
 800d54a:	6029      	str	r1, [r5, #0]
 800d54c:	0601      	lsls	r1, r0, #24
 800d54e:	d501      	bpl.n	800d554 <_printf_i+0xec>
 800d550:	681e      	ldr	r6, [r3, #0]
 800d552:	e002      	b.n	800d55a <_printf_i+0xf2>
 800d554:	0646      	lsls	r6, r0, #25
 800d556:	d5fb      	bpl.n	800d550 <_printf_i+0xe8>
 800d558:	881e      	ldrh	r6, [r3, #0]
 800d55a:	4854      	ldr	r0, [pc, #336]	; (800d6ac <_printf_i+0x244>)
 800d55c:	2f6f      	cmp	r7, #111	; 0x6f
 800d55e:	bf0c      	ite	eq
 800d560:	2308      	moveq	r3, #8
 800d562:	230a      	movne	r3, #10
 800d564:	2100      	movs	r1, #0
 800d566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d56a:	6865      	ldr	r5, [r4, #4]
 800d56c:	60a5      	str	r5, [r4, #8]
 800d56e:	2d00      	cmp	r5, #0
 800d570:	bfa2      	ittt	ge
 800d572:	6821      	ldrge	r1, [r4, #0]
 800d574:	f021 0104 	bicge.w	r1, r1, #4
 800d578:	6021      	strge	r1, [r4, #0]
 800d57a:	b90e      	cbnz	r6, 800d580 <_printf_i+0x118>
 800d57c:	2d00      	cmp	r5, #0
 800d57e:	d04d      	beq.n	800d61c <_printf_i+0x1b4>
 800d580:	4615      	mov	r5, r2
 800d582:	fbb6 f1f3 	udiv	r1, r6, r3
 800d586:	fb03 6711 	mls	r7, r3, r1, r6
 800d58a:	5dc7      	ldrb	r7, [r0, r7]
 800d58c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d590:	4637      	mov	r7, r6
 800d592:	42bb      	cmp	r3, r7
 800d594:	460e      	mov	r6, r1
 800d596:	d9f4      	bls.n	800d582 <_printf_i+0x11a>
 800d598:	2b08      	cmp	r3, #8
 800d59a:	d10b      	bne.n	800d5b4 <_printf_i+0x14c>
 800d59c:	6823      	ldr	r3, [r4, #0]
 800d59e:	07de      	lsls	r6, r3, #31
 800d5a0:	d508      	bpl.n	800d5b4 <_printf_i+0x14c>
 800d5a2:	6923      	ldr	r3, [r4, #16]
 800d5a4:	6861      	ldr	r1, [r4, #4]
 800d5a6:	4299      	cmp	r1, r3
 800d5a8:	bfde      	ittt	le
 800d5aa:	2330      	movle	r3, #48	; 0x30
 800d5ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d5b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d5b4:	1b52      	subs	r2, r2, r5
 800d5b6:	6122      	str	r2, [r4, #16]
 800d5b8:	f8cd a000 	str.w	sl, [sp]
 800d5bc:	464b      	mov	r3, r9
 800d5be:	aa03      	add	r2, sp, #12
 800d5c0:	4621      	mov	r1, r4
 800d5c2:	4640      	mov	r0, r8
 800d5c4:	f7ff fee2 	bl	800d38c <_printf_common>
 800d5c8:	3001      	adds	r0, #1
 800d5ca:	d14c      	bne.n	800d666 <_printf_i+0x1fe>
 800d5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d0:	b004      	add	sp, #16
 800d5d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5d6:	4835      	ldr	r0, [pc, #212]	; (800d6ac <_printf_i+0x244>)
 800d5d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d5dc:	6829      	ldr	r1, [r5, #0]
 800d5de:	6823      	ldr	r3, [r4, #0]
 800d5e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d5e4:	6029      	str	r1, [r5, #0]
 800d5e6:	061d      	lsls	r5, r3, #24
 800d5e8:	d514      	bpl.n	800d614 <_printf_i+0x1ac>
 800d5ea:	07df      	lsls	r7, r3, #31
 800d5ec:	bf44      	itt	mi
 800d5ee:	f043 0320 	orrmi.w	r3, r3, #32
 800d5f2:	6023      	strmi	r3, [r4, #0]
 800d5f4:	b91e      	cbnz	r6, 800d5fe <_printf_i+0x196>
 800d5f6:	6823      	ldr	r3, [r4, #0]
 800d5f8:	f023 0320 	bic.w	r3, r3, #32
 800d5fc:	6023      	str	r3, [r4, #0]
 800d5fe:	2310      	movs	r3, #16
 800d600:	e7b0      	b.n	800d564 <_printf_i+0xfc>
 800d602:	6823      	ldr	r3, [r4, #0]
 800d604:	f043 0320 	orr.w	r3, r3, #32
 800d608:	6023      	str	r3, [r4, #0]
 800d60a:	2378      	movs	r3, #120	; 0x78
 800d60c:	4828      	ldr	r0, [pc, #160]	; (800d6b0 <_printf_i+0x248>)
 800d60e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d612:	e7e3      	b.n	800d5dc <_printf_i+0x174>
 800d614:	0659      	lsls	r1, r3, #25
 800d616:	bf48      	it	mi
 800d618:	b2b6      	uxthmi	r6, r6
 800d61a:	e7e6      	b.n	800d5ea <_printf_i+0x182>
 800d61c:	4615      	mov	r5, r2
 800d61e:	e7bb      	b.n	800d598 <_printf_i+0x130>
 800d620:	682b      	ldr	r3, [r5, #0]
 800d622:	6826      	ldr	r6, [r4, #0]
 800d624:	6961      	ldr	r1, [r4, #20]
 800d626:	1d18      	adds	r0, r3, #4
 800d628:	6028      	str	r0, [r5, #0]
 800d62a:	0635      	lsls	r5, r6, #24
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	d501      	bpl.n	800d634 <_printf_i+0x1cc>
 800d630:	6019      	str	r1, [r3, #0]
 800d632:	e002      	b.n	800d63a <_printf_i+0x1d2>
 800d634:	0670      	lsls	r0, r6, #25
 800d636:	d5fb      	bpl.n	800d630 <_printf_i+0x1c8>
 800d638:	8019      	strh	r1, [r3, #0]
 800d63a:	2300      	movs	r3, #0
 800d63c:	6123      	str	r3, [r4, #16]
 800d63e:	4615      	mov	r5, r2
 800d640:	e7ba      	b.n	800d5b8 <_printf_i+0x150>
 800d642:	682b      	ldr	r3, [r5, #0]
 800d644:	1d1a      	adds	r2, r3, #4
 800d646:	602a      	str	r2, [r5, #0]
 800d648:	681d      	ldr	r5, [r3, #0]
 800d64a:	6862      	ldr	r2, [r4, #4]
 800d64c:	2100      	movs	r1, #0
 800d64e:	4628      	mov	r0, r5
 800d650:	f7f2 fdde 	bl	8000210 <memchr>
 800d654:	b108      	cbz	r0, 800d65a <_printf_i+0x1f2>
 800d656:	1b40      	subs	r0, r0, r5
 800d658:	6060      	str	r0, [r4, #4]
 800d65a:	6863      	ldr	r3, [r4, #4]
 800d65c:	6123      	str	r3, [r4, #16]
 800d65e:	2300      	movs	r3, #0
 800d660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d664:	e7a8      	b.n	800d5b8 <_printf_i+0x150>
 800d666:	6923      	ldr	r3, [r4, #16]
 800d668:	462a      	mov	r2, r5
 800d66a:	4649      	mov	r1, r9
 800d66c:	4640      	mov	r0, r8
 800d66e:	47d0      	blx	sl
 800d670:	3001      	adds	r0, #1
 800d672:	d0ab      	beq.n	800d5cc <_printf_i+0x164>
 800d674:	6823      	ldr	r3, [r4, #0]
 800d676:	079b      	lsls	r3, r3, #30
 800d678:	d413      	bmi.n	800d6a2 <_printf_i+0x23a>
 800d67a:	68e0      	ldr	r0, [r4, #12]
 800d67c:	9b03      	ldr	r3, [sp, #12]
 800d67e:	4298      	cmp	r0, r3
 800d680:	bfb8      	it	lt
 800d682:	4618      	movlt	r0, r3
 800d684:	e7a4      	b.n	800d5d0 <_printf_i+0x168>
 800d686:	2301      	movs	r3, #1
 800d688:	4632      	mov	r2, r6
 800d68a:	4649      	mov	r1, r9
 800d68c:	4640      	mov	r0, r8
 800d68e:	47d0      	blx	sl
 800d690:	3001      	adds	r0, #1
 800d692:	d09b      	beq.n	800d5cc <_printf_i+0x164>
 800d694:	3501      	adds	r5, #1
 800d696:	68e3      	ldr	r3, [r4, #12]
 800d698:	9903      	ldr	r1, [sp, #12]
 800d69a:	1a5b      	subs	r3, r3, r1
 800d69c:	42ab      	cmp	r3, r5
 800d69e:	dcf2      	bgt.n	800d686 <_printf_i+0x21e>
 800d6a0:	e7eb      	b.n	800d67a <_printf_i+0x212>
 800d6a2:	2500      	movs	r5, #0
 800d6a4:	f104 0619 	add.w	r6, r4, #25
 800d6a8:	e7f5      	b.n	800d696 <_printf_i+0x22e>
 800d6aa:	bf00      	nop
 800d6ac:	08012411 	.word	0x08012411
 800d6b0:	08012422 	.word	0x08012422

0800d6b4 <memmove>:
 800d6b4:	4288      	cmp	r0, r1
 800d6b6:	b510      	push	{r4, lr}
 800d6b8:	eb01 0402 	add.w	r4, r1, r2
 800d6bc:	d902      	bls.n	800d6c4 <memmove+0x10>
 800d6be:	4284      	cmp	r4, r0
 800d6c0:	4623      	mov	r3, r4
 800d6c2:	d807      	bhi.n	800d6d4 <memmove+0x20>
 800d6c4:	1e43      	subs	r3, r0, #1
 800d6c6:	42a1      	cmp	r1, r4
 800d6c8:	d008      	beq.n	800d6dc <memmove+0x28>
 800d6ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d6d2:	e7f8      	b.n	800d6c6 <memmove+0x12>
 800d6d4:	4402      	add	r2, r0
 800d6d6:	4601      	mov	r1, r0
 800d6d8:	428a      	cmp	r2, r1
 800d6da:	d100      	bne.n	800d6de <memmove+0x2a>
 800d6dc:	bd10      	pop	{r4, pc}
 800d6de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d6e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d6e6:	e7f7      	b.n	800d6d8 <memmove+0x24>

0800d6e8 <_realloc_r>:
 800d6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ec:	4680      	mov	r8, r0
 800d6ee:	4614      	mov	r4, r2
 800d6f0:	460e      	mov	r6, r1
 800d6f2:	b921      	cbnz	r1, 800d6fe <_realloc_r+0x16>
 800d6f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6f8:	4611      	mov	r1, r2
 800d6fa:	f7ff bb85 	b.w	800ce08 <_malloc_r>
 800d6fe:	b92a      	cbnz	r2, 800d70c <_realloc_r+0x24>
 800d700:	f7ff fc9c 	bl	800d03c <_free_r>
 800d704:	4625      	mov	r5, r4
 800d706:	4628      	mov	r0, r5
 800d708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d70c:	f000 f81b 	bl	800d746 <_malloc_usable_size_r>
 800d710:	4284      	cmp	r4, r0
 800d712:	4607      	mov	r7, r0
 800d714:	d802      	bhi.n	800d71c <_realloc_r+0x34>
 800d716:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d71a:	d812      	bhi.n	800d742 <_realloc_r+0x5a>
 800d71c:	4621      	mov	r1, r4
 800d71e:	4640      	mov	r0, r8
 800d720:	f7ff fb72 	bl	800ce08 <_malloc_r>
 800d724:	4605      	mov	r5, r0
 800d726:	2800      	cmp	r0, #0
 800d728:	d0ed      	beq.n	800d706 <_realloc_r+0x1e>
 800d72a:	42bc      	cmp	r4, r7
 800d72c:	4622      	mov	r2, r4
 800d72e:	4631      	mov	r1, r6
 800d730:	bf28      	it	cs
 800d732:	463a      	movcs	r2, r7
 800d734:	f7ff fb32 	bl	800cd9c <memcpy>
 800d738:	4631      	mov	r1, r6
 800d73a:	4640      	mov	r0, r8
 800d73c:	f7ff fc7e 	bl	800d03c <_free_r>
 800d740:	e7e1      	b.n	800d706 <_realloc_r+0x1e>
 800d742:	4635      	mov	r5, r6
 800d744:	e7df      	b.n	800d706 <_realloc_r+0x1e>

0800d746 <_malloc_usable_size_r>:
 800d746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d74a:	1f18      	subs	r0, r3, #4
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	bfbc      	itt	lt
 800d750:	580b      	ldrlt	r3, [r1, r0]
 800d752:	18c0      	addlt	r0, r0, r3
 800d754:	4770      	bx	lr
	...

0800d758 <_init>:
 800d758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d75a:	bf00      	nop
 800d75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d75e:	bc08      	pop	{r3}
 800d760:	469e      	mov	lr, r3
 800d762:	4770      	bx	lr

0800d764 <_fini>:
 800d764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d766:	bf00      	nop
 800d768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d76a:	bc08      	pop	{r3}
 800d76c:	469e      	mov	lr, r3
 800d76e:	4770      	bx	lr
